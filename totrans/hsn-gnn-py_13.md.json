["```py\n    pip install torch-geometric-temporal==0.54.0\n    ```", "```py\n    from torch_geometric_temporal.signal import temporal_signal_split\n    from torch_geometric_temporal.dataset import WikiMathsDatasetLoader\n    from torch_geometric_temporal.nn.recurrent import EvolveGCNH\n    ```", "```py\n    dataset = WikiMathsDatasetLoader().get_dataset() train_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.5)\n    dataset[0]\n    Data(x=[1068, 8], edge_index=[2, 27079], edge_attr=[27079], y=[1068])\n    dataset[500]\n    Data(x=[1068, 8], edge_index=[2, 27079], edge_attr=[27079], y=[1068])\n    ```", "```py\n    import pandas as pd\n    mean_cases = [snapshot.y.mean().item() for snapshot in dataset]\n    std_cases = [snapshot.y.std().item() for snapshot in dataset]\n    df = pd.DataFrame(mean_cases, columns=['mean'])\n    df['std'] = pd.DataFrame(std_cases, columns=['std'])\n    df['rolling'] = df['mean'].rolling(7).mean()\n    ```", "```py\n    plt.figure(figsize=(15,5))\n    plt.plot(df['mean'], 'k-', label='Mean')\n    plt.plot(df['rolling'], 'g-', label='Moving average')\n    plt.grid(linestyle=':')\n    plt.fill_between(df.index, df['mean']-df['std'], df['mean']+df['std'], color='r', alpha=0.1)\n    plt.axvline(x=360, color='b', linestyle='--')\n    plt.text(360, 1.5, 'Train/test split', rotation=-90, color='b')\n    plt.xlabel('Time (days)')\n    plt.ylabel('Normalized number of visits')\n    plt.legend(loc='upper right')\n    ```", "```py\n    class TemporalGNN(torch.nn.Module):\n        def __init__(self, node_count, dim_in):\n            super().__init__()\n            self.recurrent = EvolveGCNH(node_count, dim_in)\n            self.linear = torch.nn.Linear(dim_in, 1)\n    ```", "```py\n        def forward(self, x, edge_index, edge_weight):\n            h = self.recurrent(x, edge_index, edge_weight).relu()\n            h = self.linear(h)\n            return h\n    ```", "```py\n    model = TemporalGNN(dataset[0].x.shape[0], dataset[0].x.shape[1])\n    optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n    model.train()\n    ```", "```py\n    model\n    TemporalGNN(\n      (recurrent): EvolveGCNH(\n        (pooling_layer): TopKPooling(8, ratio=0.00749063670411985, multiplier=1.0)\n        (recurrent_layer): GRU(8, 8)\n        (conv_layer): GCNConv_Fixed_W(8, 8)\n      )\n      (linear): Linear(in_features=8, out_features=1, bias=True)\n    )\n    ```", "```py\n    for epoch in range(50):\n        for i, snapshot in enumerate(train_dataset):\n            y_pred = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n            loss = torch.mean((y_pred-snapshot.y)**2)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n    ```", "```py\n    model.eval()\n    loss = 0\n    for i, snapshot in enumerate(test_dataset):\n        y_pred = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n        mse = torch.mean((y_pred-snapshot.y)**2)\n        loss += mse\n    loss = loss / (i+1)\n    print(f'MSE = {loss.item():.4f}')\n    MSE = 0.7559\n    ```", "```py\n     y_preds = [model(snapshot.x, snapshot.edge_index, snapshot.edge_attr).squeeze().detach().numpy().mean() for snapshot in test_dataset]\n    plt.figure(figsize=(10,5))\n    plt.plot(df['mean'], 'k-', label='Mean')\n    plt.plot(df['rolling'], 'g-', label='Moving average')\n    plt.plot(range(360,722), y_preds, 'r-', label='Prediction')\n    plt.grid(linestyle=':')\n    plt.fill_between(df.index, df['mean']-df['std'], df['mean']+df['std'], color='r', alpha=0.1)\n    plt.axvline(x=360, color='b', linestyle='--')\n    plt.text(360, 1.5, 'Train/test split', rotation=-90, color='b')\n    plt.xlabel('Time (days)')\n    plt.ylabel('Normalized number of visits')\n    plt.legend(loc='upper right')\n    ```", "```py\n    import seaborn as sns\n    y_pred = model(test_dataset[0].x, test_dataset[0].edge_index, test_dataset[0].edge_attr).detach().squeeze().numpy()\n    plt.figure(figsize=(10,5))\n    sns.regplot(x=test_dataset[0].y.numpy(), y=y_pred)\n    ```", "```py\nfrom torch_geometric_temporal.nn.recurrent import EvolveGCNO\nclass TemporalGNN(torch.nn.Module):\n    def __init__(self, dim_in):\n        super().__init__()\n        self.recurrent = EvolveGCNO(dim_in, 1)\n        self.linear = torch.nn.Linear(dim_in, 1)\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight).relu()\n        h = self.linear(h)\n        return h\nmodel = TemporalGNN(dataset[0].x.shape[1])\n```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from torch_geometric_temporal.dataset import EnglandCovidDatasetLoader\n    from torch_geometric_temporal.signal import temporal_signal_split\n    ```", "```py\n    dataset = EnglandCovidDatasetLoader().get_dataset(lags=14)\n    ```", "```py\n    train_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)\n    ```", "```py\n    From torch_geometric_temporal.nn.recurrent import MPNNLSTM\n    ```", "```py\n    Class TemporalGNN(torch.nn.Module):\n        def __init__(self, dim_in, dim_h, num_nodes):\n            super().__init__()\n            self.recurrent = MPNNLSTM(dim_in, dim_h, num_nodes, 1, 0.5)\n            self.dropout = torch.nn.Dropout(0.5)\n            self.linear = torch.nn.Linear(2*dim_h + dim_in, 1)\n    ```", "```py\n        Def forward(self, x, edge_index, edge_weight):\n            h = self.recurrent(x, edge_index, edge_weight).relu()\n            h = self.dropout(h)\n            h = self.linear(h).tanh()\n            return h\n    ```", "```py\n    model = TemporalGNN(dataset[0].x.shape[1], 64, dataset[0].x.shape[0])\n    print(model)\n    TemporalGNN(\n      (recurrent): MPNNLSTM(\n        (_convolution_1): GCNConv(14, 64)\n        (_convolution_2): GCNConv(64, 64)\n        (_batch_norm_1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (_batch_norm_2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (_recurrent_1): LSTM(128, 64)\n        (_recurrent_2): LSTM(64, 64)\n      )\n      (dropout): Dropout(p=0.5, inplace=False)\n      (linear): Linear(in_features=142, out_features=1, bias=True)\n    )\n    ```", "```py\n    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n    model.train()\n    for epoch in range(100):\n        loss = 0\n        for i, snapshot in enumerate(train_dataset):\n            y_pred = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n            loss = loss + torch.mean((y_pred-snapshot.y)**2)\n        loss = loss / (i+1)\n        loss.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n    ```", "```py\n    model.eval()\n    loss = 0\n    for i, snapshot in enumerate(test_dataset):\n        y_pred = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n        mse = torch.mean((y_pred-snapshot.y)**2)\n        loss += mse\n    loss = loss / (i+1)\n    print(f'MSE: {loss.item():.4f}')\n    MSE: 1.3722\n    ```"]