- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Graph Learning in the Real World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the ever-evolving landscape of data science and **machine learning** ( **ML**
    ), the transformative power of graph-based learning has emerged as a pivotal force
    in unraveling the complexities of real-world phenomena. From social networks and
    transportation systems to biological interactions and e-commerce, a multitude
    of intricate systems can be abstracted and analyzed through the lens of graphs.
    This chapter delves into the fascinating realm of graph learning in the real world,
    where we explore the compelling idea that many intricate real-world problems can
    be effectively translated into node-, edge-, and graph-level prediction tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Graphs** , composed of **nodes** representing entities and **edges** capturing
    relationships between them, provide an intuitive framework for modeling interconnected
    structures. By harnessing the inherent relationships encoded in graphs, we gain
    a powerful tool for understanding the dynamics and patterns underlying diverse
    domains. The focus will be on harnessing the predictive potential embedded in
    the topology and structure of graphs, thereby enabling solutions to problems ranging
    from **recommendation systems** and fraud detection to drug discovery and urban
    planning.'
  prefs: []
  type: TYPE_NORMAL
- en: At the heart of graph learning are *nodes* , the elemental entities in a network.
    Nodes can be anything from social network users to biological molecules and cities
    in a transportation system. By learning and predicting node attributes or behaviors,
    we can build applications such as personalized recommendations and targeted marketing.
  prefs: []
  type: TYPE_NORMAL
- en: '*Edges* , representing the relations between nodes, add another dimension of
    complexity. Edges can capture social ties, biological interactions, or network
    connections. By learning and predicting edge properties or outcomes, we can gain
    insights into how entities relate to each other. This is important for tasks such
    as link prediction, anomaly detection, and network optimization.'
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the individual nodes and edges, graph-level predictions offer a global
    perspective. By learning and analyzing the overall structure and features of a
    graph, we can discover patterns, communities, and phenomena that emerge from the
    network. This is useful for scenarios such as urban planning, where the design
    of city infrastructure can affect various aspects of daily life.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll explore the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Node-level learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge-level learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graph-level learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node-level learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Node-level learning** is the task of learning and predicting attributes or
    behaviors of individual nodes in a graph. Depending on the type and range of the
    target variable, node-level learning can be categorized into four subtasks: **node
    classification** , **node regression** , **node clustering** , and **node** **anomaly
    detection** .'
  prefs: []
  type: TYPE_NORMAL
- en: Node classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Node classification** in graphs is an ML task that aims to assign labels
    or categories to nodes based on their features and connections. For example, in
    an e-commerce graph, we can classify users into different preference groups based
    on their interactions with items. To do this, we need to extract features from
    both nodes and edges, such as demographic information, item attributes, popularity,
    reviews, frequency of purchases, and time spent on items. These features capture
    the characteristics and preferences of users and items, as well as the strength
    and nature of their interactions. By training an ML model on a subset of labeled
    nodes, we can then predict the labels for the unlabeled nodes. This way, we can
    segment users into groups such as *Health Conscious* , *Tech Enthusiasts* , or
    *Fashion Lovers* and provide them with more relevant and personalized recommendations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take this graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![<mml:math   display="block"><mml:mi>G</mml:mi><mml:mo>(</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>E</mml:mi><mml:mo>)</mml:mo></mml:math>](img/69.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *![<mml:math  ><mml:mi>V</mml:mi></mml:math>](img/1.png) *  is the set
    of nodes,  * ![<mml:math  ><mml:mi>E</mml:mi></mml:math>](img/2.png) *  is the
    set of edges, and each node  * ![<math ><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow></math>](img/72.png)
    * possesses a feature vector  * ![<mml:math  ><mml:msub><mml:mrow><mml:mi>X</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>](img/73.png)
    * *.*
  prefs: []
  type: TYPE_NORMAL
- en: 'The task of node classification aims to predict the label for each node ![<mml:math  ><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>](img/74.png)
    based on its features and the graph structure. Mathematically, this can be represented
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![<mml:math  ><mml:mi>f</mml:mi><mml:mi mathvariant="normal"> </mml:mi><mml:mfenced
    separators="|"><mml:mrow><mml:mi>X</mml:mi><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi
    mathvariant="normal"> </mml:mi><mml:mi>G</mml:mi></mml:mrow></mml:mfenced></mml:math>](img/75.png)
    ![<mml:math  ><mml:mo>→</mml:mo><mml:mi mathvariant="normal"> </mml:mi><mml:msub><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>](img/76.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, ![<mml:math  ><mml:mi>f</mml:mi></mml:math>](img/77.png) is the node classification
    function that considers the features of the node ![<math ><mrow><mrow><mi>X</mi><mi>i</mi></mrow></mrow></math>](img/78.png)
    and the structure of the graph ![<mml:math  ><mml:mi>G</mml:mi></mml:math>](img/79.png)
    to produce the predicted label ![<mml:math  ><mml:msub><mml:mrow><mml:mi>y</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>](img/80.png)
    .The function ![<mml:math  ><mml:mi>f</mml:mi></mml:math>](img/81.png) is typically
    learned from labeled examples in a training dataset, where * nodes * are associated
    with ground-truth labels. The goal is to generalize this learning to accurately
    classify nodes with   unknown   labels in unseen data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Node classification task for e-commerce](img/B22118_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Node classification task for e-commerce
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2* *.1* , a labeled e-commerce graph, our objective is to determine
    the category to which Andrew belongs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other real-world examples of node classification tasks include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Information retrieval** : Node classification can be used to categorize web
    pages, documents, queries, or users based on their content, structure, and interactions.
    For example, node classification can help classify queries into different intents
    on an e-commerce query graph or classify web pages into different topics on a
    web graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social network analysis** : Node classification can be used to identify the
    roles, communities, or interests of users or entities in a social network based
    on their attributes, behaviors, and relationships. For example, it can help us
    detect fake or malicious accounts on Twitter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bioinformatics** : Node classification can be used to infer the functions,
    interactions, or properties of biological molecules or cells based on their features
    and associations. For example, node classification can help predict protein functions
    on a protein-protein interaction network or identify cell types on a single-cell
    gene expression network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s look at what happens when we have a continuous value to predict.
  prefs: []
  type: TYPE_NORMAL
- en: Node regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to classification, **node regression** involves predicting numerical
    values associated with individual nodes. This task is particularly useful in scenarios
    where understanding the quantitative aspects of nodes is crucial. In an e-commerce
    system, one possible use case is to predict the **lifetime value** ( **LTV** )
    of customers based on their interactions with products and other features. For
    example, you can model the e-commerce platform as a bipartite graph, where customers
    and products are *nodes* , and purchases, ratings, or views are *edges* . You
    can extract features from both nodes and edges, such as customer demographics,
    product attributes, historical purchase patterns, popularity, and strength of
    interaction. Then, you can train a regression model to predict the LTV of each
    customer, which can help you segment your customers and optimize your marketing
    strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Node regression for e-commerce LTV prediction](img/B22118_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Node regression for e-commerce LTV prediction
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* *.2* illustrates a labeled e-commerce graph for predicting LTV using
    node regression. The graph contains nodes representing users (James, John, Anna,
    Andrew), items (clothing and electronics), and various features associated with
    users, items, and their interactions. The goal is to predict Andrew’s LTV based
    on the graph structure and available features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other real-world examples of node regression include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product demand** : Given a product graph with products as *nodes* and similarity
    between products as *edges* , node regression can forecast demand for a product
    based on the sales of related products. This can assist inventory and supply chain
    management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Estimating property values in real estate networks** : Nodes in a real estate
    graph could represent individual properties. Node regression can predict property
    values based on features such as location, size, amenities, and recent property
    sales in the neighborhood.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s now see where we can leverage clustering techniques in graph systems.
  prefs: []
  type: TYPE_NORMAL
- en: Node clustering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Node clustering** aims to group nodes with similar characteristics or connectivity
    patterns. By identifying communities within the graph, this task provides a deeper
    understanding of the inherent structures and relationships. In a citation network,
    for instance, researchers working on similar topics may form distinct clusters,
    unveiling communities of interest.'
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the e-commerce example, node clustering can be employed to group
    customers based on their purchase behavior and preferences. This approach facilitates
    a deeper understanding of customer segments, enables targeted marketing campaigns,
    and enhances the provision of personalized recommendations. By utilizing a graph
    clustering algorithm, we can identify clusters of customers who exhibit similar
    purchasing patterns or engage with items that are commonly bought by similar customer
    profiles. Node clustering can serve as a valuable tool for tailoring marketing
    strategies to specific customer segments and refining recommendation systems for
    a more personalized shopping experience.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Node clustering for e-commerce customers based on purchase behavior](img/B22118_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Node clustering for e-commerce customers based on purchase behavior
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2* *.3* , we see how clustering can be applied at the node level
    to segregate users based on their purchase history.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other real-world examples of node clustering involve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Citation networks** : In academic citation networks, *nodes* can represent
    academic papers, and *edges* can indicate citations. Clustering papers based on
    similar topics, keywords, or citation patterns can assist researchers in literature
    review and identifying research trends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet of things (IoT) networks** : In an IoT network, *nodes* can represent
    connected devices, and *edges* can indicate communication links. Clustering devices
    based on their functionality, usage patterns, or compatibility can aid in optimizing
    network traffic, resource allocation, and identifying potential security threats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At times, we might be interested in identifying anomalies in our graph data.
    Let’s see how!
  prefs: []
  type: TYPE_NORMAL
- en: Node anomaly detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Node anomaly detection** in graph learning is the task of identifying graph
    nodes that deviate significantly from the normal patterns. For instance, consider
    an online retail platform where users create accounts, browse products, and make
    purchases. Node anomaly detection could be applied to pinpoint users who display
    unusual purchasing behavior, such as excessively high-frequency transactions,
    unusually large shopping cart sizes, or sudden changes in purchasing habits. Detecting
    these anomalies is essential for flagging potentially fraudulent activities and
    ensuring a secure and trustworthy online shopping experience for genuine users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other real-world examples of node clustering tasks include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network intrusion detection** : In a computer network, identifying nodes
    (computers or devices) that exhibit unusual communication patterns, such as a
    sudden increase in data transfers or suspicious access attempts, helps in detecting
    potential security threats or intrusions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telecommunication networks** : Nodes in a telecommunication network can be
    mobile devices or communication towers. Anomaly detection can help identify abnormal
    call patterns, unexpected roaming behavior, or sudden spikes in network traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Financial fraud detection** : In financial transaction networks, anomaly
    detection can identify unusual patterns that may indicate fraudulent activities,
    such as money laundering or insider trading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cybersecurity** : Identifying compromised user accounts or devices in a network
    by detecting unusual access patterns or data transfer behaviors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s dive into edge learning – the nexus that links nodes and defines
    relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Edge-level learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Edge-level** **learning** is a branch of graph ML that focuses on predicting
    the properties or labels of the edges in a graph, based on the features of the
    nodes and edges, and the structure of the graph. Edge-level graph learning can
    be useful for tasks such as link prediction, recommendation systems, fraud detection,
    and social network analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Link prediction** refers to the problem of predicting missing or future edges/links
    in a graph or network. Given a snapshot of a network, the goal is to estimate
    the likelihood of an edge forming between two nodes based on the existing graph
    structure and node attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: In an e-commerce graph, link prediction can be used to predict new edges between
    users and products that represent potential future purchases. Specifically, we
    can predict which products a user may be interested in purchasing, based on their
    previous interactions as well as similar users’ purchase patterns.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Link prediction for e-commerce user-item recommendation](img/B22118_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Link prediction for e-commerce user-item recommendation
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2* *.4* , we see that given graph data for **user-item interaction**
    , we can use link prediction task to identify if suggesting a particular product
    to a particular customer will lead to conversion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some real-world applications for link prediction include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommendation systems** : Link prediction can be used to recommend products,
    services, or content to users based on their preferences, behavior, or feedback.
    For example, in a movie streaming service, where *nodes* represent users and movies,
    and *edges* represent explicit/implicit ratings, link prediction can be used to
    estimate the rating that a customer would give to a movie they haven’t streamed
    yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social network analysis** : Link prediction can be used to analyze the structure
    and dynamics of social networks, such as finding communities, influencers, or
    potential friends. For example, in a social network graph, where *nodes* represent
    users and *edges* represent friendships or interactions, link prediction can be
    used to predict the strength or intimacy of the relationship between two users,
    or the probability that two users would connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s explore the distinctions between link prediction and edge classification
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Edge classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Edge classification** is the task of predicting a discrete label for each
    edge in a graph, such as the type, category, or status of the edge. For example,
    in an e-commerce graph, where *nodes* represent products and customers and *edges*
    represent transactions or ratings, edge classification can be used to classify
    the type of relationship represented by each edge as either casual browsing, serious
    interest, or purchase intent. This will allow us to understand user behavior and
    intent better.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Edge classification for e-commerce session intent](img/B22118_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Edge classification for e-commerce session intent
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2* *.5* , the utilization of edge classification is illustrated,
    demonstrating how users can be categorized into different segments according to
    their purchase history.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some real-world examples of edge classification are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Publication citation** : In a publication citation network, where *nodes*
    represent papers and *edges* represent citations, edge classification can be used
    to classify the edges as positive or negative, indicating the sentiment or tone
    of the citation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social network** : In a social network, edge classification can be used to
    classify the edges as strong or weak, indicating the strength or intimacy of the
    relationship between the users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to nodes, regression can also be performed on graph edges.
  prefs: []
  type: TYPE_NORMAL
- en: Edge regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Edge regression** is the task of predicting a continuous value for edges
    in a graph, such as the weight, strength, or similarity of the edge. In the e-commerce
    case, edge regression can be used to estimate the amount of time a customer will
    spend before making a purchase decision for a particular product based on historical
    interactions of users with various similar items, along with other user and item
    features.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Edge regression for predicting time between discovery and purchase](img/B22118_02_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Edge regression for predicting time between discovery and purchase
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* *.6* demonstrates how we can use edge regression to predict continuous
    labels, such as time spent on a particular product.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some real-world examples of edge regression include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Predicting traffic flow between locations** : In a road network graph, edge
    regression can predict the traffic volume between two locations based on historic
    flows and connectivity patterns. This can assist in traffic optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Predicting product co-purchase rates** : In an e-commerce graph, edge regression
    can forecast how frequently two products might be bought together in the future
    based on past co-purchase data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge learning extends beyond supervised techniques; it can also be applied to
    unsupervised learning approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Edge clustering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the task of grouping the edges in a graph into clusters based on their
    features or labels, such that the edges within a cluster are more similar to each
    other than to the edges in other clusters. For example, in the e-commerce graph,
    **edge clustering** can be used to identify groups of edges that share common
    patterns, such as frequent or high-value purchases.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Clustering purchases based on transaction value](img/B22118_02_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Clustering purchases based on transaction value
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* *.7* shows how we can cluster edges based on transaction values
    to put near-similar transactions in the same bucket.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other applications of edge clustering are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clustering financial transactions between accounts** : Edge clustering can
    group similar types of monetary transfers or flows between accounts, helping identify
    suspicious patterns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clustering hyperlinks between web pages** : Edge clustering can categorize
    hyperlinks between web pages into groups such as navigational links, commercial
    links, affiliated links, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to nodes, we can have outlier edges that we might need to detect.
  prefs: []
  type: TYPE_NORMAL
- en: Edge outlier detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Edge outlier detection** is the task of identifying the edges in a graph
    that deviate significantly from the normal patterns in the graph, such as the
    edges that have unusual features, labels, or connections. In an e-commerce graph,
    edge outlier detection can be used to detect anomalies, such as fraudulent transactions
    and fake reviews. The following list contains some applications for edge-level
    outlier detection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some applications of edge outlier detection include the following :'
  prefs: []
  type: TYPE_NORMAL
- en: '**Detecting fraudulent fund transfers** : In a banking transaction graph, identifying
    anomalous high-value transfers between unrelated accounts as outliers can reveal
    potential fraud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detecting unauthorized network access** : In an enterprise network graph,
    edge outliers may represent rare connections between devices that indicate malicious
    actors or compromised devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detecting stock market manipulation** : In a stock trading network, outlier
    edges between accounts may reveal patterns of illegal trade collusion or pump-and-dump
    schemes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we delve into the intricacies of edge learning in the preceding section,
    it becomes evident that its applications extend beyond conventional boundaries.
    Next, let’s progress to the uppermost layer in the learning space, focusing on
    learning at the graph level.
  prefs: []
  type: TYPE_NORMAL
- en: Graph-level learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Graph-level learning** refers to ML tasks and techniques that operate at
    the level of entire graphs rather than individual nodes or edges within a graph.
    Graph-level learning focuses on generating predictions, classifications, or insights
    based on the entire graph or a subgraph structure.'
  prefs: []
  type: TYPE_NORMAL
- en: Graph-level prediction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal here is to make predictions or classifications for the entire graph
    rather than individual nodes or edges. For example, given a time-specific user-item
    interaction graph for e-commerce, we can predict any special events, or patterns
    in general, based on graph-level learning. In urban planning and transportation
    management, **graph-level prediction** can be employed to forecast traffic flow
    across an entire road network. This can enable the optimization of traffic signal
    timings, route planning, and infrastructure development.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Event prediction based on a snapshot of an e-commerce graph](img/B22118_02_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Event prediction based on a snapshot of an e-commerce graph
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* *.8* shows how we can use the entire graph to make certain predictions
    at the graph Level.'
  prefs: []
  type: TYPE_NORMAL
- en: Graph-level representations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learning **graph-level representations** involves capturing essential features
    and characteristics of the entire graph. Techniques such as **graph neural networks**
    ( **GNNs** ) are employed to aggregate information from individual nodes and edges
    to create a numerical representation of the entire graph.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Representing a graph with a vector of floats](img/B22118_02_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Representing a graph with a vector of floats
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* *.9* shows how we can use modern deep learning techniques to represent
    the entire graph as an embedding vector. These representations can further be
    used to build models for downstream tasks such as **regression** , **classification,**
    or **clustering** .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take one sample use case of social network analysis for product recommendation
    through the entire pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data collection and graph construction** : Collect user data ( *nodes* )
    and their interactions ( *edges* ) from a social network platform. Construct a
    graph where users are nodes and friendships or interactions are edges. Include
    user attributes (age, interests) as node features and interaction types as edge
    features.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**GNN model** : Choose a GNN architecture (e.g., a **graph convolutional network**
    ( **GCN** ) or **GraphSAGE** ). Define the number of GNN layers and their dimensions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Node-level representation learning** : For each node, aggregate information
    from its neighbors using the GNN. This process creates a learned embedding for
    each user that captures both their attributes and network structure.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Graph-level representation** : Use a readout function (e.g., sum, mean, or
    max pooling) to aggregate node embeddings. This step produces a single vector
    representing the entire graph.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Training process** : Define a task-specific loss function (e.g., binary cross-entropy
    for product recommendation). Use backpropagation to update GNN parameters, optimizing
    for the graph-level task.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Graph embedding output** : The trained model now outputs a fixed-size vector
    (e.g., 128 dimensions) for any input graph. This vector captures the global properties
    of the social network.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Downstream task – product recommendation** : Use the graph embedding as input
    to a classifier that predicts whether a product will be popular in the network.
    Train this classifier on historical data of product successes and failures.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deployment and inference** : For a new product, generate the current social
    network graph embedding. Feed this embedding into the trained classifier to predict
    the product’s potential popularity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we have seen, graph-level learning is crucial in various applications such
    as bioinformatics, social network analysis, chemistry, and recommendation systems.
    Techniques used in graph-level learning often leverage the hierarchical and relational
    nature of graphs to capture complex dependencies and make predictions at a higher
    level of abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Node-, edge-, and graph-level learning](img/B22118_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Node-, edge-, and graph-level learning
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* *.10* consolidates all three learning levels— *node* , *edge* ,
    and *graph* —onto the same canvas. This illustrates how graph learning operates
    across the different levels. Each level represents a distinct aspect of the data
    within the graph structure, with specific applications at each level.'
  prefs: []
  type: TYPE_NORMAL
- en: Real-world applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore some areas where graph learning is actively
    being applied.
  prefs: []
  type: TYPE_NORMAL
- en: Recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graph learning has emerged as a powerful tool in the field of recommendation
    systems, enhancing their capabilities and effectiveness. Recommendation systems
    aim to predict user preferences and provide personalized suggestions, and graph
    learning leverages the inherent relational structure of data to achieve this more
    efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – User-item link prediction for recommendation](img/B22118_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – User-item link prediction for recommendation
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* *.11* shows how we can translate a user-item affinity task for an
    e-commerce recommendation to a link prediction problem. This task is an example
    of one area, among others, in recommendation systems where graph learning can
    play a significant role.'
  prefs: []
  type: TYPE_NORMAL
- en: User-item graph representation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graph learning enables the representation of users and items as nodes in a graph,
    with edges indicating interactions or relationships between them. This representation
    captures the complex dependencies and connections in user-item interactions, allowing
    for a more nuanced understanding of user preferences.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in a social network, users and posts can be represented as *nodes*
    in a graph, where *edges* indicate interactions, such as likes, comments, or shares.
    Graph learning can then capture the relationships between users and posts for
    personalized content recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Implicit and explicit feedback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recommendation systems often deal with both implicit and explicit feedback.
    Graph learning can effectively model implicit feedback, such as clicks, views,
    and dwell time, by incorporating the graph structure to capture the relationships
    between users and items. This helps in making accurate predictions even when explicit
    feedback is sparse.
  prefs: []
  type: TYPE_NORMAL
- en: Neighborhood-based recommendations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graph-based recommendation systems leverage the concept of **neighborhood-based
    learning** . By analyzing the local structure around a user or an item in the
    graph, these systems can recommend items that are similar to those already interacted
    with or liked by the user or other similar users.
  prefs: []
  type: TYPE_NORMAL
- en: Consider an example of a movie recommendation system. A user’s preferences can
    be inferred by analyzing the movies liked or watched by users in their neighborhood
    (users with similar tastes). Graph learning identifies these local structures
    to suggest movies.
  prefs: []
  type: TYPE_NORMAL
- en: Heterogeneous graphs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In real-world scenarios, recommendation systems often deal with heterogeneous
    information, including users, items, and various interactions. Graph learning
    can handle **heterogeneous graphs** , where nodes represent different types of
    entities, allowing for more comprehensive modeling of relationships and preferences.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in a scholarly paper recommendation system, nodes could represent
    authors, papers, conferences, and keywords. Heterogeneous graph learning captures
    relationships between these entities, allowing for personalized recommendations
    based on the user’s research interests.
  prefs: []
  type: TYPE_NORMAL
- en: Cold start problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **cold start problem** occurs when a new user or item has a limited interaction
    history, making it challenging to provide accurate recommendations. Graph learning
    can alleviate this issue by leveraging the graph structure to identify and recommend
    items based on similar users or items, gathering learnings from multi-level hops,
    even in the absence of direct interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Temporal dynamics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graph learning can be extended to capture **temporal dynamics** in recommendation
    systems. By incorporating time-stamped edges in the graph, the model can adapt
    to changing user preferences over time, improving the accuracy of recommendations
    for evolving user behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in a news recommendation system, a graph with articles and users
    can incorporate time-stamped edges. Graph learning can consider the evolution
    of user interests over time, ensuring that recent interactions have more influence
    on recommendations than older ones.
  prefs: []
  type: TYPE_NORMAL
- en: We will be exploring graph learning methods to solve various recommendation
    system problems in [*Chapter 9*](B22118_09.xhtml#_idTextAnchor156) .
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Knowledge graphs** are powerful representations of structured information
    that capture relationships and entities in a structured format. Graph learning
    can significantly enhance the capabilities of knowledge graphs, providing more
    nuanced insights, efficient querying, and improved reasoning.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Knowledge graph for e-commerce](img/B22118_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Knowledge graph for e-commerce
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at various aspects of knowledge graphs where graph learning
    can play a crucial role.
  prefs: []
  type: TYPE_NORMAL
- en: Entity and relationship embeddings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graph learning techniques, such as GNNs, can generate embeddings for entities
    and relationships in a knowledge graph. These embeddings capture the latent features
    of entities and relationships, enabling more effective representation and understanding
    of the underlying semantics. For example, in a medical knowledge graph, graph
    learning models can generate embeddings for diseases, symptoms, and treatments.
    The model captures latent features, enabling a more nuanced understanding of relationships,
    such as the association between specific symptoms and diseases.
  prefs: []
  type: TYPE_NORMAL
- en: Link prediction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graph learning is instrumental in link prediction tasks within knowledge graphs.
    By analyzing the existing structure, graph-based models can predict missing relationships
    between entities, helping to complete the graph and discover implicit connections.
  prefs: []
  type: TYPE_NORMAL
- en: Consider an example of a scientific knowledge graph representing academic collaborations.
    Graph learning predicts missing links by identifying potential collaborations
    between researchers who have not previously collaborated but share common research
    interests.
  prefs: []
  type: TYPE_NORMAL
- en: Semantic similarity and entity resolution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graph learning can help with determining semantic similarity between entities.
    By considering the graph structure, the model can identify related entities, facilitating
    tasks such as entity resolution, where different records referring to the same
    entity are linked together.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in a customer data knowledge graph for a retail company, graph
    learning can identify semantic similarity between customer profiles, aiding entity
    resolution by linking different records that refer to the same customer across
    multiple databases.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge graph completion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graph learning can help address incompleteness in knowledge graphs by predicting
    missing facts. This is particularly valuable for knowledge graphs in domains such
    as biology, medicine, and finance, where continuously evolving information may
    result in incomplete representations.
  prefs: []
  type: TYPE_NORMAL
- en: Ontology alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graph learning can facilitate **ontology alignment** by capturing the structural
    and semantic relationships between entities in different ontologies. This is crucial
    for integrating information from diverse sources and ensuring interoperability
    between knowledge graphs.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in a healthcare knowledge graph with multiple ontologies, graph
    learning can align the ontologies by recognizing relationships and similarities
    between entities, ensuring seamless integration of information from diverse medical
    sources.
  prefs: []
  type: TYPE_NORMAL
- en: Graph learning enriches the realm of knowledge graphs by providing sophisticated
    tools for representation learning, reasoning, and prediction. As the synergy between
    graph-based techniques and knowledge graphs continues to grow, we can anticipate
    increasingly robust and intelligent systems for organizing, querying, and extracting
    knowledge from complex, interconnected datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Some other applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s explore various other applications where graph learning is actively applied
    to address real-world problems.
  prefs: []
  type: TYPE_NORMAL
- en: Natural language processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Natural language processing** ( **NLP** ) encompasses several key applications
    where graph learning techniques can enhance language understanding and processing
    capabilities. Here are the main areas where graph-based approaches make significant
    contributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Semantic representation** : Capturing semantic relationships between words'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Named entity recognition (NER)** : Enhancing entity recognition accuracy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coreference resolution** : Improving resolution of references in text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency parsing** : Accurate parsing of sentence structures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sentiment analysis** : Nuanced sentiment analysis using graph connectivity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Question answering** : Retrieving answers based on semantic relationships'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dialogue systems** : Managing context in conversational **artificial intelligence**
    ( **AI** ) using graph structures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graph-based language models** : Integrating contextual information for better
    language understanding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cybersecurity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In cybersecurity, graph learning emerges as a formidable tool for analyzing
    complex networks of interconnected entities, such as devices and users. By leveraging
    graph-based models, cybersecurity experts can detect patterns, anomalies, and
    potential threats, fortifying digital defense mechanisms with a holistic and proactive
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'The major applications of graph learning in cybersecurity include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Anomaly detection** : Identifying unusual patterns in network traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat intelligence** : Integrating and analyzing threat intelligence data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attack graph analysis** : Modeling and analyzing potential attack paths'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User behavior analysis** : Detecting anomalous behavior based on user interactions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulnerability assessment** : Identifying and prioritizing system vulnerabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fraud detection** : Uncovering fraudulent activities through graph patterns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Graph learning helps with unveiling intricate patterns and relationships among
    users. By modeling social structures as graphs, this approach enables the extraction
    of valuable insights, facilitating several key applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Community detection** : Identifying cohesive groups in social network graphs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Influence prediction** : Predicting influence and information flow in networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommendation systems** : Enhancing personalized recommendations with graph
    data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fraud detection** : Uncovering fraudulent activities through social connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Opinion dynamics** : Analyzing how opinions and information spread in a network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User engagement prediction** : Predicting user engagement based on social
    interactions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These use cases demonstrate the versatility of graph learning across different
    domains, showcasing its applicability in addressing diverse challenges, enabling
    a deeper understanding of social dynamics, and optimizing processes for building
    intelligence over ever-evolving interconnected data of the modern world.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Graphs offer a robust framework for modeling interconnected real-world systems,
    wherein *nodes* represent entities and *edges* capture relationships. Node-level
    learning is geared toward predicting the attributes and behaviors of individual
    nodes, facilitating applications such as personalized recommendations. On the
    other hand, edge-level learning delves into analyzing relationships between entities,
    supporting tasks such as link prediction and anomaly detection. Meanwhile, graph-level
    learning provides a holistic perspective to comprehend the overall structure,
    identify communities, and forecast emerging patterns, proving valuable in applications
    such as urban planning.
  prefs: []
  type: TYPE_NORMAL
- en: The real-world implementations of graph learning are evident in recommender
    systems, where it enhances capabilities such as neighbor-based suggestions, addresses
    implicit feedback, and tackles cold start problems. Additionally, knowledge graphs
    utilize graph learning techniques to generate entity and relationship embeddings,
    predict missing links, align ontologies, and complete missing information. Beyond
    recommender systems and knowledge graphs, graph learning extends its reach to
    diverse domains, including NLP, cybersecurity, social network analysis, and bioinformatics,
    to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll delve further into the concept of graph representation
    learning, which aims to encode graph structures into low-dimensional vectors that
    are leveraged by various ML tasks.
  prefs: []
  type: TYPE_NORMAL
