["```py\npip3 install --upgrade pip\npip3 install jupyter\n\n```", "```py\nconda install -c r r-essentials\n\n```", "```py\nconda create -n new-env -c r r-essentials\n\n```", "```py\nchooseCRANmirror(ind=55) # choose mirror for installation\ninstall.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ',\n'devtools'), dependencies=TRUE)\n\n```", "```py\nlibrary(devtools)\nlibrary(methods)\noptions(repos=c(CRAN='https://cran.rstudio.com'))\ndevtools::install_github('IRkernel/IRkernel')\n\n```", "```py\nlibrary(IRkernel)\nIRkernel::installspec(name = 'ir32', displayname = 'R 3.2')\n\n```", "```py\njupyter notebook\n\n```", "```py\ndata <- data.frame(\"height\" = c(131, 154, 120, 166, 108, 115,\n158, 144, 131, 112), \n\"weight\" = c(54, 70, 47, 79, 36, 48, 65,\n63, 54, 40))\n\n```", "```py\nlm_model <- lm(weight ~ height, data)\n\n```", "```py\nplot(data, col = \"red\", main = \"Relationship between height and\nweight\",cex = 1.7, pch = 1, xlab = \"Height in cms\", ylab = \"Weight\nin kgs\")\nabline(lm(weight ~ height, data))\n\n```", "```py\ndata(iris)\nhead(iris)\nSepal.Length Sepal.Width Petal.Length Petal.Width Species\n1 5.1 3.5 1.4 0.2 setosa\n2 4.9 3.0 1.4 0.2 setosa\n3 4.7 3.2 1.3 0.2 setosa\n4 4.6 3.1 1.5 0.2 setosa\n5 5.0 3.6 1.4 0.2 setosa\n6 5.4 3.9 1.7 0.4 setosa\n\n```", "```py\nlibrary(ggplot2)\nlibrary(gridExtra)\nplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color =\nSpecies)) \n  geom_point(size = 2) \n  ggtitle(\"Variation by Sepal features\")\nplot2 <- ggplot(iris, aes(Petal.Length, Petal.Width, color =\n  Species)) \n   geom_point(size = 2) \n   ggtitle(\"Variation by Petal features\")\ngrid.arrange(plot1, plot2, ncol=2)\n\n```", "```py\nset.seed(1234567)\niris.cluster <- kmeans(iris[, c(\"Petal.Length\",\"Petal.Width\")],\n 3, nstart = 10)\niris.cluster$cluster <- as.factor(iris.cluster$cluster)\n\n```", "```py\n> table(cluster=iris.cluster$cluster,species= iris$Species)\nspecies\ncluster setosa versicolor virginica\n1 50 0 0\n2 0 48 4\n3 0 2 46\n\nggplot(iris, aes(Petal.Length, Petal.Width, color =\niris.cluster$cluster)) + geom_point() + ggtitle(\"Variation by\nClusters\")\n\n```", "```py\ninstall.packages(\"drat\", repos=\"https://cran.rstudio.com\")\ndrat:::addRepo(\"dmlc\")\ninstall.packages(\"mxnet\")\n\n```", "```py\nsudo apt-get update\nsudo apt-get install -y build-essential git libatlas-base-dev\nlibopencv-dev\ngit clone https://github.com/dmlc/mxnet.git ~/mxnet --recursive\ncd ~/mxnet\ncp make/config.mk .\necho \"USE_BLAS=openblas\" >>config.mk\nmake -j$(nproc)\n\n```", "```py\necho \"USE_CUDA=1\" >>config.mk\necho \"USE_CUDA_PATH=/usr/local/cuda\" >>config.mk\necho \"USE_CUDNN=1\" >>config.mk\n\n```", "```py\ndocker pull chstone/mxnet-gpu\n\n```", "```py\ndevtools::install_github(\"rstudio/tensorflow\")\n\n```", "```py\nSys.setenv(TENSORFLOW_PYTHON=\"/usr/bin/python\")\nlibrary(tensorflow)\n\n```", "```py\npip install tensorflow # Python 2.7 with no GPU support\npip3 install tensorflow # Python 3.x with no GPU support\npip install tensorflow-gpu # Python 2.7 with GPU support\npip3 install tensorflow-gpu # Python 3.x with GPU support\n\n```", "```py\ninstall.packages(\"h2o\", dependencies = T)\n\n```", "```py\nlibrary(h2o) \nlocalH2O = h2o.init()\n\n```", "```py\nlocalH2O = h2o.init(ip = \"localhost\", port = 54321, nthreads = -1) \n\n```", "```py\nFROM chstone/mxnet-gpu:latest\nMAINTAINER PKS Prakash <prakash5801>\n\n# Install dependencies\nRUN apt-get update && apt-get install -y\n python2.7 \n python-pip \n python-dev \n ipython \n ipython-notebook \n python-pip \n default-jre\n\n# Install pip and Jupyter notebook\nRUN pip install --upgrade pip && \n pip install jupyter\n\n# Add R to Jupyter kernel \nRUN Rscript -e \"install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ'), dependencies=TRUE, repos='https://cran.rstudio.com')\" && \n Rscript -e \"library(devtools); library(methods); options(repos=c(CRAN='https://cran.rstudio.com')); devtools::install_github('IRkernel/IRkernel')\" && \n Rscript -e \"library(IRkernel); IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')\" \n\n# Install H2O\nRUN Rscript -e \"install.packages('h2o', dependencies=TRUE, repos='http://cran.rstudio.com')\"\n\n# Install tensorflow fixing the proxy port\nRUN pip install tensorflow-gpu\nRUN Rscript -e \"library(devtools); devtools::install_github('rstudio/tensorflow')\"\n\n```", "```py\ndocker run -t \"TagName:FILENAME\"\n\n```", "```py\ndocker run -it -p 8888:8888 -p 54321:54321 <<IMAGE ID>>\n\n```"]