["```py\npip install pandas numpy statsmodels pmdarima seaborn\n```", "```py\nimport pandas as pd\ndata = pd.read_csv('path/to/data.csv',\n                   parse_dates=['Datetime'],\n                   index_col='Datetime')\nseries = data['Incoming Solar']\n```", "```py\nseries.plot(figsize=(12,6), title='Solar radiation time series')\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nseries_df = series.reset_index()\nplt.rcParams['figure.figsize'] = [12, 6]\nsns.set_theme(style='darkgrid')\nsns.lineplot(data=series_df, x='Datetime', y='Incoming Solar')\nplt.ylabel('Solar Radiation')\nplt.xlabel('')\nplt.title('Solar radiation time series')\nplt.show()\nplt.savefig('assets/time_series_plot.png')\n```", "```py\nseries_daily = series.resample('D').sum()\n```", "```py\nimport numpy as np\nimport pandas as pd\nn_sales = 1000\nstart = pd.Timestamp('2023-01-01 09:00')\nend = pd.Timestamp('2023-04-01')\nn_days = (end – start).days + 1\nirregular_series = pd.to_timedelta(np.random.rand(n_sales) * n_days,\n                                   unit='D') + start\n```", "```py\nts_sales = pd.Series(0, index=irregular_series)\ntot_sales = ts_sales.resample('D').count()\n```", "```py\nimport numpy as np\nsample_with_nan = series_daily.head(365 * 2).copy()\nsize_na=int(0.6 * len(sample_with_nan))\nidx = np.random.choice(a=range(len(sample_with_nan)),\n                       size=size_na,\n                       replace=False)\nsample_with_nan[idx] = np.nan\n```", "```py\naverage_value = sample_with_nan.mean()\nimp_mean = sample_with_nan.fillna(average_value)\n```", "```py\nimp_ffill = sample_with_nan.ffill()\n```", "```py\nimp_bfill = sample_with_nan.bfill()\n```", "```py\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nresult = seasonal_decompose(x=series_daily,\n                            model='additive',\n                            period=365)\n```", "```py\nresult.trend\nresult.seasonal\nresult.resid\n```", "```py\nfrom statsmodels.tsa.seasonal import STL\nresult = STL(endog=series_daily, period=365).fit()\n```", "```py\nfrom statsmodels.tsa.seasonal import MSTL\nresult = MSTL(endog=series_daily, periods=(7, 365)).fit()\n```", "```py\nfrom statsmodels.tsa.stattools import acf\nacf_scores = acf(x=series_daily, nlags=365)\n```", "```py\nfrom statsmodels.tsa.stattools import pacf\npacf_scores = pacf(x=series_daily, nlags=365)\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplot_acf(series_daily, lags=365)\nplot_pacf(series_daily, lags=365)\n```", "```py\nfrom pmdarima.arima import ndiffs\nndiffs(x=series_daily, test='adf')\n```", "```py\nseries_changes = series_daily.diff()\n```", "```py\nfrom pmdarima.arima import nsdiffs\nnsdiffs(x=series_changes, test='ch', m=365)\n```", "```py\nimport statsmodels.stats.api as sms\nfrom statsmodels.formula.api import ols\nseries_df = series_daily.reset_index(drop=True).reset_index()\nseries_df.columns = ['time', 'value']\nseries_df['time'] += 1\nolsr = ols('value ~ time', series_df).fit()\n_, pval_white, _, _ = sms.het_white(olsr.resid, olsr.model.exog)\n_, pval_bp, _, _ = sms.het_breuschpagan(olsr.resid, olsr.model.exog)\n```", "```py\nimport numpy as np\nclass LogTransformation:\n    @staticmethod\n    def transform(x):\n        xt = np.sign(x) * np.log(np.abs(x) + 1)\n        return xt\n    @staticmethod\n    def inverse_transform(xt):\n        x = np.sign(xt) * (np.exp(np.abs(xt)) - 1)\n        return x\n```", "```py\nseries_log = LogTransformation.transform(series_daily)\n```", "```py\nseries_transformed, lmbda = stats.boxcox(series_daily)\n```", "```py\nimport pandas as pd\ndata = pd.read_csv('path/to/multivariate_ts.csv',\n                   parse_dates=['datetime'],\n                   index_col='datetime')\n```", "```py\ndata_log = LogTransformation.transform(data)\nsample = data_log.tail(1000)\nmv_plot = sample.plot(figsize=(15, 8),\n                      title='Multivariate time series',\n                      xlabel='',\n                      ylabel='Value')\nmv_plot.legend(fancybox=True, framealpha=1)\n```", "```py\nstat_by_variable = {\n    'Incoming Solar': 'sum',\n    'Wind Dir': 'mean',\n    'Snow Depth': 'sum',\n    'Wind Speed': 'mean',\n    'Dewpoint': 'mean',\n    'Precipitation': 'sum',\n    'Vapor Pressure': 'mean',\n    'Relative Humidity': 'mean',\n    'Air Temp': 'max',\n}\ndata_daily = data.resample('D').agg(stat_by_variable)\n```", "```py\ncorr_matrix = data_daily.corr(method='pearson')\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.heatmap(data=corr_matrix,\n            cmap=sns.diverging_palette(230, 20, as_cmap=True),\n            xticklabels=data_daily.columns,\n            yticklabels=data_daily.columns,\n            center=0,\n            square=True,\n            linewidths=.5,\n            cbar_kws={\"shrink\": .5})\nplt.xticks(rotation=30)\n```"]