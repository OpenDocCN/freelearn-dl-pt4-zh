- en: Real Estate Value Prediction Using XGBoost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The real estate market is one of the most competitive markets when it comes
    to pricing. This tends to vary significantly based on a number of factors such
    as the location, age of the property, size, and so on. Therefore, it has become
    a modern-day challenge to accurately predict the prices of properties (especially
    those in the housing market) in order to make better investment decisions. This
    chapter will deal with precisely that.
  prefs: []
  type: TYPE_NORMAL
- en: 'After going through this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the King County Housing sales dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing exploratory analysis and visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting correlation between price and other features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predicting the price of a house
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the King County House sales dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can't build a model without a dataset.  We will download our data in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kaggle ([https://www.kaggle.com/](https://www.kaggle.com/)) is a platform for
    predictive modeling and analytics competitions in which statisticians and data
    miners compete to produce the best models for predicting and describing the datasets
    uploaded by companies and users. The King County House Sales dataset contains
    records of 21,613 houses sold in King County, New York between 1900 and 2015\.
    The dataset also contains 21 different variables such as location, zip code, number
    of bedrooms, area of the living space, and so on, for each house.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dataset can be accessed from the following website: [https://www.kaggle.com/harlfoxem/housesalesprediction](https://www.kaggle.com/harlfoxem/housesalesprediction). The
    dataset is from the public records of King County and is freely available to download
    and use in any analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you arrive at the website, you can click on the Download button, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1418843f-ea70-4805-aefe-4217157d8bf5.png)'
  prefs: []
  type: TYPE_IMG
- en: King County House Sales Dataset
  prefs: []
  type: TYPE_NORMAL
- en: One file named `kc_house_data.csv` appears from the zipped, downloaded file,
    `housesalesprediction.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file named `kc_house_data.csv` in the current working directory as
    this will be our dataset. This will be loaded into the IPython notebook for analysis
    and predictions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the necessary libraries for this chapter using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding step should result in an output, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8468bb02-a4f0-4cc7-9c35-e9c233a25314.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is always a good idea to check the current working directory and set it
    to the directory in which the dataset is stored. This is shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/754ec71d-52f6-46c5-bb2a-d1ca6df174c2.png)'
  prefs: []
  type: TYPE_IMG
- en: In our case, the folder named `Chapter 10` is set as the current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in the file is read into a Pandas dataframe named `dataframe` using
    the `read_csv()` function and the features/headers are listed out using the `list(dataframe)`
    command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9571e0c5-a17f-4c80-90c2-630c6758a39d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you may have noticed, the dataset contains 21 different variables such as
    id, date, price, bedrooms, bathrooms, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The libraries used as well as their functions in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Numpy`, which is used to wrangle data in the form of arrays as well as store
    lists of names in the form of arrays'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pandas`, which is used for all data wrangling and managing data in the form
    of dataframes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Seaborn`, which is a visualization library required for exploratory analysis
    and plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPL_Toolkits`, which contains a number of functions and dependencies required
    by `Matplotlib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions from the `Scikit Learn` library, which is the primary scientific and
    statistical library required in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also require some other libraries such as `XGBoost`, but those will
    be imported as required while building the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Further documentation about the different libraries can be found by visiting
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://scikit-learn.org/stable/modules/preprocessing.html](http://scikit-learn.org/stable/modules/preprocessing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html](http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://seaborn.pydata.org/](https://seaborn.pydata.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://matplotlib.org/mpl_toolkits/index.html](https://matplotlib.org/mpl_toolkits/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing exploratory analysis and visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In situations where the goal is to predict a variable such as `price`, it helps
    to visualize the data and figure out how the dependent variable is being influenced
    by other variables. The exploratory analysis gives a lot of insight which is not
    readily available by looking at the data. This section of the chapter will describe
    how to visualize and draw insights from big data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The head of the `dataframe` can be printed using the `dataframe.head()` function
    which produces an output, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/dfba4c24-6df3-4862-a8a5-0c532014e7b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, the tail of the `dataframe` can be printed using the `dataframe.tail()`
    function, which produces an output, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c040272b-9388-4ddf-8b32-30a2b49bf7a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `dataframe.describe()` function is used to obtain some basic statistics
    such as the maximum, minimum, and mean values under each column. This is illustrated
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/04e8fb16-fcee-4045-bc2d-50dc46404791.png)'
  prefs: []
  type: TYPE_IMG
- en: dataframe.describe() function output
  prefs: []
  type: TYPE_NORMAL
- en: As you can observe, the dataset has 21,613 records of houses sold between 1900
    and 2015.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On taking a closer look at the statistics, we realize that most houses sold
    have about three bedrooms on average. We can also see that the minimum number
    of bedrooms in a house is 0 and the largest house has 33 bedrooms and a living
    area of 13,540 square feet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s plot the count of bedrooms in the whole dataset to see how three bedroom
    houses stand compared to houses with two or one bedrooms. This is done using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also plot a pie chart of the same data using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s try to see the number of floors in houses that are sold most frequently
    in King County. This may be done by plotting a bar graph using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to have an idea of what locations have the highest number of
    houses sold. We can do this by using the `latitude` and `longitude` variables
    from the dataset, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also take a look at how the prices compare for houses with different
    numbers of bedrooms by executing the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A plot of the price of houses versus the number of bedrooms is obtained using
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, let''s see how the price compares to the living area of all the
    houses sold. This may be done by using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The condition of houses sold gives us some important information as well. Let''s
    plot this against the prices to get a better idea of the general trends. This
    is done using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see which zip codes have the most house sales in King County by using
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, plot the grade of each house versus the price to figure out the trends
    in house sales based on the grade given to each house using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The plot of bedroom counts must give an output, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d450a455-de95-4eef-944f-1e75086c0ca2.png)'
  prefs: []
  type: TYPE_IMG
- en: It is evident that three bedroom houses are sold the most, followed by four
    bedroom houses, then by two bedroom houses, and then surprisingly by five bedroom
    and six bedroom houses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The pie chart of the number of bedrooms gives an output that looks like the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79c623be-2806-4f2e-842a-7bc0bdeabad6.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that three bedroom houses account for roughly 50% of all houses
    sold in King County. It looks like about 25% are four bedroom houses and the remaining
    25% is made up of houses with two, five, six bedrooms, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On running the script for most houses sold categorized by the number of floors,
    we notice the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d8acf59-ea2b-4372-9f1e-f062b3178fd0.png)'
  prefs: []
  type: TYPE_IMG
- en: It is quite clear that single floor houses sell the most, followed by two-story
    houses. The count of houses with more than two stories is rather low, which is
    perhaps an indication of family sizes and the income of residents living in King
    County.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On inspecting the density of houses sold at different locations, we obtain
    an output, as shown in the following screenshots. It is pretty clear that some
    locations see a higher density of house sales compared to others:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d08cc1fa-e81d-48a6-8733-f771069b394e.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/0b39d95e-5e6a-4867-bfe2-ce6c557792dd.png)'
  prefs: []
  type: TYPE_IMG
- en: From the trends observed in the preceding figure, it is easy to notice how a
    greater number of houses are sold between latitudes -122.2 and -122.4\. Similarly,
    the density of houses sold between longitudes 47.5 and 47.8 is higher compared
    to other longitudes. This could perhaps be an indication of safer and better-living
    communities compared to the other communities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On plotting the prices of houses versus the number of bedrooms in the house,
    we realize that the trends regarding the number of bedrooms in a house are directly
    proportional to the price up to six bedrooms, and then it becomes inversely proportional,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/576a5f38-1fbf-4f2e-a3ff-2f6afa6231fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting the living area of each house against the price gives us an expected
    trend of increasing prices with the increasing size of the house. The most expensive
    house seems to have a living area of 12,000 square feet, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb22a794-38a7-444e-9160-571a9c969178.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On plotting the condition of houses versus price, we again notice an expected
    trend of increasing prices with higher condition ratings, as shown in the following
    screenshot. Interestingly, five bedroom prices have a lower mean price compared
    to four bedroom houses, which is possibly due to lesser buyers for such a big
    house:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff3ddb55-21ca-439f-9174-319c28610015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A plot of the Zipcode of the house versus price shows trends in the prices
    of houses in different zip codes. You may have noticed that certain zip codes,
    like the ones between 98100 and 98125, have a higher density of houses sold compared
    to other areas, while the prices of houses in zip codes like 98040 are higher
    than the average price, perhaps indicating a richer neighborhood, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9dc53dc8-bfaa-4ad3-a050-a6e44201c4c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A plot of the grade of the house versus price shows a consistent increase in
    price with increasing grade. There seems to be a clear linear relationship between
    the two, as observed in the output of the following screenshots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45feb4d4-cb57-4bb2-9347-4e3e161f9b48.png)![](img/6d2edae4-4a3f-4318-96c0-ee6037cdf158.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following links give a good explanation of why data visualization is so
    important before running any model on the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.slideshare.net/Centerline_Digital/the-importance-of-data-visualization](https://www.slideshare.net/Centerline_Digital/the-importance-of-data-visualization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://data-visualization.cioreview.com/cxoinsight/what-is-data-visualization-and-why-is-it-important-nid-11806-cid-163.html](https://data-visualization.cioreview.com/cxoinsight/what-is-data-visualization-and-why-is-it-important-nid-11806-cid-163.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.techchange.org/2015/05/19/data-visualization-analysis-international-development/](https://www.techchange.org/2015/05/19/data-visualization-analysis-international-development/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting correlation between price and other features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the initial exploratory analysis is done, we have a better idea of
    how the different variables are contributing to the price of each house. However,
    we have no idea of the importance of each variable when it comes to predicting
    prices. Since we have 21 variables, it becomes difficult to build models by incorporating
    all variables in one single model. Therefore, some variables may need to be discarded
    or neglected if they have lesser significance than other variables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Correlation coefficients are used in statistics to measure how strong the relationship
    is between two variables. In particular, Pearson''s correlation coefficient is
    the most commonly used coefficient while performing linear regression. The correlation
    coefficient usually takes on a value between -1 and +1:'
  prefs: []
  type: TYPE_NORMAL
- en: A correlation coefficient of 1 means that for every positive increase in one
    variable, there is a positive increase of a fixed proportion in the other. For
    example, shoe sizes go up in (almost) perfect correlation with foot length.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A correlation coefficient of -1 means that for every positive increase in one
    variable, there is a negative decrease of a fixed proportion in the other. For
    example, the amount of gas in a tank decreases in (almost) perfect correlation
    with acceleration or the gear mechanism (more gas is used up by traveling for
    longer periods in first gear compared to fourth gear).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zero means that for every increase, there isn't a positive or negative increase.
    The two just aren't related.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Begin by dropping the `id` and `date` features from the dataset using the following
    commands. We will not be using them in our predictions as the ID variables are
    all unique and have no values in our analysis while the dates require a different
    function to handle them correctly. This is left as an exercise for the reader
    to do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the dependent variable (house prices, in this case) into a new `dataframe`
    using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The correlation between price and every other variable can be manually found
    using the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides the preceding method, an easier way to find the correlation between
    one variable and all other variables (or columns) in a `dataframe` is done by
    using just one line in the following manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`x_df.corr().iloc[:,-19]`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The correlated variables may be plotted using the `seaborn` library and the
    following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After dropping the `id` and `date` variables, the new `dataframe`, which is
    named `x_df`, contains 19 variables or columns, as shown in the following screenshots.
    For the purposes of this book, only the first ten entries are printed out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5947e655-ab68-4eae-ae5e-ff998ebb810e.png)'
  prefs: []
  type: TYPE_IMG
- en: First 10 entries of output
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd5594a1-ba51-4ff7-8744-9372e4f8304c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On creating a new `dataframe` with only the dependent variable (price), you
    will see an output as follows. This new `dataframe` is named `y_df`. Again, only
    the first ten entries of the price column are printed for illustration purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a3545d84-7266-45ef-8c49-c41be9c5f646.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The correlation between price and other variables is shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e7e60e83-8105-406f-9785-a8ac48ce7b1f.png)'
  prefs: []
  type: TYPE_IMG
- en: You may have noticed that the `sqft_living` variable is most highly correlated
    with the price and has a correlation coefficient of 0.702035\. The next most highly
    correlated variable is `grade`, with a correlation coefficient of 0.667434 followed
    by `sqft_above`, which has a correlation coefficient of 0.605567\. `Zipcode` is
    the least correlated variable with price and has a correlation coefficient of
    -0.053202.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The correlation coefficients found using the simplified code gives the exact
    same values but also gives the correlation of price with itself, which turns out
    to be a value of 1.0000, as expected. This is illustrated in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a5d1ae99-b800-4cc2-aa7b-a92ea9c816c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The coefficients of correlation plotted using the `seaborn` library are presented
    in the following screenshots. Note that price is on the x-axis for each plot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b7fef6eb-566e-4c45-9d9f-188bac6b7f99.png)![](img/0fdb0e5e-5dae-41a8-9113-3c9d765b1f0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting of coefficients of correlation
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/776bc86b-758a-40da-b11d-39383026c764.png)![](img/0f000cb8-e2b8-444e-aca2-0b102b8167b4.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/b61392ab-2b70-4f1b-8eb6-58cc9cbd82bc.png)![](img/9bd74848-802a-4f92-b74d-82aafaeebb77.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/f0a57645-512a-4e2c-9ae8-a4b444e91017.png)![](img/3f55b2bf-0b18-4d52-b779-0e585dc8922b.png)![](img/becf6059-05a3-46a7-b0c4-2dee64fdc8ac.png)![](img/9eee10f5-0829-463f-a515-9dca39b6b5dc.png)![](img/4ebbfe26-13c3-4a11-8509-aaf80c8b9367.png)![](img/bda3931f-f6f9-464a-8f13-6e37c6384051.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/9b0249f3-bd5e-48eb-9072-b13bcedbc464.png)![](img/ad86e758-0970-49ae-8708-821caf02caa8.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/160aeefa-e74f-4429-bcf3-3b6916110947.png)![](img/6966a5ef-0441-4718-9145-f5e06680c4c5.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/d5d4c4e5-b53a-4f3b-bf6e-48b33e29713e.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following links give an excellent explanation of Pearson''s correlation
    coefficient and how it is manually calculated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Pearson_correlation_coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.statisticshowto.com/probability-and-statistics/correlation-coefficient-formula/](http://www.statisticshowto.com/probability-and-statistics/correlation-coefficient-formula/)'
  prefs: []
  type: TYPE_NORMAL
- en: Predicting the price of a house
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will deal with building a simple linear model to predict house
    prices using all the features in the current `dataframe`. We will then evaluate
    the model and try to improve the accuracy by using a more complex model in the
    latter half of the section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following links to understand how linear regression works and how
    to use the linear regression model in the Scikit Learn library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Linear_regression](https://en.wikipedia.org/wiki/Linear_regression)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.stat.yale.edu/Courses/1997-98/101/linreg.htm](http://www.stat.yale.edu/Courses/1997-98/101/linreg.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://newonlinecourses.science.psu.edu/stat501/node/251/](https://newonlinecourses.science.psu.edu/stat501/node/251/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://scikit-learn.org/stable/modules/linear_model.html](http://scikit-learn.org/stable/modules/linear_model.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Drop the `Price` column from the `x_df` dataframe and save it into a new `dataframe`
    named `x_df2` using the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare a variable named `reg` and equate it to the `LinearRegression()` function
    from the Scikit Learn library using the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Split the dataset into test and train using the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Fit the model over the training set using the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Print the coefficients generated from applying linear regression to the training
    and test sets by using the `reg.coef_` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the column of predictions generated by the model using the following
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the accuracy of the model using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The output after fitting the regression model to the training sets must look
    like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae9a4976-9769-413d-ac56-93fcc083c95e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `reg.coeff_` command generates 18 coefficients, one for each variable in
    the dataset, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6a35bbc-1717-4e16-85de-5c44ab3e0ac6.png)'
  prefs: []
  type: TYPE_IMG
- en: The coefficients of features/variables with the most positive values have a
    higher significance on price predictions when compared to the coefficients of
    features/variables which have negative values. This is the main importance of
    the regression coefficients.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On printing the predictions, you must see an output which is an array of values
    from 1 to 21,612, one value for each row in the dataset, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e892b589-6413-429f-b934-2ec14160be5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, on printing the accuracy of the model, we obtained an accuracy of
    70.37%, which is not bad for a linear model. This is illustrated in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/720263f1-805b-4f7a-8bba-6acdba8feb87.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The linear model does alright at its first attempt, but if we want our model
    to be more accurate, we will have to use a more complex model with some non-linearities
    in order to fit well to all the data points. XGBoost is the model we will be using
    in this section in order to try and improve the accuracy obtained through linear
    regression. This is done in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `XGBoost` library using the `import xgboost` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In case this produces an error, you will have to do a pip install of the library
    through the terminal. This can be done by opening up a new terminal window and
    issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, you must see an output which looks like the one shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b328511-f9b9-4f4c-9987-dca58bb592c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage, you will be prompted to enter your password. After homebrew
    is installed, you will see an output like the one shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c8777b2-e2b2-4e1b-b775-50723159d79c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, install Python using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`brew install python`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check your installation using the `brew doctor` command and follow homebrew's
    suggestions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once `Homebrew` is installed, do a pip install of XGBoost using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pip install xgboost`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once it finishes installing, you should be able to import XGBoost into the IPython
    environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once XGBoost is imported successfully into the Jupyter environment, you will
    be able to use the functions within the library to declare and store the model.
    This can be done in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare a variable named `new_model` to store the model and declare all its
    hyperparameters using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command must look like the one in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/423b4265-fb23-40d7-9e2c-4ccd656ac6b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Split the data into test and training sets and fit the new model to the split
    data using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, you will see an output like the one shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a94abfb7-7ec5-42a3-83a4-4193c2ece623.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, use the newly fitted model to predict the house prices and evaluate
    the new model using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'On executing the preceding commands, you must see an output like the one shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1be540f0-1845-4248-82ca-95fa0ffebf74.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the new model's accuracy is now 87.79 %, which is approximately
    88%. This is considered optimal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, the `number of estimators` is set to 750\. After experimenting
    between 100 to 1,000, it was determined that 750 estimators gave the most optimal
    accuracy. The `learning rate` is set to 0.09\. `Subsample rate` is set at 65%.
    `Max_depth` is set at 7\. There didn't seem to be too much influence of `max_depth`
    over the model's accuracy. However, the accuracy did show improvement in using
    slower learning rates. By experimenting with various hyperparameters, we were
    able to further improve accuracy to 89%.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Future steps involve one hot encoding variables such as bedrooms, bathrooms,
    floors, zipcodes, and so on, and normalizing all the variables before model fitting.
    Try to tune the hyperparameters such as learning rate, number of estimators in
    the XGBoost model, subsampling rates, and so on to see how they influence model
    accuracy. This is left as an exercise for the reader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, you may want to try and use cross-validation along with XGBoost in order
    to figure out the optimal number of trees in the model, which would further improve
    accuracy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another exercise that can be done is using different sizes of test and train
    datasets as well as incorporating the `date` variable during training. In our
    case, we have split it into a ratio of 80% training data and 20% test data. Try
    to increase the test set to 40% and see how the model accuracy changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following links to understand how to tune the hyperparameters in
    the XGBoost model as well as how to implement cross-validation with XGBoost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://xgboost.readthedocs.io/en/latest/python/index.html](https://xgboost.readthedocs.io/en/latest/python/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://xgboost.readthedocs.io/en/latest/get_started/](http://xgboost.readthedocs.io/en/latest/get_started/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.kaggle.com/cast42/xg-cv](https://www.kaggle.com/cast42/xg-cv)'
  prefs: []
  type: TYPE_NORMAL
