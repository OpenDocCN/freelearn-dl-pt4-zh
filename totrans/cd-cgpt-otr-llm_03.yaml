- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code Refactoring, Debugging, and Optimization: A Practical Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses on employing LLMs for code refactoring, debugging, and
    optimization. This also involves interpreting error messages and explaining unfamiliar
    code blocks and what errors might arise from them. LLMs can assist with refactoring
    code for maintainability and readability. LLMs can be trained to recognize recurring
    issues in code. By the end of the chapter, you will be able to use ChatGPT for
    pair programming to help them understand code, as well as what causes bugs and
    how to fix them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with error codes – debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining code with ChatGPT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you’ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to an LLM/chatbot such as GPT-4 or Gemini, both of which require logins.
    For GPT-4, you’d need an OpenAI account, and for Gemini, you’d need a Google account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Python IDE such as Spyder, IDLE, PyCharm, Eclipse, or Visual Studio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An online interpreter will not be good enough here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HTML interpreter, which can be found at [https://htmledit.squarefree.com/](https://htmledit.squarefree.com/)
    , [https://onecompiler.com/html](https://onecompiler.com/html) , or [https://www.w3schools.com/tryit/](https://www.w3schools.com/tryit/)
    , or a website editor such as Wix, GoDaddy, or One.com.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get the code in this book here: [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main/Chapter3](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main/Chapter3)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we’ll get into the meat of the chapter by looking at dealing with error
    codes that you’ll get when you try to run almost all of the scripts or bits of
    code you write or you get from an LLM. If it’s perfect the first time around,
    either it’s extremely simple or count yourself extremely lucky!
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with error codes – debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I said, you’ll seldom get a perfect bit of code. [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)
    had some, but those examples were really simple, just to get us started with the
    “Hello world” level code and get some rubber on the road.
  prefs: []
  type: TYPE_NORMAL
- en: So, you’ll have to either figure them out yourself by understanding all that
    is there, go to some forum, such as Stack Overflow, ask a skilled friend/colleague,
    or ask an AI such as Gemini or GPT-4 families.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s debug some code from [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051) .
    *Prompts 1-3* were fine, but *Prompt 4* needed work.
  prefs: []
  type: TYPE_NORMAL
- en: Prompt 4 debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Prompt 4* : **A script where to ask you to load bench then it will help you
    browse for the image finally** **displayed image.**'
  prefs: []
  type: TYPE_NORMAL
- en: Again, I said **bench** , so that didn’t make sense, but Gemini correctly interpreted
    what I wanted.
  prefs: []
  type: TYPE_NORMAL
- en: However, the code is not fully functional.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Don’t run this exact code as it doesn’t work; keep reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please forgive me, I’m trying to show that it’s not exact straight away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In *Figure 3* *.1* , we’ll see what happens when you request code libraries
    in a free, online, standard Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1: Requesting a code library in a free Python interpreter (unsuccessful)](img/B21009_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Requesting a code library in a free Python interpreter (unsuccessful)'
  prefs: []
  type: TYPE_NORMAL
- en: Does it work in Colab? See the result in *Figure 3* *.2* .
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2: Trying to load a code library in Colab (unsuccessful)](img/B21009_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Trying to load a code library in Colab (unsuccessful)'
  prefs: []
  type: TYPE_NORMAL
- en: It did give us extra information about the error than the regular interpreter,
    though.
  prefs: []
  type: TYPE_NORMAL
- en: Ask Bard/Gemini how to install the library.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As of early February 2024, [Bard.Google.com](https://Bard.Google.com) redirects
    to [Gemini.google.com](https://Gemini.google.com) .
  prefs: []
  type: TYPE_NORMAL
- en: Gemini tells us that we need an environment that has a GUI or a physical display
    connected to it, as it runs in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Gemini suggests Kaggle Notebooks but that is also a cloud-based environment.
  prefs: []
  type: TYPE_NORMAL
- en: So, we’ll have to run it on our local machine (home or work PC/Linux/Max), which
    requires installing an IDE if you’ve not done that before.
  prefs: []
  type: TYPE_NORMAL
- en: I run Anaconda, which has Spyder and Jupyter Notebook (and Pylab), so, let’s
    look at this code in there. I’ll also have to make sure I’ve installed **tkinter**
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some links to install code libraries in Anaconda: [https://docs.anaconda.com/free/working-with-conda/packages/install-packages/](https://docs.anaconda.com/free/working-with-conda/packages/install-packages/)
    or [https://francescolelli.info/python/install-anaconda-and-import-libraries-into-the-ide](https://francescolelli.info/python/install-anaconda-and-import-libraries-into-the-ide)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: You can use **conda** or **pip** . I use both.
  prefs: []
  type: TYPE_NORMAL
- en: 'Working in Spyder now, part of Anaconda, running it line-by-line, we have the
    following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line gives me the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, I go to Gemini and ask for help with that, giving the code to that line
    and the error message.
  prefs: []
  type: TYPE_NORMAL
- en: Gemini tells me I need to import the **Button** module from **tkinter** .
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the first line to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, that part works.
  prefs: []
  type: TYPE_NORMAL
- en: So, Gemini gave me pretty good code but missed importing **Button** from **tkinter**
    . However, it managed to correct itself once it got feedback from the error.
  prefs: []
  type: TYPE_NORMAL
- en: As the code is executed, these tiny little windows come up, as seen in *Figure
    3* *.3* .
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3: Boxes/windows asking for which image the user wants to load –
    these are outputs from the code given by Gemini, in response to Prompt 4](img/B21009_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Boxes/windows asking for which image the user wants to load – these
    are outputs from the code given by Gemini, in response to Prompt 4'
  prefs: []
  type: TYPE_NORMAL
- en: When I browse and attempt to load the image with the first little **Select Image**
    window, the output is just the file path to the image. Nothing new is displayed
    on either window.
  prefs: []
  type: TYPE_NORMAL
- en: The second time I run the code there is only one window and it just displays
    the file path again. Okay, at times like this, we need to go back to Gemini/the
    LLM to ask. Gemini says I need to import the **ImageTk** module, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the **select_image** function, change the code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That is new from below **if filename:** . This is Python, so make sure to get
    the indents right!
  prefs: []
  type: TYPE_NORMAL
- en: 'I need to install Pillow, according to Gemini:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it’s already installed. I need to restart the kernel. I need to use
    the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: But **Image** is unused. So, forget importing **Image** . The code still doesn’t
    load the image.
  prefs: []
  type: TYPE_NORMAL
- en: Gemini / the LLM gives loads of advice to try to troubleshoot this issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'I eventually found a basic image loading code, with a hardcoded file path and
    name, on Stack Overflow and asked Gemini to add a button to browse for an image.
    This worked ( *Stackoverflow_image_loading* ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The final code from Stack Overflow and Gemini is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is Gemini’s explanation for what it did to the Stack Overflow code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note on coding with Gemini
  prefs: []
  type: TYPE_NORMAL
- en: It helps to tell the LLM the version of Python you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at the code from *Prompt 5* in [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Prompt 5 debugging – HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Don’t run this exact code, right here, it doesn’t work, keep reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original code from Gemini (formerly Bard) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That’s a heavy reliance on **if** , **else** , and **elif** statements!
  prefs: []
  type: TYPE_NORMAL
- en: 'This didn’t work and gave us the outcome seen in *Figure 3* *.4* : the interface
    for the calculator, reproduced from [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4: Interface for a calculator generated with Gemini (this is also
    Figure 2.9)](img/B21009_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Interface for a calculator generated with Gemini (this is also
    Figure 2.9)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3* *.5* shows the output of the calculator from *Prompt 5* .'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5: Output from the calculator generated by the Prompt 5 HTML code](img/B21009_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Output from the calculator generated by the Prompt 5 HTML code'
  prefs: []
  type: TYPE_NORMAL
- en: 'I asked Gemini and it gave me new code with this new prompt: **Please correct
    this html code to convert temperatures between C and F** . This doesn’t work –
    it crashes when I try to get the calculation and it said:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, Gemini gave me this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is the final code and works in HTML environments.
  prefs: []
  type: TYPE_NORMAL
- en: This code gave me a rounding error though; watch out for those and test for
    them, as you can see in *Figure 3* *.6* .
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6: The simple GUI calculator works okay but there’s a precision
    limit at 16 decimal places](img/B21009_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: The simple GUI calculator works okay but there’s a precision limit
    at 16 decimal places'
  prefs: []
  type: TYPE_NORMAL
- en: Prompt 5 debugging – Python/Flask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Don’t run this exact code as it doesn’t work; keep reading. Please forgive me,
    I’m trying to show that it’s not exact straight away.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original code from Gemini (formerly Bard) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'I put this into Spyder and it gave me error messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Gemini said it could be a syntax error, a file path for the HTML. I should have
    saved the HTML section of the code Gemini gave me, in a file called **calc.html**
    , so this Flask app could load it. That wasn’t obvious from the Gemini responses.
  prefs: []
  type: TYPE_NORMAL
- en: I put the HTML into a file in the same folder, a file called **calc.html** ,
    and ran the Flask code again in Spyder. That didn’t work.
  prefs: []
  type: TYPE_NORMAL
- en: 'I gave the output, including the errors and the full traceback. I got the full
    traceback by using **%tb** . Gemini had many suggestions: Spyder’s watchdog feature,
    a template reloading issue, IDE-specific conflicts, code-related errors, or testing
    outside Spyder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I used a very similar prompt for Claude 3 Sonnet: **Please get this code working,
    it should be a Flask implementation of code for a web page that will display a
    graphical user interface. A calculator that actually functions if you click**
    **the buttons.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Claude 3 Sonnet gave me this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To run this code, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Save the Flask code as **app.py** in a simple, short file path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **templates** folder and save the HTML code as **index.html** inside
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the Flask app with **python app.py** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your browser and navigate to **http://localhost:5000** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see a functional calculator GUI on the web page. When you click
    the buttons, the corresponding values will be appended to the display input field.
    Clicking the **=** button will evaluate the expression and display the result.
    The **C** button clears the display.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Note that this implementation uses the **eval** function in JavaScript to evaluate
    the expression, which can be a security risk if you’re accepting user input directly.
    In a production environment, you should use a safer method or a dedicated library
    for expression evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: This code ran, then kept crashing until I told Claude 3 Sonnet my file path.
    Claude suggested that the file path was too long and complicated. So, I moved
    it to a much simpler path, the **C:/Users/username/code/** folder, but I had to
    change the slashes to forward slashes, the same as here, not backslashes as in
    Windows Explorer (the folders program).
  prefs: []
  type: TYPE_NORMAL
- en: It stopped crashing and, with a little bit more checking file paths and that
    I was in the correct directory as well as asking Claude again, it launched in
    the browser at **http://127.0.0.1:5000/** .
  prefs: []
  type: TYPE_NORMAL
- en: So, Claude 3 got the job done.
  prefs: []
  type: TYPE_NORMAL
- en: LLMs, such as Claude 3 Sonnet, can be used for more than debugging code; they
    can also refactor code, so, let’s look into that next.
  prefs: []
  type: TYPE_NORMAL
- en: Running that Flask and HTML code gives the good-looking, simple GUI calculator
    seen in *Figure 3* *.7* . It works nicely the first time. Claude is a better coder
    than Gemini 1 Ultra, which is a better coder than ChatGPT (GPT 3.5). Also, these
    are all free tools! You don’t currently (October 2024) have to pay for any of
    them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7: The GUI Flask and HTML calculator app running in a Chrome browser,
    coded entirely by Claude 3 Sonnet](img/B21009_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: The GUI Flask and HTML calculator app running in a Chrome browser,
    coded entirely by Claude 3 Sonnet'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to use *Ctrl* + *C* or *command* + *c* to quit that application
    when you’ve finished.
  prefs: []
  type: TYPE_NORMAL
- en: While writing this chapter, Devin, the software engineer AI agent, has been
    released by Anthropic. You can request access but it’s not open like the other
    chatbots/AI coders at this point ( October 2024).
  prefs: []
  type: TYPE_NORMAL
- en: Why don’t you have a go at asking a chatbot LLM to give you some code and see
    how well it works and how well the LLM debugs?
  prefs: []
  type: TYPE_NORMAL
- en: Where’s the code?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the [*Chapter 3*](B21009_03.xhtml#_idTextAnchor073) code is shared
    with [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051) , so is in the same part
    of the GitHub repository: [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter2](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter2)
    , but there is a [*Chapter 3*](B21009_03.xhtml#_idTextAnchor073) section for the
    refactored code: [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-
    O ther-LLMs/tree/main/Chapter3](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter3)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does it mean to refactor code?
  prefs: []
  type: TYPE_NORMAL
- en: '**Code refactoring** is changing the factoring without changing the functionality.
    This includes changing the code’s design, structure, or exact implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the factoring means changing the code, making it cleaner, easier to
    maintain, perform better, and not duplicate code. The trigger might be *code smells*
    . **Code smells** are redundant code, large functions, or classes, having to change
    code in a multitude of locations when you need to change one thing.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring is done by making many small changes to avoid creating new bugs
  prefs: []
  type: TYPE_NORMAL
- en: '[ *Wiki_refactoring, ChatGPT* ]. However, refactoring can involve major changes
    too.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get ChatGPT to make some purposefully bad code to compress time series
    data with discrete cosine transforms, DCT. **DCT** is the sort of compression
    used in the best and most widely used data compression algorithms. It is lossy
    compression, so the signal might be partially lost, not just the noise.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we should be able to get a variable level of compression: more compression
    means lower fidelity and lower compression means we are keeping more of the signal
    and noise.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the prompt used for bad code: **Can you please give me some python
    code that is badly written, some code for compressing timeseries data using discrete
    cosine transforms. This code should be an example of hard-to-maintain code, repeats,
    bad code smells, large classes or other things that are** **not idea.**'
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT didn’t seem able to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe this task is too hard. We can try Gemini next. Gemini had no problem producing
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of bad code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the problems with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: A large class ( **DCTData** ) is cumbersome and unnecessary when all its functionality
    can be achieved with functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data split is hardcoded, which is poor practice as this introduces bias.
    This should be (pseudo-) random ( **compress_timeseries** ).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repeated logic** : The **compute_dtc** function is called within **get_coefficients,**
    leading to redundant calculations. This violates the **don’t repeat yourself**
    ( **DRY** ) principle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error-prone usage** : The example usage assumes data length is divisible
    by 2, which can lead to errors if not true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unnecessary imports** : Importing **numpy** inside a function instead of
    at the beginning reduces readability and maintainability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how you can improve the code:'
  prefs: []
  type: TYPE_NORMAL
- en: Use functions instead of a large class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the logic of **compute_dct** and **get_coefficients** into a single
    function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a function to handle data splitting and coefficient truncation for reusability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve error handling in the usage example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import **numpy** at the beginning of the script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ *Gemini* ]'
  prefs: []
  type: TYPE_NORMAL
- en: This code is not good, so, let’s not run it. Thanks to Gemini for the example
    of bad code.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring code with Claude 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s get Claude 3 Sonnet to refactor this data compression code, as is
    probably the best available coder AI for now ( March 2024).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the prompt I used to refactor the DCT code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Please tell me some coding/computer programming best practices. Please use
    those principles to examine the following code for time series data compression
    with DCT and refactor this code to follow those best practices:** *<insert code*
    *from above>* .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the response from Claude 3 Sonnet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, here are some coding/computer programming best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DRY (Don’t Repeat Yourself): Avoid duplicating code. Instead, extract common
    logic into reusable functions or modules.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'KISS (Keep It Simple, Stupid): Simplicity should be a key goal in design. Avoid
    unnecessary complexity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Separation of Concerns: Divide code into distinct sections, each addressing
    a separate concern or responsibility.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modularity: Break code into smaller, reusable modules that can be combined
    and reused.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Readability: Write clean, readable code with meaningful variable and function
    names, proper formatting, and comments where necessary.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Encapsulation: Hide implementation details and expose a clean public interface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Single Responsibility Principle: Each class, function, or module should have
    a single, well-defined responsibility.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Dependency Inversion Principle: High-level modules should not depend on low-level
    modules. Both should depend on abstractions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'YAGNI (You Ain’t Gonna Need It): Avoid implementing features or functionality
    that might be needed in the future but are not currently required.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Testing: Write unit tests to ensure code correctness and maintainability.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s refactor the provided code to follow these best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Okay, that code looks a lot simpler. Does it work?
  prefs: []
  type: TYPE_NORMAL
- en: 'There was an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Claude produced this corrected code and said:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this led to another error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Reminder
  prefs: []
  type: TYPE_NORMAL
- en: It’s good to tell the LLM which version of Python (or whichever language) you
    are running.
  prefs: []
  type: TYPE_NORMAL
- en: Claude suggested that I had a faulty **numpy** installation. I needed to install
    **scipy** with the PowerShell or Terminal **pip install** **scipy** command.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a (non-final) working version of the **dct** compression code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Examining this code, it takes in the example data, **[1, 2, 3, 4, 5, 6, 7, 8]**
    , and compresses it to **[ 5. -2.2304425 0. -0.15851267 13. -2.2304425 0. -**
    **0.15851267]** .
  prefs: []
  type: TYPE_NORMAL
- en: You can get the chatbot to describe the output of the program.
  prefs: []
  type: TYPE_NORMAL
- en: The **compressed_data = compress_timeseries(data, 4)** line instructs to keep
    only 4 DCT coefficients. The first coefficient ( **5.0** ) represents the mean
    or DC component of the signal, while the remaining coefficients represent the
    various frequency components in decreasing order of importance.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to compress more, use fewer coefficients. If you want higher fidelity
    (a more faithful reproduction of the signal) ask for more than 4 DCT coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re unfamiliar or would like a refresher, check out DCT compression here:
    [https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/#data-compression](https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/#data-compression)
    [ *Mastny* ].'
  prefs: []
  type: TYPE_NORMAL
- en: I tested this code with some other data. With the same number repeated, **[2,2,2,2,2,2,2,2]**
    , the output was **[4. 0. 0. 0. 4. 0. 0. 0.]** , which means the DC is **4** .
    There are no frequency components, so there are lots of zeros. By keeping only
    the first two non-zero coefficients ( **4.0** and **4.0** ), you can reconstruct
    the original signal without any loss of information. You can choose to either
    remove the zeros entirely or compress with something such as run-length encoding,
    which makes repeats of the same number very compressed.
  prefs: []
  type: TYPE_NORMAL
- en: However, DCT is particularly effective at compressing signals that have a lot
    of redundancy or repetition, such as constant or slowly varying signals [ *Claude*
    *3* , *ChatGPT* ].
  prefs: []
  type: TYPE_NORMAL
- en: We’ll get into how to use LLMs to help you test your code in the section of
    this chapter called *Testing code* . There were other tests, too, which all produced
    results.
  prefs: []
  type: TYPE_NORMAL
- en: 'It turns out that Claude 3 made a bug, and I questioned Gemini 1 Pro about
    this and got a code modification from Gemini 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The final code with more varied, complex data is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces four numbers in one array and two sub-arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: These are the 2 coefficients, as **num_coefficients = 2** , and for 2 halves,
    thus 4 numbers. Setting the number of coefficients to **3** produces 2 sub-arrays
    of 3 numbers each.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to get some help from the LLMs with refactoring your
    code nicely, but you might not be able to understand someone else’s code or even
    whether it works well.
  prefs: []
  type: TYPE_NORMAL
- en: So, the next section is on documenting code.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, you’ll come across code that someone else (including an earlier version
    of you) has written and it’ll not make sense to you. You might have to go through
    each line and function and class, running it in your mind and testing each bit
    of code in an IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there is now another option: LLMs or chatbots. You can get one
    to be your personal code translator to clarify what is going on.'
  prefs: []
  type: TYPE_NORMAL
- en: You can put some code in the chat window and ask the bot to explain what it
    does. You will generally also get detailed explanations when the chatbots give
    you code.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get ChatGPT and to explain some code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Statistical tests are useful for statisticians and data scientists, so, let’s
    do some. Jason Brownlee can help here [ *Brownlee_17Stats* ]. What is a Shapiro-Wilk
    test?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some code in Python for this, from [https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/](https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/)
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: What does ChatGPT say about this?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is ChatGPT’s response:'
  prefs: []
  type: TYPE_NORMAL
- en: (I put it into a markdown interpreter to get it into a nice style, without the
    **around the headings** [ *Dillinger* ].)
  prefs: []
  type: TYPE_NORMAL
- en: 'Certainly! The provided code is an example of how to use the Shapiro-Wilk Normality
    Test in Python, specifically with the **scipy.stats** library. This statistical
    test is used to determine whether a given sample follows a Gaussian (normal) distribution.
    Here’s a breakdown of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a step-by-step explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importing the Shapiro-Wilk test function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This line imports the **shapiro** function from the **scipy.stats** module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Defining a sample dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This line creates a list named data containing a set of numerical values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Applying the Shapiro-Wilk test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This line applies the Shapiro-Wilk test to the dataset, and the results are
    stored in two variables: stat (the test statistic) and p ( the p-value).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Printing the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This line prints the test statistic and the p-value with three decimal places.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Interpreting the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Based on a significance level ( **0.05** is commonly used), this code prints
    whether the dataset is probably Gaussian or probably not Gaussian. If *p > 0.05*
    , we fail to reject the null hypothesis, suggesting the data is probably Gaussian.
    If *p <= 0.05* , we reject the null hypothesis, suggesting the data is probably
    not Gaussian.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is my review: ChatGPT (not GPT-4, but definitely use that instead) tells
    us what the test is for, how to import the relevant library and where it comes
    from, how to create example data and what type it is, about the statistics returned,
    about printing, and what each statistics result means. That’s really helpful!'
  prefs: []
  type: TYPE_NORMAL
- en: 'What could it do better? Maybe it could suggest other tests that might be able
    to do this, when to not use the test, and whether it might be able to critique
    the code. We can ask the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ChatGPT, when should I not use this** **statistical test?**'
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT lists six points and details that the test gets better with larger sample
    sizes, but there is a limit. It might also find significance where there isn’t
    any, on very large sample sizes. ChatGPT also mentions non-Gaussian distributions
    and sensitivity to outliers and uses other tests and actions to confirm that the
    data is to be normally distributed.
  prefs: []
  type: TYPE_NORMAL
- en: There are far more details, which I won’t get into here, for brevity, but I’m
    sure if you ask the AI for it, it’ll give you good information [ *ChatGPT* ].
  prefs: []
  type: TYPE_NORMAL
- en: 'We could also ask Gemini to critique the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Critique the code and give us some visualizations to help us understand the**
    **Shapiro-Wilk test.**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check how that compares with what Gemini says about the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is Gemini’s response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, this code performs the Shapiro-Wilk test to check if a given list of
    data points likely comes from a normal distribution (also called Gaussian distribution).
    Here’s a breakdown of what the code does:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importing the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This line imports the **shapiro** function from the **scipy.stats** library
    in Python. This function is used to perform the Shapiro-Wilk normality test.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Creating the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This line creates a list named **data** containing ten numerical values. This
    is the data you want to test for normality.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Performing the Shapiro-Wilk test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This line calls the **shapiro** function with the data list as an argument.
    The function returns two values:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stat** : This is the test statistic, a numerical value between 0 and 1. Higher
    values indicate a closer resemblance to a normal distribution.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p** : This is the p-value, which represents the probability of observing
    a test statistic as extreme or more extreme than the one obtained, assuming the
    data is actually normal. Lower p-values indicate stronger evidence against the
    normality assumption.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '4. Interpreting the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These lines print the test statistic and p-value with three decimal places and
    interpret the results based on a common significance level of 0.05.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the p-value is greater than 0.05, we fail to reject the null hypothesis,
    which means we cannot rule out the possibility that the data comes from a normal
    distribution. In this case, the code prints “ Probably Gaussian”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the p-value is less than or equal to 0.05, we reject the null hypothesis,
    indicating we have evidence to suggest the data is not likely from a normal distribution.
    In this case, the code prints “Probably not Gaussian”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to remember that the Shapiro-Wilk test is just one way to assess
    normality. Other tests and visual inspection of the data can also help determine
    the distribution of your data [ *Gemini* ].
  prefs: []
  type: TYPE_NORMAL
- en: '**My review** : I think this is a better explanation. Gemini gave more explanation
    here, especially on the p-value. It also suggested other methods such as visual
    inspection, so, I didn’t have to ask. Gemini is always very careful to warn you
    that the code it gives could be imperfect, which is a good thing to note.'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll ask the same question I asked ChatGPT anyway.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prompt** : **That was lovely and descriptive, please tell me when I should
    not use this** **statistical test.**'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, I’m polite to AI; you never know if/when they’re going to rise up and become
    our overlords while remembering how we treated them when they were our servants.
  prefs: []
  type: TYPE_NORMAL
- en: Gemini lists 5 points, including small sample sizes, considering other tests,
    non-normally distributed data with heavy tails or skew, when you care more about
    factors other than normality, such as relationships between variables, outliers,
    and interpreting the p-value in conjunction with other statistical evidence and
    domain knowledge [ *Gemini’s emphasis* ].
  prefs: []
  type: TYPE_NORMAL
- en: So, Gemini gives similar points, one fewer than ChatGPT, and is very cautious
    about p-values, as they are very often, routinely, misinterpreted and misrepresented
    by statistics test users. I’m rather satisfied with Gemini and ChatGPT’s responses.
    How about you?
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s get into testing code with these LLM chatbots.
  prefs: []
  type: TYPE_NORMAL
- en: Testing code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing code is vital.
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to know that it works for you and others. So, you need to have
    something like a **requitements.txt** file where you list all code libraries or
    “packages” that are needed, and their versions. Yes, this book is very Python-centric.
  prefs: []
  type: TYPE_NORMAL
- en: Always look at the full requirements!
  prefs: []
  type: TYPE_NORMAL
- en: How do you test code?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some options for testing your code. You should do at least the second,
    third, or fourth option, and always the fifth option.
  prefs: []
  type: TYPE_NORMAL
- en: Run the code yourself on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write and use test rigs to test every module/function and the whole code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get ChatGPT/Gemini to write some test rigs for you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get a virtual software company such as ChatDev to do it for you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll ultimately still need humans to test it all, until **artificial general
    intelligence** ( **AGI** ) is achieved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is debated, but the general idea of AGI is that AI is at least as intelligent
    and adaptable as an average human. Others say AGI is capable enough to do anything
    any human can do. Still, others say that AGI is the limit, as opposed to **artificial**
    **superintelligence** ( **ASI** ).
  prefs: []
  type: TYPE_NORMAL
- en: Write test rigs for code to test whether the inputs and outputs are the data
    types you expect them to be. This actually goes back to good planning. From the
    beginning of the software development, there should be a clear written plan that
    the organization has agreed upon to detail what the software should do. This is
    to ensure the code will satisfy the business side, the research side (if present),
    and the customers or end users.
  prefs: []
  type: TYPE_NORMAL
- en: You will likely need a **software development plan** ( **SDP** ), a product
    backlog, a **software design document** ( **SDD** ), or a **technical requirements**
    **document** ( **TRD** ).
  prefs: []
  type: TYPE_NORMAL
- en: However, this is a book on coding/programming with LLMs such as Gemini and ChatGPT,
    not on project management.
  prefs: []
  type: TYPE_NORMAL
- en: 'I asked ChatGPT and Gemini for advice for building code test rigs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Please, give me guidance on creating a test rig for my code,** **any code.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maybe give me** **some examples.**'
  prefs: []
  type: TYPE_NORMAL
- en: Although it’s rather vague, let’s see how the chatbots responded to even such
    a vague question.
  prefs: []
  type: TYPE_NORMAL
- en: 'ChatGPT gave me 11 steps and 1 example:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose a Testing Framework
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Organize Your Tests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write Unit Tests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Incorporate Test Cases (including edge cases)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Mocking for Dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write Integration Tests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automate Testing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle Test Data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Documentation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Coverage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regression Testing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Example for JavaScript/Node.js with Jest
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last one is an example that puts it all together.
  prefs: []
  type: TYPE_NORMAL
- en: 'I would normally use Python, but it’s nice to have some variety here, using
    JavaScript/Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Jest:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bash**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a simple function in **your_code.js** :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**javascript**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a test in **your_code.test.js** :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**javascript**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your tests:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bash**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For point 1, ChatGPT suggested some test frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a testing framework that suits your programming language. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python: unittest, pytest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScript/Node.js: Jest, Mocha, Jasmine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java: JUnit, TestNG'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'C#: NUnit, xUnit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It looks like my vague question was a beneficial thing, as the chatbot has given
    us a nice plan for testing any code. [ *ChatGPT* ]
  prefs: []
  type: TYPE_NORMAL
- en: I think there is more involved, but this is a nice start. Don’t rely entirely
    on chatbots for your information, especially one chatbot, made by one company.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gemini gave me an intro, a final reminder, only five points, and an example,
    this time Python code, using **unittest** :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Those five points were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define your testing goals
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a testing framework
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the testing environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design your test cases
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Structure your test cases
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the test environment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Executing the code under test
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Asserting the expected results
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cleaning up the test environment [ *Gemini* ]
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s not nearly as much as ChatGPT, so I shall award more points to it, fewer
    points to Gemini. However, Gemini did mention making it readable, mock data, and
    external dependencies, and ChatGPT didn’t mention cleaning up, scaling up, and
    maintaining the test rig as the code evolves. So, Gemini is not doing too badly
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more on unit testing, you can check out this guide: [https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters](https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters)
    . Or, you can check out this guide: [https://best-practice-and-impact.github.io/qa-of-code-guidance/testing_code.html](https://best-practice-and-impact.github.io/qa-of-code-guidance/testing_code.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s get into something that can involve all of these,
    and use ChatGPT to power a virtual software company.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual software companies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A virtual software company is a program where the members of a company are comprised
    of AI agents. So, the CEO, the **chief technology officer** ( **CTO** ), the **chief
    product officer** ( **CPO** ), coders, test engineers, project managers, and so
    on, are all AI agents.
  prefs: []
  type: TYPE_NORMAL
- en: Agents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is an AI agent? This is an increasingly important thing to learn about.
    AI agents are now available from OpenAI, along with AI assistants, but they’ve
    existed for a while. AI agents or **intelligent agents** ( **IAs** ) are things
    that exist in environments, have states (of being), and perform actions. Agents
    have sensors and actuators, which is how they can perceive their environments
    and perform actions. They also have some form of reasoning, even very simple switches,
    so they can decide what to do. Some IAs have learning abilities to help with achieving
    their goals. Once an agent performs an action, it checks its state and decides
    what action it needs t o take toward its goal.
  prefs: []
  type: TYPE_NORMAL
- en: An IA has an “objective function” that involves all of its goals.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, even a thermostat is an agent: it senses the temperature and if
    too cold, it heats, if warm enough, it stops heating. A self-driving car is an
    IA (and a robot).'
  prefs: []
  type: TYPE_NORMAL
- en: A human is an IA too. Each of us can sense our surroundings, take actions, then
    reassess our environment, and do this iteratively until a goal is reached or we
    get another goal.
  prefs: []
  type: TYPE_NORMAL
- en: Other IAs include companies (human ones), the state of a nation, and a biome
    (distinct regions with specific life and climate) [ *Wiki_Agent, ChatGPT* ].
  prefs: []
  type: TYPE_NORMAL
- en: An AI agent is one kind of AI. Other kinds of AI might summarize statistics
    for you (statistical AI models), reactive AI is rule-based and does not learn,
    batch processing systems process data offline (not in real time) and there is
    no ongoing interaction with the environment, and genetic and evolutionary algorithms
    are constrained brute force methods; they try many solutions, which are just numbers
    or strings of parameters to optimize a solution. They are not agents because they
    don’t interact in real-time with their environments, nor do they make decisions
    in real time [ *ChatGPT* ].
  prefs: []
  type: TYPE_NORMAL
- en: Relevance to virtual software companies?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Agents of the AI variety are complex and autonomous software entities that are
    useful for everyday tasks, including writing and sending emails, posting and commenting
    on social media, writing blogs, and yes, chatting and writing code.
  prefs: []
  type: TYPE_NORMAL
- en: ChatDev
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ChatDev** (not to be confused with *ChatDev IDE* ( [https://chatdev.toscl.com/introduce](https://chatdev.toscl.com/introduce)
    ), a tool for making agents and making a town simulation, using ChatGPT, Gemini,
    Bing Chat, Claude, QianWen, iFlytek Spark, and others) is a software, developed
    by **Open Lab for Big Model Base** ( **OpenBMB** ), held as a repository on GitHub,
    and it is populated by a host of AI agents, generative ones. There is a CEO, a
    CTO, a CPO, a **chief human resource officer** ( **CHRO** ), a programmer, an
    art designer / chief creative officer, a code reviewer, a software test engineer,
    and a counselor, and these interact with each other to interpret the user’s prompt
    and create a software solution from a single prompt. They have a long chat, and
    you can even see little cartoon images of them in the visualizer or you can see
    the basic text in the file called **"<Project_Name>_DefaultOrganization_<date
    as 14 numbers>.txt** ”, for example: **"BookBreezeVinceCopy_DefaultOrganization_20240226172640.txt"**
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the visualizer in your browser, go to the command line/PowerShell and
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You’ll be directed to a local address in your browser; close this with *Ctrl*
    + *C* .
  prefs: []
  type: TYPE_NORMAL
- en: In this chat, starting with the CEO, they take the user prompt and design, code,
    review, test, and document Python code for a software solution for you/the user.
    If you want to see the prompt sections for assigning roles to the agents, go to
    the **RoleConfig.json** file. Just open it with any text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'I found this video quite instructive: [https://youtu.be/yoAWsIfEzCw](https://youtu.be/yoAWsIfEzCw)
    [ *Berman,* *ChatDev, ChatDev_paper* ].'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to connect to OpenAI with an API key, therefore you’ll be charged.
    Don’t worry if you can afford a few dollars a month for a load of code production.
    It’s a lot cheaper than hiring a person or company of humans to do it. I spent
    $0.18 on 3 runs of ChatDev.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you ’ll get a much more down-graded service from a virtual software
    company versus humans, at least in 2024.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve tested ChatDev somewhat and found it to be extremely quick, extremely cheap,
    and good at making some simple programs.
  prefs: []
  type: TYPE_NORMAL
- en: However, it does often require debugging, but ChatGPT and Gemini can help.
  prefs: []
  type: TYPE_NORMAL
- en: "There is quite a library of example games, calculators, art programs, e-book\
    \ readers, and so on. See them here in the WareHouse: [https://github.com/OpenBMB/ChatDev/tree/main/WareH\
    \ ouse](https://github.com/OpenBMB/ChatDev/tree/main/WareH\uFEFFouse) ."
  prefs: []
  type: TYPE_NORMAL
- en: They give you something to work with and/or copy and they are some minor inspiration
    too. Any new apps ChatDev makes for you will be stored in the WareHouse folder.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to get the right version of Python, that is, 3.9 to 3.11, as I lost
    about 3 hours trying to install the requirements because I had a newer version
    of Python, and it caused conflicts with the packages/libraries. It was because
    the version of Python I had was too recent; the code from the GitHub repository
    required Python 3.11, but I had 3.12. This created conflicts as some packages
    wouldn’t work.
  prefs: []
  type: TYPE_NORMAL
- en: Every app should have a r **equirements.txt** file to make sure you have all
    the required packages. To run your new code, go to the relevant folder in WareHouse
    and run **main** in an IDE. There is a manual file in the app folder to give you
    more instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can generate your own requirements file with this command in the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: My app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I tried making an e-book reader, and it didn’t quite work. This e-book reader
    was supposed to open **.pdf** , **.epub** , **.mobi** , **.doc/docx** , and even
    Google Docs. I’m ambitious, okay? I copied the idea from *BookBreeze* (from the
    WareHouse), and beefed up the prompt to change colors and try to avoid an error
    I’d spotted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prompt given to ChatDev to develop an e-book reader is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Develop a simple e-book reader that allows users to read electronic books
    in various formats. the software should support basic formats such as pdf, epub,
    mobi as well as .doc and .docx and Google Docs files, and provide functionality
    for users to add and manage bookmarks within the e-books. To ensure a user-friendly
    experience, the e-book reader should be built using a modern gui library that
    provides intuitive navigation and interactive features. it is important to note
    that the software should not rely on any external assets, ensuring that all necessary
    resources are included within the application itself. The goal is to create a
    robust and self-contained e-book reader that can be run seamlessly on any compatible
    device or operating system. Make sure we don''t get this error: AttributeError:
    module ''PyPDF2'' has no attribute ''PdfReader''. Fully test this application
    so there are** **no errors.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter this prompt, you need to run ChatDev in the command line, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**description_of_your_idea** is the previous paragraph, and no square brackets,
    **[]** , are needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Generating code to load a Word ( **.docx** ) document was easier than the **.pdf**
    code. It opened my File Explorer app to browse for documents. Though, when I loaded
    a second .docx document the app did paste the documents’ text together, rather
    than clearing the space when a new document was loaded. My example application
    looks like what’s seen in *Figure 3* *.7* , which is an e-book reader. I chose
    the colors red for the background, black for the **Load file** button, and green
    for that button’s text, just to see what could be done, not because it looks good
    – it doesn’t.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8: Screenshot of the ebook reader I made with ChatDev](img/B21009_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Screenshot of the ebook reader I made with ChatDev'
  prefs: []
  type: TYPE_NORMAL
- en: It works well for **.docx** , but it stuck the text from the documents together.
    Here is the end of one document and the beginning of the next.
  prefs: []
  type: TYPE_NORMAL
- en: Next is a subsection on the debugging process.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging process for the app
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unfortunately, getting beyond the **module 'PyPDF2' has no attribute 'PdfReader'**
    error wasn’t easy, as Gemini and ChatGPT did not want to remove it or deal with
    it properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'I kept getting this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AttributeError: module ''PyPDF2'' has no** **attribute ''PdfReader''** .'
  prefs: []
  type: TYPE_NORMAL
- en: I had multiple rounds of asking ChatGPT and Gemini to correct the **main.py**
    and **ebook.py** scripts for me with some success, but not much on that error.
    If I ran ChatDev again to get a new code, I would get charged money. However,
    if I ask ChatGPT and or Gemini to correct the code directly, I don’t pay more
    than I already pay monthly ($ 0).
  prefs: []
  type: TYPE_NORMAL
- en: But ChatDev does have multiple stages and players (ChatGPT playing different
    parts), including documentation, testing, and reviewing.
  prefs: []
  type: TYPE_NORMAL
- en: I need to iterate here that you should take the app generated, pass it back
    to ChatDev, and get it to correct that code or add new features, colors, styles,
    images, audio, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'That PDF error again: Of course, I looked on Stack Overflow for some assistance,
    and it seems there could be a version conflict. Looking in the **requirements.txt**
    file, I see I need **PyPDF2==1.26.0** , and **pip show** tells me I’m running
    that version. So, that’s not the problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Long story short, the ChatDev code still needs some debugging. So, it’s useful
    for me to iterate that you should have human-AI collaboration. Does ChatDev allow
    human-AI collaboration?
  prefs: []
  type: TYPE_NORMAL
- en: Does ChatDev make available an iterative process between humans and the software,
    to debug, add features to, and otherwise improve the software it produces or is
    given? I asked Gemini about this.
  prefs: []
  type: TYPE_NORMAL
- en: Gemini said “...the ChatDev virtual software company, as of now, doesn’t directly
    offer an interactive environment or functionality for humans to collaborate with
    AI agents in an iterative coding process. It’s an ongoing research project exploring
    the possibility of such a future scenario.
  prefs: []
  type: TYPE_NORMAL
- en: However, the project offers valuable insights into the potential of LLMs for
    software development. It provides a glimpse into what future collaborations between
    humans and AI assistants might look like in this field.” [ *Gemini* ].
  prefs: []
  type: TYPE_NORMAL
- en: I’ve not been able to find any other virtual software companies or agents that
    generate full, tested, reviewed, well-designed code, especially not ones that
    can iterate with human interaction. I think they do exist though, and certainly,
    they will exist soon. Keep an eye on AI news.
  prefs: []
  type: TYPE_NORMAL
- en: There is a company named Virtual Software Company, but that is human agents,
    not AI agents, so probably a lot better and a lot more time and money.
  prefs: []
  type: TYPE_NORMAL
- en: Other info about ChatDev
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code is available under the Apache 2.0 License
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They encourage you to share your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There’s a guide to customizing ChatDev here: [https://github.com/OpenBMB/ChatDev/blob/main/wiki.md](https://github.com/OpenBMB/ChatDev/blob/main/wiki.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow and see more projects by OpenBMB here: [https://github.com/OpenBMB](https://github.com/OpenBMB
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered errors in code and debugging, refactoring code,
    testing, and explaining code, as well as a note on data protection. We’ve covered
    some of why you want to document well and test well. We were introduced to agents
    and had a review of virtual software companies.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 4*](B21009_04.xhtml#_idTextAnchor100) , we’ll look at demystifying
    generated code for readability. This will include generating more readable code,
    summarizing code for understanding, and generating documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Bibliography
  prefs: []
  type: TYPE_NORMAL
- en: '*Berman* : *How To Install ChatDev: An Entire AI Tech Team Building Your Apps
    (re-upload), Matthew* *Berman* , [https://youtu.be/yoAWsIfEzCw](https://youtu.be/yoAWsIfEzCw
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Brownlee_17Stats* : *17 Statistical Hypothesis Tests in Python (Cheat Sheet),
    Jason Brownlee* , [https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/](https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/)
    , read 1st March 2024'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ChatDev* : *ChatDev, Chen Qian et* *al.* , [https://github.com/OpenBMB/ChatDev](https://github.com/OpenBMB/ChatDev)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ChatDev_paper* : *Experiential Co-Learning, Chen Qian et* *al.* [https://arxiv.org/abs/2312.17025](https://arxiv.org/abs/2312.17025)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ChatGPT* : *ChatGPT,* *OpenAI* , [https://chat.openai.com/](https://chat.openai.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Claude 3* : *Claude 3 Sonnet,* *Anthropic* , [https://claude.ai/chats](https://claude.ai/chats)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dillinger* : *Markdown* *Interpreter* , [https://dillinger.io/](https://dillinger.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Gemini* : *Gemini Pro,* *Google* , [https://gemini.google.com/](https://gemini.google.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastny* : *Discrete Cosine Transform and Time Series Classification, Tim*
    *Mastny* , [https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/](https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Stackoverflow_image_loading* : *How do I fix the “image “pyimage10” doesn’t
    exist” error, and why does it happen?, Billal Begueradj* : [https://stackoverflow.com/users/3329664/billal-begueradj](https://stackoverflow.com/users/3329664/billal-begueradj)
    , [https://stackoverflow.com/questions/38602594/how-do-i-fix-the-image-pyimage10-doesnt-exist-error-and-why-does-it-happen](https://stackoverflow.com/questions/38602594/how-do-i-fix-the-image-pyimage10-doesnt-exist-error-and-why-does-it-happen)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wiki_Agent* : *Intelligent Agent, Wikipedia* , [https://en.wikipedia.org/wiki/Intelligent_agent](https://en.wikipedia.org/wiki/Intelligent_agent)
    , accessed 29th of February 2024'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wiki_refactoring* : *Code refactoring, Wikipedia,* [https://en.wikipedia.org/wiki/Code_refactoring](https://en.wikipedia.org/wiki/Code_refactoring)
    , accessed 29th of February 2024'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 2: Be Wary of the Dark Side of LLM-Powered Coding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section addresses critical challenges and risks associated with using Large
    Language Models in software development. We will examine how biases can affect
    shape code due to training data limitations and ethical practices for minimizing
    these effects. We will also explore potential legal risks such as intellectual
    issues and jurisdictional variances and we will see how to handle them. We will
    also learn to mitigate various vulnerabilities that may emerge in LLM-generated
    code. Finally, we discuss the inherent limitations of LLMs in handling coding
    tasks and the inconsistencies that can arise.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section covers the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21009_04.xhtml#_idTextAnchor100) *,* *Demystifying Generated
    Code for Readability*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21009_05.xhtml#_idTextAnchor115) *,* *Addressing Bias and Ethical
    Concerns in LLM-Generated Code*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21009_06.xhtml#_idTextAnchor137) *,* *Navigating the Legal Landscape
    of LLM-Generated Code*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21009_07.xhtml#_idTextAnchor180) *,* *Security Considerations
    and Measures*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
