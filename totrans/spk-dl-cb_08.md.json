["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mpl_toolkits\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.feature_selection import RFE\nfrom sklearn import linear_model\nfrom sklearn.cross_validation import train_test_split %matplotlib inline\n```", "```py\ndataframe['bedrooms'].value_counts().plot(kind='bar') plt.title('No. of bedrooms')\nplt.xlabel('Bedrooms')\nplt.ylabel('Count')\nsns.despine\n```", "```py\n dataframe['bedrooms'].value_counts().plot(kind='pie')\nplt.title('No. of bedrooms')\n```", "```py\ndataframe['floors'].value_counts().plot(kind='bar') plt.title('Number of floors')\nplt.xlabel('No. of floors')\nplt.ylabel('Count')\nsns.despine\n```", "```py\nplt.figure(figsize=(20,20))\nsns.jointplot(x=dataframe.lat.values, y=dataframe.long.values, size=9)\nplt.xlabel('Longitude', fontsize=10)\nplt.ylabel('Latitude', fontsize=10)\nplt.show()\nsns.despine()\n```", "```py\n plt.figure(figsize=(20,20))\nsns.jointplot(x=dataframe.lat.values, y=dataframe.long.values, size=9)\nplt.xlabel('Longitude', fontsize=10)\nplt.ylabel('Latitude', fontsize=10)\nplt.show()\nsns.despine()\n```", "```py\nplt.figure(figsize=(20,20))\nsns.jointplot(x=dataframe.lat.values, y=dataframe.long.values, size=9)\nplt.xlabel('Longitude', fontsize=10)\nplt.ylabel('Latitude', fontsize=10)\nplt.show()\nsns.despine()\n```", "```py\nplt.figure(figsize=(8,8))\nplt.scatter(dataframe.price, dataframe.sqft_living)\nplt.xlabel('Price')\nplt.ylabel('Square feet')\nplt.show()\n```", "```py\nplt.figure(figsize=(5,5))\nplt.bar(dataframe.condition, dataframe.price)\nplt.xlabel('Condition')\nplt.ylabel('Price')\nplt.show()\n```", "```py\nplt.figure(figsize=(8,8))\nplt.scatter(dataframe.zipcode, dataframe.price)\nplt.xlabel('Zipcode')\nplt.ylabel('Price')\nplt.show()\n```", "```py\nplt.figure(figsize=(10,10))\nplt.scatter(dataframe.grade, dataframe.price)\nplt.xlabel('Grade')\nplt.ylabel('Price')\nplt.show()\n```", "```py\n x_df = dataframe.drop(['id','date',], axis = 1)\n x_df\n```", "```py\n y = dataframe[['price']].copy()\n y_df = pd.DataFrame(y)\n y_df\n```", "```py\n print('Price Vs Bedrooms: %s' % x_df['price'].corr(x_df['bedrooms']))\n print('Price Vs Bathrooms: %s' % x_df['price'].corr(x_df['bathrooms']))\n print('Price Vs Living Area: %s' % x_df['price'].corr(x_df['sqft_living']))\n print('Price Vs Plot Area: %s' % x_df['price'].corr(x_df['sqft_lot']))\n print('Price Vs No. of floors: %s' % x_df['price'].corr(x_df['floors']))\n print('Price Vs Waterfront property: %s' % x_df['price'].corr(x_df['waterfront']))\n print('Price Vs View: %s' % x_df['price'].corr(x_df['view']))\n print('Price Vs Grade: %s' % x_df['price'].corr(x_df['grade']))\n print('Price Vs Condition: %s' % x_df['price'].corr(x_df['condition']))\n print('Price Vs Sqft Above: %s' % x_df['price'].corr(x_df['sqft_above']))\n print('Price Vs Basement Area: %s' % x_df['price'].corr(x_df['sqft_basement']))\n print('Price Vs Year Built: %s' % x_df['price'].corr(x_df['yr_built']))\n print('Price Vs Year Renovated: %s' % x_df['price'].corr(x_df['yr_renovated']))\n print('Price Vs Zipcode: %s' % x_df['price'].corr(x_df['zipcode']))\n print('Price Vs Latitude: %s' % x_df['price'].corr(x_df['lat']))\n print('Price Vs Longitude: %s' % x_df['price'].corr(x_df['long']))\n```", "```py\n sns.pairplot(data=x_df,\n x_vars=['price'],\n y_vars=['bedrooms', 'bathrooms', 'sqft_living',\n 'sqft_lot', 'floors', 'waterfront','view',\n 'grade','condition','sqft_above','sqft_basement',\n 'yr_built','yr_renovated','zipcode','lat','long'],\n size = 5)\n```", "```py\n x_df2 = x_df.drop(['price'], axis = 1)\n```", "```py\n reg=linear_model.LinearRegression()\n```", "```py\n x_train,x_test,y_train,y_test = train_test_split(x_df2,y_df,test_size=0.4,random_state=4)\n```", "```py\n reg.fit(x_train,y_train)\n```", "```py\n predictions=reg.predict(x_test)\n predictions\n```", "```py\n reg.score(x_test,y_test)\n```", "```py\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```py\nnew_model = xgboost.XGBRegressor(n_estimators=750, learning_rate=0.09,         gamma=0, subsample=0.65, colsample_bytree=1, max_depth=7)\n```", "```py\n from sklearn.model_selection import train_test_split\n traindf, testdf = train_test_split(x_train, test_size = 0.2)\n new_model.fit(x_train,y_train)\n```", "```py\n from sklearn.metrics import explained_variance_score\n predictions = new_model.predict(x_test)\n print(explained_variance_score(predictions,y_test))\n```"]