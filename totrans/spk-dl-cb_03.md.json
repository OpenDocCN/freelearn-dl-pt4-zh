["```py\nimport tensorflow as tf\n```", "```py\nfrom tensorflow.examples.tutorials.mnist import input_data\ndata = input_data.read_data_sets('MNIST/', one_hot=True)\n```", "```py\nprint('Image Inventory')\nprint('----------')\nprint('Training: ' + str(len(data.train.labels)))\nprint('Testing: '+ str(len(data.test.labels)))\nprint('----------')\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n```", "```py\nfor i in range(2):\n    image = data.train.images[i]\n    image = np.array(image, dtype='float')\n    label = data.train.labels[i]\n    pixels = image.reshape((28, 28))\n    plt.imshow(pixels, cmap='gray')\n    print('-----------------')\n    print(label)\n    plt.show()\n```", "```py\nif not os.path.exists('MNIST/images'):\n   os.makedirs('MNIST/images/')\nos.chdir('MNIST/images/')\n```", "```py\nfrom matplotlib import image\nfor i in range(1,10):\n     png = data.train.images[i]\n     png = np.array(png, dtype='float')\n     pixels = png.reshape((28, 28))\n     image.imsave('image_no_{}.png'.format(i), pixels, cmap = 'gray')\n```", "```py\nprint(os.listdir())\n```", "```py\nfrom Augmentor import Pipeline\naugmentor = Pipeline('/home/asherif844/sparkNotebooks/Ch03/MNIST/images')\n```", "```py\naugmentor.rotate(probability=0.9, max_left_rotation=25, max_right_rotation=25)\n```", "```py\nfor i in range(1,3):\n     augmentor.sample(10)\n```", "```py\npip install keras\n```", "```py\nxtrain = data.train.images\nytrain = np.asarray(data.train.labels)\nxtest = data.test.images \nytest = np.asarray(data.test.labels)\n```", "```py\nxtrain = xtrain.reshape( xtrain.shape[0],28,28,1)\nxtest = xtest.reshape(xtest.shape[0],28,28,1)\nytest= ytest.reshape(ytest.shape[0],10)\nytrain = ytrain.reshape(ytrain.shape[0],10)\n```", "```py\nimport keras\nimport keras.backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D\n```", "```py\nK.set_image_dim_ordering('th')\n```", "```py\nmodel = Sequential()\n```", "```py\nmodel.add(Conv2D(32, kernel_size=(3, 3),activation='relu', \n            input_shape=(1,28,28)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='sigmoid'))\n```", "```py\nmodel.compile(optimizer='adam',loss='binary_crossentropy', \n              metrics=['accuracy'])\n```", "```py\nmodel.fit(xtrain,ytrain,batch_size=512,epochs=5,\n            validation_data=(xtest, ytest))\n```", "```py\nstats = model.evaluate(xtest, ytest)\nprint('The accuracy rate is {}%'.format(round(stats[1],3)*100))\nprint('The loss rate is {}%'.format(round(stats[0],3)*100))\n```", "```py\nmodel.summary()\n```"]