- en: Advanced Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deep learning involves a huge amount of matrix multiplications, and **Graphic
    Processing Units** (**GPUs**) are a very important aspect when one begins to learn
    deep learning. Without a GPU, the experiment process may take a day or more. With
    a good GPU, we can quickly iterate over deep learning networks and large training
    datasets, and run multiple experiments in a short amount of time. With TensorFlow,
    we can work on a single GPU or even multiple GPUs with ease. However, most machine
    learning platform installations are very complicated once GPUs get involved.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to discuss GPUs and focus on a step-by-step CUDA
    setup and a GPU-based TensorFlow installation. We will start by installing Nvidia
    drivers, the CUDA Toolkit, and the cuDNN library. Then, we will install GPU-enabled
    TensorFlow with `pip`. Finally, we show how to use Anaconda to simplify the installation
    process even further.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work on an Ubuntu 16.06 computer with a Nvidia Titan
    X GPU.
  prefs: []
  type: TYPE_NORMAL
- en: We suggest that you use Ubuntu 14.04 or 16.06 to avoid further issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The choice of GPU is beyond the scope of this chapter. However, you must choose
    a Nvidia device with a high memory capacity in order to take full advantage of
    the GPU when compared to a CPU. Currently, AMD GPUs are not officially supported
    by TensorFlow and most other deep learning frameworks. At the time of writing,
    Windows can use Tensorflow with GPU on Python 3.5 or Python 3.6\. However, Tensorflow
    dropped the support for GPU on macOS from Tensorflow 1.2\. If you are using Windows,
    we suggest that you follow the official tutorial for Windows at the following
    link: [https://www.tensorflow.org/install/install_windows](https://www.tensorflow.org/install/install_windows).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nvidia driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to install Nvidia drivers in Ubuntu. In this section, we
    will show you the easiest approach by using Proprietary GPU Drivers PPA, which
    offers stable proprietary Nvidia graphics driver updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your terminal and run the following commands to add the `PPA` to
    Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to choose a version of Nvidia driver to install. Run the following
    command to see the latest version of your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c197318-f268-4537-b70a-36f099a7ba43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the latest driver is 375.66 on my machine, which is on the
    line with the text NVIDIA binary driver. Now, we can install Nvidia driver version
    375.66 with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd81ea64-17be-4d50-8668-33f5e5ef3880.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the installation is finished, you should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc36071a-d96b-4516-9888-5006cf7227c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we will install the CUDA toolkit from Nvidia.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the CUDA toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will need to open the Nvidia website to download the CUDA toolkit.
    Navigate to [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e04ef1b-0914-4002-9c93-28531297542c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, select Linux | x86_64 | Ubuntu | 16.04 | runfile(local), as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15b9367e-9e39-4d9f-933a-a683f1bc8847.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on the Download (1.4 GB) button to download the installer. The
    installer size is 1.4 GB and it will take a while to finish downloading. After
    that, open your terminal, change the directory to the folder that contains the
    installer, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command-line prompts, you will see the End User License Agreement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/872a1f18-381e-4d0c-80cf-703623ea1dec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use your arrow keys to navigate through the agreement. Otherwise, you
    can press `:q` and see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efc0ed88-6b4d-4bc2-b982-f72ccf874029.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can type `accept` to accept the agreement. After that, you will need
    to answer some questions, as shown on the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b8c4d9d-c4b2-4bb2-a91c-c079f616c9af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You may notice that we will not install Nvidia drivers in this prompt since
    we already installed the latest driver in the previous section. When the installation
    completes, you will see a screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1c2b4cf-a905-4f62-b289-a2912cc977b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open your `~/.bashrc` file and add the following line at the end of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have successfully installed the CUDA toolkit into the machine. You can try
    the following command to see your graphic card information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result on our machine looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90d6ad8c-34e9-41c3-b376-4a7097a8fefd.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing cuDNN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use TensorFlow with GPU support, you need to install another library
    from Nvidia named cuDNN. First, you need to navigate the Nvidia website and download
    the cuDNN library from [https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn).
  prefs: []
  type: TYPE_NORMAL
- en: 'You may need to register a new Nvidia account. After you have logged in to
    the Nvidia website and opened the cuDNN link, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d09350a-6255-47f9-9034-bbd574370c69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, cuDNN has several versions, and we will use the cuDNN v5.1
    for CUDA 8.0, which is the cuDNN version required by TensorFlow. Now, you can
    download the library by clicking the cuDNN v5.1 Library for Linux link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5102b30e-92af-46be-b758-8622bc461b27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can continue with your terminal and use the following commands to install
    cuDNN on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b48bf58c-331f-44b9-b3a3-b57d3dda36bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With everything set up, we can easily install TensorFlow with GPU support with
    the `pip` tool, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6200f88d-3648-4916-9df9-410290042383.png)'
  prefs: []
  type: TYPE_IMG
- en: Verifying TensorFlow with GPU support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you can type `python` on your command line and type the following Python
    command to see if TensorFlow can see your GPU:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should look like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2792737f-39c4-4046-b215-71fa26cda670.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! TensorFlow can work with your GPU now. Our GPU is recognized
    as GeForce GTX TITAN X with 11.92 GB of memory. In the next section, we will show
    you the recommended approach to working with multiple versions of TensorFlow and
    libraries such as OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: Using TensorFlow with Anaconda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During your work, you will encounter situations where you need multiple versions
    of TensorFlow on the same machine, such as TensorFlow 1.0 or TensorFlow 1.2\.
    We may need to use TensorFlow with Python 2.7 or 3.0\. With the previous installation,
    we have already successfully installed TensorFlow in the system Python. Now, we
    will show you how to use Anaconda to have multiple working environments on the
    same machine. With Anaconda, we can even use different versions of other popular
    libraries, such as `OpenCV`, `NumPy`, and `scikit-learn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to download and install miniconda from [https://conda.io/miniconda.html](https://conda.io/miniconda.html).
    In our case, we select Python 2.7 64-bit bash installer, as we want to use Python
    2.7 as the default Python. Nevertheless, we can create environments with either
    Python 2.7 or Python 3 later. We need to run the following command to run the
    installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to accept the End User License Agreement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e89fa46b-42bf-4c8b-9544-40630acc9302.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, we can continue the installation. The result should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6a45924-30c4-4fbf-b20e-8003eddd2341.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we need to source the `.bashrc` file to get Anaconda up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the source code of this chapter, we have already provided some environment
    configurations that you can use to create your desired environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an environment that uses Python 2.7, OpenCV 3, and TensorFlow 1.2.1
    with GPU support. The configuration is named `env2.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95bb8acd-3cd0-477e-b054-e5d846d3b5c6.png)'
  prefs: []
  type: TYPE_IMG
- en: You can easily change `python=2.7` to `python=3` and `opencv3` to `opencv` to
    have Python 3 and OpenCV 2.4 respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the following command to create the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should look like following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1331d6e0-36b3-49d9-b7ca-4d2eedb99c03.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you can type `source activate env2` to activate the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will need to verify TensorFlow, as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2155a240-7872-4dde-b0a8-e4cfcb38a84a.png)'
  prefs: []
  type: TYPE_IMG
- en: You may notice the (env2) in the top-left of the preceding image. That shows
    the name of the current environment. The Python version on the second line is
    2.7.13 and is packaged by conda-forge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can create several different environments to use in your workflow.
    Here is an example of an environment named env3 with Python 3 and OpenCV 2.4:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8b0a9d6-22eb-471e-a9fe-f616c8381ebf.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the advantages of using GPUs in a machine learning
    workflow, especially in deep learning. Then, we showed the step-by-step installation
    of a Nvidia driver, the CUDA Toolkit, cuDNN, and TensorFlow with GPU support.
    We also introduced our recommended workflow for using multiple versions of TensorFlow
    and other libraries.
  prefs: []
  type: TYPE_NORMAL
