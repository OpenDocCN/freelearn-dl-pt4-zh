["```py\n    import networkx as nx\n    import matplotlib.pyplot as plt\n    ```", "```py\n    G = nx.erdos_renyi_graph(10, 0.5, seed=0)\n    ```", "```py\n    pos = nx.circular_layout(G)\n    ```", "```py\n    nx.draw(G, pos=pos, with_labels=True)\n    ```", "```py\nG = nx.gnm_random_graph(3, 2, seed=0)\npos = nx.circular_layout(G)\nnx.draw(G, pos=pos, with_labels=True)\n```", "```py\nG = nx.watts_strogatz_graph(10, 4, 0.5, seed=0)\npos = nx.circular_layout(G)\nnx.draw(G, pos=pos)\n```", "```py\nz = model.encode(test_data.x, test_data.edge_index)\nadj = torch.where((z @ z.T) > 0.9, 1, 0)\nadj\ntensor([[1, 0, 0,  ..., 0, 1, 1],\n        [0, 1, 1,  ..., 0, 0, 0],\n        [0, 1, 1,  ..., 0, 1, 1],\n        ...,\n        [0, 0, 0,  ..., 1, 0, 0],\n        [1, 0, 1,  ..., 0, 1, 1],\n        [1, 0, 1,  ..., 0, 1, 1]])\n```", "```py\n    !pip install deepchem==2.7.1\n    ```", "```py\n    import numpy as np\n    import tensorflow as tf\n    import pandas as pd\n    from tensorflow import one_hot\n    import deepchem as dc\n    from deepchem.models.optimizers import ExponentialDecay\n    from deepchem.models import BasicMolGANModel as MolGAN\n    from deepchem.feat.molecule_featurizers.molgan_featurizer import GraphMatrix\n    from rdkit import Chem\n    from rdkit.Chem import Draw\n    from rdkit.Chem import rdmolfiles\n    from rdkit.Chem import rdmolops\n    from rdkit.Chem.Draw import IpythonConsole\n    ```", "```py\n    _, datasets, _ = dc.molnet.load_tox21()\n    df = pd.DataFrame(datasets[0].ids, columns=['smiles'])\n    ```", "```py\n    0  CC(O)(P(=O)(O)O)P(=O)(O)O\n    1  CC(C)(C)OOC(C)(C)CCC(C)(C)OOC(C)(C)C\n    2  OC[C@H](O)[C@@H](O)[C@H](O)CO\n    3  CCCCCCCC(=O)[O-].CCCCCCCC(=O)[O-].[Zn+2]\n    ... ...\n    6260 Cc1cc(CCCOc2c(C)cc(-c3noc(C(F)(F)F)n3)cc2C)on1\n    6261 O=C1OC(OC(=O)c2cccnc2Nc2cccc(C(F)(F)F)c2)c2ccc...\n    6262 CC(=O)C1(C)CC2=C(CCCC2(C)C)CC1C\n    6263 CC(C)CCC[C@@H](C)[C@H]1CC(=O)C2=C3CC[C@H]4C[C@...\n    ```", "```py\n    max_atom = 15\n    molecules = [x for x in df['smiles'].values if Chem.MolFromSmiles(x).GetNumAtoms() < max_atom]\n    featurizer = dc.feat.MolGanFeaturizer(max_atom_count=max_atom)\n    ```", "```py\n    features = []\n    for x in molecules:\n        mol = Chem.MolFromSmiles(x)\n        new_order = rdmolfiles.CanonicalRankAtoms(mol)\n        mol = rdmolops.RenumberAtoms(mol, new_order)\n        feature = featurizer.featurize(mol)\n        if feature.size != 0:\n            features.append(feature[0])\n    ```", "```py\n    features = [x for x in features if type(x) is GraphMatrix]\n    ```", "```py\n    gan = MolGAN(learning_rate=ExponentialDecay(0.001, 0.9, 5000), vertices=max_atom)\n    ```", "```py\n    dataset = dc.data.NumpyDataset(X=[x.adjacency_matrix for x in features], y=[x.node_features for x in features])\n    ```", "```py\n    def iterbatches(epochs):\n        for i in range(epochs):\n            for batch in dataset.iterbatches(batch_size=gan.batch_size, pad_batches=True):\n                adjacency_tensor = one_hot(batch[0], gan.edges)\n                node_tensor = one_hot(batch[1], gan.nodes)\n                yield {gan.data_inputs[0]: adjacency_tensor, gan.data_inputs[1]: node_tensor}\n    ```", "```py\n    gan.fit_gan(iterbatches(25), generator_steps=0.2)\n    ```", "```py\n    generated_data = gan.predict_gan_generator(1000)\n    nmols = feat.defeaturize(generated_data)\n    ```", "```py\n    valid_mols = [x for x in generated_mols if x is not None]\n    print (f'{len(valid_mols)} valid molecules (out of {len((generated_mols))} generated molecules)')\n    31 valid molecules (out of 1000 generated molecules)\n    ```", "```py\n    generated_smiles = [Chem.MolToSmiles(x) for x in valid_mols]\n    generated_smiles_viz = [Chem.MolFromSmiles(x) for x in set(generated_smiles)]\n    print(f'{len(generated_smiles_viz)} unique valid molecules ({len(generated_smiles)-len(generated_smiles_viz)} redundant molecules)')\n    24 unique valid molecules (7 redundant molecules)\n    ```", "```py\n    img = Draw.MolsToGridImage(generated_smiles_viz, molsPerRow=6, subImgSize=(200, 200), returnPNG=False)\n    ```"]