- en: Application of Deep Learning to Signal processing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The current chapter will present a case study of creating new music notes using
    generative modeling techniques such as RBM. In this chapter, we will cover the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Introducing and preprocessing music MIDI files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an RBM model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating new music notes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing and preprocessing music MIDI files
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will read a repository of **Musical Instrument Digital Interface**
    (**MIDI**) files and preprocess them into a suitable format for an RBM. MIDI is
    one of the formats of storing musical notes, which can be converted to other formats
    such as `.wav`, `.mp3`, `.mp4`, and so on. MIDI file formats store various kinds
    of events such as Note-on, Note-off, Tempo, Time Signature, End of track, and
    so on. However, we will primarily be focusing on the type of note--when it was
    turned **on**, and when it was turned **off**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Each song is encoded into a binary matrix, where rows represent time, and columns
    represent both turned on and turned off notes. At each time, a note is turned
    on and the same note is turned off. Suppose that, out of *n* notes, note *i* is
    turned on and turned off at time *j*, then positions *Mji = 1* and *Mj(n+i) =
    1*, and the rest *Mj = 0*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: All the rows together form a song. Currently, in this chapter, we will be leveraging
    Python codes to encode MIDI songs into binary matrices, which can later be used
    in a Restricted Boltzmann Machine (RBM).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the prerequisites to preprocess MIDI files:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the MIDI song repository:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/dshieble/Music_RBM/tree/master/Pop_Music_Midi](https://github.com/dshieble/Music_RBM/tree/master/Pop_Music_Midi)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Python codes to manipulate MIDI songs:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/dshieble/Music_RBM/blob/master/midi_manipulation.py](https://github.com/dshieble/Music_RBM/blob/master/midi_manipulation.py)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `"reticulate"` package, which provides the R interface to Python:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Import Python libraries:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have set up all the essentials, let''s look at the function to
    define MIDI files:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the function to read the MIDI files and encode them into a binary matrix:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Building an RBM model
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will build an RBM model as discussed (in detail) in [Chapter
    5](part0204.html#62HIO1-a0a93989f17f4d6cb68b8cfd331bc5ab), *Generative Models
    in Deep Learning*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up our system for the model:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'In Piano, the lowest note is 24 and the highest is 102; hence, the range of
    notes is 78\. Thus, the number of columns in the encoded matrix is 156 (that is,
    78 for note-on and 78 for note-off):'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will create notes for 15 number of steps at a time with 2,340 nodes in the
    input layer and 50 nodes in the hidden layer:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The learning rate (alpha) is 0.1:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking into the steps of building an RBM model:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `placeholder` variables:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Define a forward pass:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, define a backward pass:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Calculate positive and negative gradients accordingly:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Define the objective function:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义目标函数：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Initialize the current and previous variables:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化当前和先前的变量：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Start a TensorFlow session:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动TensorFlow会话：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run `200` training epochs:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`200`次训练周期：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Generating new music notes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成新的音乐音符
- en: In this recipe, we will generate new sample music notes. New musical notes can
    be generated by altering parameter `num_timesteps`. However, one should keep in
    mind to increase the timesteps, as it can become computationally inefficient to
    handle increased dimensionality of vectors in the current setup of RBM. These
    RBMs can be made efficient in learning by creating their stacks (namely **Deep
    Belief Networks**). Readers can leverage the DBN codes of [Chapter 5](part0204.html#62HIO1-a0a93989f17f4d6cb68b8cfd331bc5ab),
    *Generative Models in Deep Learning,* to generate new musical notes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将生成新的样本音乐音符。可以通过改变参数`num_timesteps`来生成新的音乐音符。然而，应该记住增加时间步数，因为在当前的RBM设置中，随着向量维度的增加，处理起来可能会变得计算效率低下。通过创建它们的堆叠（即**深度置信网络**），这些RBM可以在学习中变得更高效。读者可以利用[第5章](part0204.html#62HIO1-a0a93989f17f4d6cb68b8cfd331bc5ab)中*深度学习中的生成模型*的DBN代码来生成新的音乐音符。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create new sample music:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的样本音乐：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Regenerate the MIDI file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新生成MIDI文件：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
