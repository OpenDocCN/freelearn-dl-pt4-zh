- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deep Q-Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Chapter [5](ch009.xhtml#x1-820005), you became familiar with the Bellman
    equation and the practical method of its application called value iteration. This
    approach allowed us to significantly improve our speed and convergence in the
    FrozenLake environment, which is promising, but can we go further? In this chapter,
    we will apply the same approach to problems of much greater complexity: arcade
    games from the Atari 2600 platform, which are the de facto benchmark of the reinforcement
    learning (RL) research community.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To deal with this new and more challenging goal, in this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Talk about problems with the value iteration method and consider its variation,
    called Q-learning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply Q-learning to so-called grid world environments, which is called tabular
    Q-learning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss Q-learning in conjunction with neural networks (NNs). This combination
    has the name deep Q-network (DQN).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we will reimplement a DQN algorithm from the famous
    paper Playing Atari with deep reinforcement learning [[Mni13](#)], which was published
    in 2013 and started a new era in RL development. Although it is too early to discuss
    the practical applicability of these basic methods, this will become clearer to
    you as you progress with the book.
  prefs: []
  type: TYPE_NORMAL
- en: Real-life value iteration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The improvements that we got in the FrozenLake environment by switching from
    the cross-entropy method to the value iteration method are quite encouraging,
    so it’s tempting to apply the value iteration method to more challenging problems.
    However, it is important to look at the assumptions and limitations that our value
    iteration method has. But let’s start with a quick recap of the method. On every
    step, the value iteration method does a loop on all states, and for every state,
    it performs an update of its value with a Bellman approximation. The variation
    of the same method for Q-values (values for actions) is almost the same, but we
    approximate and store values for every state and action. So what’s wrong with
    this process?
  prefs: []
  type: TYPE_NORMAL
- en: The first obvious problem is the count of environment states and our ability
    to iterate over them. In value iteration, we assume that we know all states in
    our environment in advance, can iterate over them, and can store their value approximations.
    It’s easy to do for the simple grid world environment of FrozenLake, but what
    about other tasks?
  prefs: []
  type: TYPE_NORMAL
- en: To understand this, let’s first look at how scalable the value iteration approach
    is, or, in other words, how many states we can easily iterate over in every loop.
    Even a moderate-sized computer can keep several billion float values in memory
    (8.5 billion in 32 GB of RAM), so the memory required for value tables doesn’t
    look like a huge constraint. Iteration over billions of states and actions will
    be more central processing unit (CPU)-demanding but is not an insurmountable problem.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, we have multicore systems that are mostly idle, so by using parallelism,
    we can iterate over billions of values in a reasonable amount of time. The real
    problem is the number of samples required to get good approximations for state
    transition dynamics. Imagine that you have some environment with, say, a billion
    states (which corresponds approximately to a FrozenLake of size 31600 × 31600).
    To calculate even a rough approximation for every state of this environment, we
    would need hundreds of billions of transitions evenly distributed over our states,
    which is not practical.
  prefs: []
  type: TYPE_NORMAL
- en: To give you an example of an environment with an even larger number of potential
    states, let’s consider the Atari 2600 game console again. This was very popular
    in the 1980s, and many arcade-style games were available for it. The Atari console
    is archaic by today’s gaming standards, but its games provide an excellent set
    of RL problems that humans can master fairly quickly, yet are still challenging
    for computers. Not surprisingly, this platform (using an emulator, of course)
    is a very popular benchmark within RL research, as I mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s calculate the state space for the Atari platform. The resolution of the
    screen is 210 × 160 pixels, and every pixel has one of 128 colors. So every frame
    of the screen has 210 ⋅ 160 = 33600 pixels and the total number of different screens
    possible is 128^(33600), which is slightly more than 10^(70802). If we decide
    to just enumerate all possible states of the Atari once, it will take billions
    of billions of years even for the fastest supercomputer. Also, 99(.9)% of this
    job will be a waste of time, as most of the combinations will never be shown during
    even long gameplay, so we will never have samples of those states. However, the
    value iteration method wants to iterate over them just in case.
  prefs: []
  type: TYPE_NORMAL
- en: The second main problem with the value iteration approach is that it limits
    us to discrete action spaces. Indeed, both Q(s,a) and V (s) approximations assume
    that our actions are a mutually exclusive discrete set, which is not true for
    continuous control problems where actions can represent continuous variables,
    such as the angle of a steering wheel, the force on an actuator, or the temperature
    of a heater. This issue is much more challenging than the first, and we will talk
    about it in the last part of the book, in chapters dedicated to continuous action
    space problems. For now, let’s assume that we have a discrete count of actions
    and that this count is not very large (i.e., orders of 10s). How should we handle
    the state space size issue?
  prefs: []
  type: TYPE_NORMAL
- en: Tabular Q-learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key question to focus on when trying to handle the state space issue is,
    do we really need to iterate over every state in the state space? We have an environment
    that can be used as a source of real-life samples of states. If some state in
    the state space is not shown to us by the environment, why should we care about
    its value? We can only use states obtained from the environment to update the
    values of states, which can save us a lot of work.
  prefs: []
  type: TYPE_NORMAL
- en: 'This modification of the value iteration method is known as Q-learning, as
    mentioned earlier, and for cases with explicit state-to-value mappings, it entails
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with an empty table, mapping states to values of actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By interacting with the environment, obtain the tuple s, a, r, s′ (state, action,
    reward, and the new state). In this step, you need to decide which action to take,
    and there is no single proper way to make this decision. We discussed this problem
    as exploration versus exploitation in Chapter [1](ch005.xhtml#x1-190001) and will
    talk a lot about it in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the Q(s,a) value using the Bellman approximation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![π (a |s) = P[At = a|St = s] ](img/eq18.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Repeat from step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As in value iteration, the end condition could be some threshold of the update,
    or we could perform test episodes to estimate the expected reward from the policy.
    Another thing to note here is how to update the Q-values. As we take samples from
    the environment, it’s generally a bad idea to just assign new values on top of
    existing values, as training can become unstable.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is usually done in practice is updating the Q(s,a) with approximations
    using a “blending” technique, which is just averaging between old and new values
    of Q using learning rate α with a value from 0 to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![π (a |s) = P[At = a|St = s] ](img/eq19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This allows values of Q to converge smoothly, even if our environment is noisy.
    The final version of the algorithm is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with an empty table for Q(s,a).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain (s, a, r, s′) from the environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make a Bellman update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![π (a |s) = P[At = a|St = s] ](img/eq19.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Check convergence conditions. If not met, repeat from step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As mentioned earlier, this method is called tabular Q-learning, as we keep
    a table of states with their Q-values. Let’s try it on our FrozenLake environment.
    The whole example code is in Chapter06/01_frozenlake_q_learning.py:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import packages and define constants and used types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The new thing here is the value of α, which will be used as the learning rate
    in the value update. The initialization of our Agent class is simpler now, as
    we don’t need to track the history of rewards and transition counters, just our
    value table. This will make our memory footprint smaller, which is not a big issue
    for FrozenLake but can be critical for larger environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method sample_env is used to obtain the next transition from the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We sample a random action from the action space and return the tuple of the
    old state, the action taken, the reward obtained, and the new state. The tuple
    will be used in the training loop later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next method receives the state of the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This method finds the best action to take from the given state of the environment
    by taking the action with the largest value that we have in the table. If we don’t
    have the value associated with the state and action pair, then we take it as zero.
    This method will be used two times: first, in the test method that plays one episode
    using our current values table (to evaluate our policy’s quality), and second,
    in the method that performs the value update to get the value of the next state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we update our values table using one step from the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we first calculate the Bellman approximation for our state, s, and action,
    a, by summing the immediate reward with the discounted value of the next state.
    Then, we obtain the previous value of the state and action pair and blend these
    values together using the learning rate. The result is the new approximation for
    the value of state s and action a, which is stored in our table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last method in our Agent class plays one full episode using the provided
    test environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The action on every step is taken using our current value table of Q-values.
    This method is used to evaluate our current policy to check the progress of learning.
    Note that this method doesn’t alter our value table; it only uses it to find the
    best action to take.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the example is the training loop, which is very similar to examples
    from Chapter [5](ch009.xhtml#x1-820005): we create a test environment, agent,
    and summary writer, and then, in the loop, we do one step in the environment and
    perform a value update using the obtained data. Next, we test our current policy
    by playing several test episodes. If a good reward is obtained, then we stop training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You may have noticed that this version used more iterations (but your experiment
    might have a different count of steps) to solve the problem compared to the value
    iteration method from the previous chapter. The reason for that is that we are
    no longer using the experience obtained during testing. In the example Chapter05/02_frozenlake_q_iteration.py,
    periodical tests caused an update of Q-table statistics. Here, we don’t touch
    Q-values during the test, which causes more iterations before the environment
    gets solved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, the total number of samples required from the environment is almost
    the same. The reward chart in TensorBoard also shows good training dynamics, which
    is very similar to the value iteration method (the reward plot for value iteration
    is shown in Figure [5.9](ch009.xhtml#x1-87114r9)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/B22150_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Reward dynamics of FrozenLake'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will extend the Q-learning method with NNs’ preprocessing
    environment states. This will greatly extend the flexibility and applicability
    of the method we discussed.
  prefs: []
  type: TYPE_NORMAL
- en: Deep Q-learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Q-learning method that we have just covered solves the issue of iteration
    over the full set of states, but it can still struggle with situations when the
    count of the observable set of states is very large. For example, Atari games
    can have a large variety of different screens, so if we decide to use raw pixels
    as individual states, we will quickly realize that we have too many states to
    track and approximate values for.
  prefs: []
  type: TYPE_NORMAL
- en: In some environments, the count of different observable states could be almost
    infinite. For example, in CartPole, the environment gives us a state that is four
    floating point numbers. The number of value combinations is finite (they’re represented
    as bits), but this number is extremely large. With just bit values, it is around
    2^(4⋅32) ≈ 3.4 ⋅ 10^(38). In reality, it is less, as state values of the environment
    are bounded, so not all bit combinations of 4 float32 values are possible, but
    the resulting state space is still too large. We could create some bins to discretize
    those values, but this often creates more problems than it solves; we would need
    to decide what ranges of parameters are important to distinguish as different
    states and what ranges could be clustered together. As we’re trying to implement
    RL methods in a general way (without looking inside the environment’s internals),
    this is not a very promising direction.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Atari, one single pixel change doesn’t make much difference,
    so we might want to treat similar images as one state. However, we still need
    to distinguish some of the states.
  prefs: []
  type: TYPE_NORMAL
- en: The following image shows two different situations in a game of Pong. We’re
    playing against the artificial intelligence (AI) opponent by controlling a paddle
    (our paddle is on the right, whereas our opponent’s is on the left). The objective
    of the game is to get the bouncing ball past our opponent’s paddle, while preventing
    the ball from getting past our paddle. We can consider the two situations to be
    completely different. In the situation shown on the right, the ball is close to
    the opponent, so we can relax and watch. However, the situation on the left is
    more demanding; assuming that the ball is moving from left to right, the ball
    is moving toward our side, so we need to move our paddle quickly to avoid losing
    a point. The situations in Figure [6.2](#x1-93003r2) are just two from the 10^(70802)
    possible situations, but we want our agent to act on them differently.
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/file32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: The ambiguity of observations in Pong. In the left image, the ball
    is moving to the right, toward our paddle, and on the right, its direction is
    opposite'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a solution to this problem, we can use a nonlinear representation that maps
    both the state and action onto a value. In machine learning, this is called a
    “regression problem.” The concrete way to represent and train such a representation
    can vary, but, as you may have already guessed from this section’s title, using
    a deep NN is one of the most popular options, especially when dealing with observations
    represented as screen images. With this in mind, let’s make modifications to the
    Q-learning algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize Q(s,a) with some initial approximation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By interacting with the environment, obtain the tuple (s, a, r, s′).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Calculate the loss:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![π (a |s) = P[At = a|St = s] ](img/eq20.png)![π (a |s) = P[At = a|St = s]
    ](img/eq21.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Update Q(s,a) using the stochastic gradient descent (SGD) algorithm, by minimizing
    the loss with respect to the model parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat from step 2 until converged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This algorithm looks simple, but, unfortunately, it won’t work very well. Let’s
    discuss some of the aspects that could go wrong and the potential ways we could
    approach these scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Interaction with the environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we need to interact with the environment somehow to receive data
    to train on. In simple environments, such as FrozenLake, we can act randomly,
    but is this the best strategy to use? Imagine the game of Pong. What’s the probability
    of winning a single point by randomly moving the paddle? It’s not zero, but it’s
    extremely small, which just means that we will need to wait for a very long time
    for such a rare situation. As an alternative, we can use our Q-function approximation
    as a source of behavior (as we did before in the value iteration method, when
    we remembered our experience during testing).
  prefs: []
  type: TYPE_NORMAL
- en: If our representation of Q is good, then the experience that we get from the
    environment will show the agent relevant data to train on. However, we’re in trouble
    when our approximation is not perfect (at the beginning of the training, for example).
    In such a case, our agent can be stuck with bad actions for some states without
    ever trying to behave differently. This is the exploration versus exploitation
    dilemma mentioned briefly in Chapter [1](ch005.xhtml#x1-190001), which we will
    discuss in detail now. On the one hand, our agent needs to explore the environment
    to build a complete picture of transitions and action outcomes. On the other hand,
    we should use interaction with the environment efficiently; we shouldn’t waste
    time by randomly trying actions that we have already tried and learned outcomes
    for.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, random behavior is better at the beginning of the training when
    our Q approximation is bad, as it gives us more uniformly distributed information
    about the environment states. As our training progresses, random behavior becomes
    inefficient, and we want to fall back to our Q approximation to decide how to
    act.
  prefs: []
  type: TYPE_NORMAL
- en: A method that performs such a mix of two extreme behaviors is known as an epsilon-greedy
    method, which just means switching between random and Q policy using the probability
    hyperparameter 𝜖. By varying 𝜖, we can select the ratio of random actions. The
    usual practice is to start with 𝜖 = 1.0 (100% random actions) and slowly decrease
    it to some small value, such as 5% or 2% random actions. Using an epsilon-greedy
    method helps us to both explore the environment in the beginning and stick to
    good policy at the end of the training. There are other solutions to the exploration
    versus exploitation problem, and we will discuss some of them in the third part
    of the book. This problem is one of the fundamental open questions in RL and an
    active area of research that is not even close to being resolved completely.
  prefs: []
  type: TYPE_NORMAL
- en: SGD optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core of our Q-learning procedure is borrowed from supervised learning. Indeed,
    we are trying to approximate a complex, nonlinear function, Q(s,a), with an NN.
    To do this, we must calculate targets for this function using the Bellman equation
    and then pretend that we have a supervised learning problem at hand. That’s okay,
    but one of the fundamental requirements for SGD optimization is that the training
    data is independent and identically distributed (frequently abbreviated as iid),
    which means that our training data is randomly sampled from the underlying dataset
    we’re trying to learn on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, data that we are going to use for the SGD update doesn’t fulfill
    these criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Our samples are not independent. Even if we accumulate a large batch of data
    samples, they will all be very close to each other, as they will belong to the
    same episode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Distribution of our training data won’t be identical to samples provided by
    the optimal policy that we want to learn. Data that we have will be a result of
    some other policy (our current policy, a random one, or both in the case of epsilon-greedy),
    but we don’t want to learn how to play randomly: we want an optimal policy with
    the best reward.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To deal with this nuisance, we usually need to use a large buffer of our past
    experience and sample training data from it, instead of using our latest experience.
    This technique is called a replay buffer. The simplest implementation is a buffer
    of a fixed size, with new data added to the end of the buffer so that it pushes
    the oldest experience out of it.
  prefs: []
  type: TYPE_NORMAL
- en: The replay buffer allows us to train on more-or-less independent data, but the
    data will still be fresh enough to train on samples generated by our recent policy.
    In Chapter [8](ch012.xhtml#x1-1240008), we will check another kind of replay buffer,
    prioritized, which provides a more sophisticated sampling approach.
  prefs: []
  type: TYPE_NORMAL
- en: Correlation between steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another practical issue with the default training procedure is also related
    to the lack of iid data, but in a slightly different manner. The Bellman equation
    provides us with the value of Q(s,a) via Q(s′,a′) (this process is called bootstrapping,
    when we use the formula recursively). However, both the states s and s′ have only
    one step between them. This makes them very similar, and it’s very hard for NNs
    to distinguish between them. When we perform an update of our NNs’ parameters
    to make Q(s,a) closer to the desired result, we can indirectly alter the value
    produced for Q(s′,a′) and other states nearby. This can make our training very
    unstable, like chasing our own tail; when we update Q for state s, then on subsequent
    states, we will discover that Q(s′,a′) becomes worse but attempts to update it
    can spoil our Q(s,a) approximation even more, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: To make training more stable, there is a trick, called target network, by which
    we keep a copy of our network and use it for the Q(s′,a′) value in the Bellman
    equation. This network is synchronized with our main network only periodically,
    for example, once in N steps (where N is usually quite a large hyperparameter,
    such as 1k or 10k training iterations).
  prefs: []
  type: TYPE_NORMAL
- en: The Markov property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our RL methods use Markov decision process (MDP) formalism as their basis,
    which assumes that the environment obeys the Markov property: observations from
    the environment are all that we need to act optimally. In other words, our observations
    allow us to distinguish states from one another.'
  prefs: []
  type: TYPE_NORMAL
- en: As you saw from the preceding Pong screenshot in Figure [6.2](#x1-93003r2),
    one single image from the Atari game is not enough to capture all the important
    information (using only one image, we have no idea about the speed and direction
    of objects, like the ball and our opponent’s paddle). This obviously violates
    the Markov property and moves our single-frame Pong environment into the area
    of partially observable MDPs (POMDPs). A POMDP is basically an MDP without the
    Markov property, and it is very important in practice. For example, for most card
    games in which you don’t see your opponents’ cards, game observations are POMDPs
    because the current observation (i.e., your cards and the cards on the table)
    could correspond to different cards in your opponents’ hands.
  prefs: []
  type: TYPE_NORMAL
- en: We won’t discuss POMDPs in detail in this book, but we will use a small technique
    to push our environment back into the MDP domain. The solution is maintaining
    several observations from the past and using them as a state. In the case of Atari
    games, we usually stack k subsequent frames together and use them as the observation
    at every state. This allows our agent to deduct the dynamics of the current state,
    for instance, to get the speed of the ball and its direction. The usual “classical”
    number of k for Atari is four. Of course, it’s just a hack, as there can be longer
    dependencies in the environment, but for most of the games, it works well.
  prefs: []
  type: TYPE_NORMAL
- en: The final form of DQN training
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many more tips and tricks that researchers have discovered to make
    DQN training more stable and efficient, and we will cover the best of them in
    Chapter [8](ch012.xhtml#x1-1240008). However, epsilon-greedy, the replay buffer,
    and the target network form a basis that has allowed the company DeepMind to successfully
    train a DQN on a set of 49 Atari games, demonstrating the efficiency of this approach
    when applied to complicated environments.
  prefs: []
  type: TYPE_NORMAL
- en: The original paper Playing Atari with deep reinforcement learning [[Mni13](#)]
    (without a target network) was published at the end of 2013 and used seven games
    for testing. Later, at the beginning of 2015, a revised version of the article
    with the title Human-level control through deep reinforcement learning [[Mni+15](#)],
    already with 49 different games, was published in Nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'The algorithm for DQN from the preceding papers has the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize parameters for Q(s,a) and Q̂(s,a) with random weights, 𝜖 ← 1.0, and
    empty the replay buffer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With probability 𝜖, select a random action a; otherwise, a = arg max[a]Q(s,a).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute action a in an emulator and observe the reward, r, and the next state,
    s′.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store the transition (s, a, r, s′) in the replay buffer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sample a random mini-batch of transitions from the replay buffer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For every transition in the buffer, calculate the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![π (a |s) = P[At = a|St = s] ](img/eq22.png) ![π (a |s) = P[At = a|St = s]
    ](img/eq23.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Calculate the loss: ℒ = (Q(s,a) −y)².'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update Q(s,a) using the SGD algorithm by minimizing the loss in respect to the
    model parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every N steps, copy weights from Q to Q̂.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat from step 2 until converged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s implement this algorithm now and try to beat some of the Atari games!
  prefs: []
  type: TYPE_NORMAL
- en: DQN on Pong
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we jump into the code, some introduction is needed. Our examples are
    becoming increasingly challenging and complex, which is not surprising, as the
    complexity of the problems that we are trying to tackle is also growing. The examples
    are as simple and concise as possible, but some of the code may be difficult to
    understand at first.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to note is performance. Our previous examples for FrozenLake,
    or CartPole, were not demanding from a resource perspective, as observations were
    small, NN parameters were tiny, and shaving off extra milliseconds in the training
    loop wasn’t important. However, from now on, that’s not the case. One single observation
    from the Atari environment is 100k values, which have to be preprocessed, rescaled,
    and stored in the replay buffer. One extra copy of this data array can cost you
    training speed, which will not be seconds and minutes anymore but, instead, hours
    on even the fastest graphics processing unit (GPU) available.
  prefs: []
  type: TYPE_NORMAL
- en: The NN training loop could also be a bottleneck. Of course, RL models are not
    as huge monsters as state-of-the-art large language models (LLMs), but even the
    DQN model from 2015 has more than 1.5M parameters, which has to be adjusted millions
    of times. So, to cut a long story short, performance matters, especially when
    you are experimenting with hyperparameters and need to wait not for a single model
    to train but dozens of them.
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch is quite expressive, so more-or-less efficient processing code could
    look much less cryptic than optimized TensorFlow graphs, but there is still a
    significant opportunity to do things slowly and make mistakes. For example, a
    naïve version of DQN loss computation, which loops over every batch sample, is
    about two times slower than a parallel version. However, a single extra copy of
    the data batch could make the speed of the same code 13 times slower, which is
    quite significant.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example has been split into three modules due to its length, logical structure,
    and reusability. The modules are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter06/lib/wrappers.py: These are Atari environment wrappers, mostly taken
    from the Stable Baselines3 (SB3) project: [https://github.com/DLR-RM/stable-baselines3](https://github.com/DLR-RM/stable-baselines3).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chapter06/lib/dqn_model.py: This is the DQN NN layer, with the same architecture
    as the DeepMind DQN from the Nature paper.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chapter06/02_dqn_pong.py: This is the main module, with the training loop,
    loss function calculation, and experience replay buffer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrappers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tackling Atari games with RL is quite demanding from a resource perspective.
    To make things faster, several transformations are applied to the Atari platform
    interaction, which are described in DeepMind’s paper. Some of these transformations
    influence only performance, but some address Atari platform features that make
    learning long and unstable. Transformations are implemented as Gym wrappers of
    various kinds. The full list is quite lengthy and there are several implementations
    of the same wrappers in various sources. My personal favorite is the SB3 repository,
    which is an evolution of OpenAI Baselines code.
  prefs: []
  type: TYPE_NORMAL
- en: 'SB3 includes lots of RL methods implemented using PyTorch and is supposed to
    be a unifying benchmark to compare various methods. At the moment, we’re not interested
    in those methods’ implementation (we’re going to reimplement most of them ourselves),
    but some wrappers are very useful. The repository is avaliable at [https://github.com/DLR-RM/stable-baselines3](https://github.com/DLR-RM/stable-baselines3)
    and wrappers are documented at [https://stable-baselines3.readthedocs.io/en/master/common/atari_wrappers.xhtml](https://stable-baselines3.readthedocs.io/en/master/common/atari_wrappers.xhtml).
    The list of the most popular Atari transformations used by RL researchers includes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converting individual lives in the game into separate episodes: In general,
    an episode contains all the steps from the beginning of the game until the “Game
    over” screen, which can last for thousands of game steps (observations and actions).
    Usually, in arcade games, the player is given several lives, which provide several
    attempts in the game. This transformation splits a full episode into individual
    small episodes for every life that a player has. Internally, this is implemented
    as checking an emulator’s information about remaining lives. Not all games support
    this feature (although Pong does), but for the supported environments, it usually
    helps to speed up convergence, as our episodes become shorter. This logic is implemented
    in the EpisodicLifeEnv wrapper in SB3 code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the beginning of the game, performing a random amount (up to 30) of empty
    actions (also called “no-op”): This skips intro screens in some Atari games, which
    are not relevant for the gameplay. It is implemented in the NoopResetEnv wrapper.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Making an action decision every K steps, where K is usually 3 or 4: On intermediate
    frames, the chosen action is simply repeated. This allows training to speed up
    significantly, as processing every frame with an NN is quite a demanding operation,
    but the difference between consequent frames is usually minor. This is implemented
    in the MaxAndSkipEnv wrapper, which also includes the next transformation in the
    list (the maximum between two frames).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Taking the maximum of every pixel in the last two frames and using it as an
    observation: Some Atari games have a flickering effect, which is due to the platform’s
    limitation. (Atari has a limited number of sprites that can be shown on a single
    frame.) For the human eye, such quick changes are not visible, but they can confuse
    NNs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pressing FIRE at the beginning of the game: Some games (including Pong and
    Breakout) require a user to press the FIRE button to start the game. Without this,
    the environment becomes a POMDP, as from observation, an agent cannot tell whether
    FIRE was already pressed. This is implemented in the FireResetEnv wrapper class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scaling every frame down from 210 × 160, with three color frames, to a single-color
    84 × 84 image: Different approaches are possible. For example, the DeepMind paper
    describes this transformation as taking the Y-color channel from the YCbCr color
    space and then rescaling the full image to an 84 × 84 resolution. Some other researchers
    do grayscale transformation, cropping non-relevant parts of an image and then
    scaling down. In the SB3 repository, the latter approach is used. This is implemented
    in the WarpFrame wrapper class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stacking several (usually four) subsequent frames together to give the network
    information about the dynamics of the game’s objects: This approach was already
    discussed as a quick solution to the lack of game dynamics in a single game frame.
    There is no wrapper in the SB3 project, I implemented my version in wrappers.BufferWrapper.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clipping the reward to -1, 0, and 1 values: The obtained score can vary wildly
    among the games. For example, in Pong, you get a score of 1 for every ball you
    pass behind the opponent’s paddle. However, in some games, like KungFuMaster,
    you get a reward of 100 for every enemy killed. This spread in reward values makes
    our loss have completely different scales between the games, which makes it harder
    to find common hyperparameters for a set of games. To fix this, the reward just
    gets clipped to the range −1…1\. This is implemented in the ClipRewardEnv wrapper.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rearrange observation dimensions to meet the PyTorch convolution layer: As
    we’re going to use convolution, our tensors have to be rearranged the way PyTorch
    expects them. The Atari environment returns the observation in a (height, width,
    color) format, but the PyTorch convolution layer wants the channel layer to come
    first. This is implemented in wrappers.ImageToPyTorch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of those wrappers are implemented in the stable-baseline3 library, which
    provides the AtariWrapper class that applies wrappers in the required order, according
    to the constructor’s parameters. It also detects the underlying environment properties
    and enables FireResetEnv if needed. Not all of the wrappers are required for the
    Pong game, but you should be aware of existing wrappers, just in case you decide
    to experiment with other games. Sometimes, when the DQN does not converge, the
    problem is not in the code but in the wrongly wrapped environment. I once spent
    several days debugging convergence issues, which were caused by missing the FIRE
    button press at the beginning of a game!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the implementation of individual wrappers. We will start
    with classes provided by stable-baseline3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding wrapper presses the FIRE button in environments that require that
    for the game to start. In addition to pressing FIRE, this wrapper checks for several
    corner cases that are present in some games.
  prefs: []
  type: TYPE_NORMAL
- en: 'This wrapper combines the repetition of actions during K frames and pixels
    from two consecutive frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The goal of the following wrapper is to convert input observations from the
    emulator, which has a resolution of 210 × 160 pixels with RGB color channels,
    to a grayscale 84 × 84 image. It does this using CV2 library’s function cvtColor,
    which does a colorimetric grayscale conversion (which is closer to human color
    perception than a simple averaging of color channels), and then the image is resized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, we’ve used wrappers from stable-baseline3 (I skipped EpisodicLifeEnv
    wrapper, as it is a bit complicated and not very relevant); you can find the code
    of other available wrappers in the repo stable_baselines3/common/atari_wrappers.py.
    Now, let’s check out two wrappers from lib/wrappers.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The BufferWrapper class creates a stack (implemented with the deque class) of
    subsequent frames along the first dimension and returns them as an observation.
    The purpose is to give the network an idea about the dynamics of the objects,
    such as the speed and direction of the ball in Pong or how enemies are moving.
    This is very important information, which it is not possible to obtain from a
    single image.
  prefs: []
  type: TYPE_NORMAL
- en: One very important but not very obvious detail about this wrapper is that the
    observation method returns the copy of our buffered observations. This is very
    important, as we’re going to keep our observations in the replay buffer, so the
    copy is needed to avoid buffer modification on the future environment’s steps.
    In principle, we can avoid making a copy (and reduce our memory footprint four
    times) by keeping the episodes’ observations and indices in them, but it will
    require much more sophisticated data structure management. What is important currently
    is that this wrapper has to be the last in the chain of the wrappers applied to
    the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last wrapper is ImageToPyTorch, and it changes the shape of the observation
    from height, width, channel (HWC) to the channel, height, width (CHW) format required
    by PyTorch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The input shape of the tensor has a color channel as the last dimension, but
    PyTorch’s convolution layers assume the color channel to be the first dimension.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the file is a simple function that creates an environment with
    a name and applies all the required wrappers to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we’re using the AtariWrapper class from stable-baseline3 and
    disabling some unnecessary wrappers.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for wrappers; let’s look at our model.
  prefs: []
  type: TYPE_NORMAL
- en: The DQN model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model published in Nature has three convolution layers followed by two fully
    connected layers. All layers are separated by rectified linear unit (ReLU) nonlinearities.
    The output of the model is Q-values for every action available in the environment,
    without nonlinearity applied (as Q-values can have any value). The approach of
    having all Q-values calculated with one pass through the network helps us to increase
    speed significantly in comparison to treating Q(s,a) literally, feeding observations
    and actions to the network to obtain the value of the action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of the model is in Chapter06/lib/dqn_model.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To be able to write our network in a generic way, it was implemented in two
    parts: convolution and linear. The convolution part processes the imput image,
    which is a 4 × 84 × 84 tensor. The output from the last convolution filter is
    flattened into a one-dimensional vector and fed into two Linear layers.'
  prefs: []
  type: TYPE_NORMAL
- en: Another small problem is that we don’t know the exact number of values in the
    output from the convolution layer produced with the input of the given shape.
    However, we need to pass this number to the first fully connected layer constructor.
    One possible solution would be to hard-code this number, which is a function of
    the input shape and the last convolution layer configuration (for 84 × 84 input,
    the output from the convolution layer will have 3,136 values); however, it’s not
    the best way, as our code will become less robust to input shape change. The better
    solution is to obtain the required dimension in runtime, by applying the convolution
    part to a fake input tensor. The dimension of the result would be equal to the
    number of parameters returned by this application. It would be fast, as this call
    would be done once on model creation, and it would also allow us to have generic
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final piece of the model is the forward() function, which accepts the 4D
    input tensor. The first dimension is the batch size and the second is the color
    channel, which is our stack of subsequent frames; the third and fourth are image
    dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, before applying our network, we perform the scaling and type conversion
    of the input data. This requires a bit of explanation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every pixel in the Atari image is represented as an unsigned byte with a value
    from 0 to 255\. This is convenient in two aspects: memory efficiency and GPU bandwidth.
    From the memory standpoint, we should keep environment observations as small as
    possible because our replay buffer will keep thousands of observations, and we
    want to keep it small. On the other hand, during the training, we need to transfer
    those observations into GPU memory to calculate the gradients and update the network
    parameters. The bandwidth between the main memory and GPU is a limited resource,
    so it also makes sense to keep observations as small as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: That’s why we keep observations as a numpy array with dtype=uint8, and the input
    tensor to the network is ByteTensor. But the Conv2D layer expects the float tensor
    as an input, so by dividing the input tensor by 255.0, we scale to the 0…1 range
    and do type conversion. This is fast, as the input byte tensor is already inside
    the GPU memory. After that, we apply both parts of our network to the resulting
    scaled tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Training
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third module contains the experience replay buffer, the agent, the loss
    function calculation, and the training loop itself. Before going into the code,
    something needs to be said about the training hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'DeepMind’s Nature paper contained a table with all the details about the hyperparameters
    used to train its model on all 49 Atari games used for evaluation. DeepMind kept
    all those parameters the same for all games (but trained individual models for
    every game), and it was the team’s intention to show that the method is robust
    enough to solve lots of games with varying complexity, action space, reward structure,
    and other details using one single model architecture and hyperparameters. However,
    our goal here is much more modest: we want to solve just the Pong game.'
  prefs: []
  type: TYPE_NORMAL
- en: Pong is quite simple and straightforward in comparison to other games in the
    Atari test set, so the hyperparameters in the paper are overkill for our task.
    For example, to get the best result on all 49 games, DeepMind used a million-observations
    replay buffer, which requires approximately 20 GB of RAM to store it and lots
    of samples from the environment to populate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The epsilon decay schedule that was used is also not the best for a single
    Pong game. In the training, DeepMind linearly decayed epsilon from 1.0 to 0.1
    during the first million frames obtained from the environment. However, my own
    experiments have shown that for Pong, it’s enough to decay epsilon over the first
    150k frames and then keep it stable. The replay buffer also can be much smaller:
    10k transitions will be enough.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, I’ve used my parameters. These differ from the parameters
    in the paper but will allow us to solve Pong about 10 times faster. On a GeForce
    GTX 1080 Ti, the following version converges to a mean score of 19.0 in about
    50 minutes, but with DeepMind’s hyperparameters, it will require at least a day.
  prefs: []
  type: TYPE_NORMAL
- en: This speedup, of course, involves fine-tuning for one particular environment
    and can break convergence on other games. You are free to play with the options
    and other games from the Atari set.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the required modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define the hyperparameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'These two values set the default environment to train on and the reward boundary
    for the last 100 episodes to stop training. If you want, you can redefine the
    environment name using the command-line --env argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding parameters define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Our γ value used for the Bellman approximation (GAMMA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The batch size sampled from the replay buffer (BATCH_SIZE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum capacity of the buffer (REPLAY_SIZE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The count of frames we wait for before starting training to populate the replay
    buffer (REPLAY_START_SIZE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The learning rate used in the Adam optimizer, which is used in this example
    (LEARNING_RATE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How frequently we sync model weights from the training model to the target model,
    which is used to get the value of the next state in the Bellman approximation
    (SYNC_TARGET_FRAMES)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The last batch of hyperparameters is related to the epsilon decay schedule.
    To achieve proper exploration, we start with 𝜖 = 1.0 at the early stages of training,
    which causes all actions to be selected randomly. Then, during the first 150,000
    frames, 𝜖 is linearly decayed to 0.01, which corresponds to the random action
    taken in 1% of steps. A similar scheme was used in the original DeepMind paper,
    but the duration of decay was almost 10 times longer (so 𝜖 = 0.01 was reached
    after a million frames).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we define our type aliases and the dataclass Experience, used to keep
    entries in the experience replay buffer. It contains the current state, the action
    taken, the reward obtained, the termination or truncation flag, and the new state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The next chunk of code defines our experience replay buffer, the purpose of
    which is to keep the transitions obtained from the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Each time we do a step in the environment, we push the transition into the buffer,
    keeping only a fixed number of steps (in our case, 10k transitions). For training,
    we randomly sample the batch of transitions from the replay buffer, which allows
    us to break the correlation between subsequent steps in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the experience replay buffer code is quite straightforward: it basically
    exploits the capability of the deque class to maintain the given number of entries
    in the buffer. In the sample() method, we create a list of random indices and
    return a list of Experience items to be repackaged and converted into tensors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next class we need to have is an Agent, which interacts with the environment
    and saves the result of the interaction in the experience replay buffer that you
    have just seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: During the agent’s initialization, we need to store references to the environment
    and experience replay buffer, tracking the current observation and the total reward
    accumulated so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main method of the agent is to perform a step in the environment and store
    its result in the buffer. To do this, we need to select the action first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With the probability epsilon (passed as an argument), we take the random action;
    otherwise, we use the model to obtain the Q-values for all possible actions and
    choose the best. In this method, we use the PyTorch no_grad() decorator to disable
    gradient tracking during the whole method, as we don’t need them anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the action has been chosen, we pass it to the environment to get the next
    observation and reward, store the data in the experience buffer, and then handle
    the end-of-episode situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The result of the function is the total accumulated reward if we have reached
    the end of the episode with this step, or None otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function batch_to_tensors takes the batch of Experience objects and returns
    a tuple with states, actions, rewards, done flags, and new states repacked as
    PyTorch tensors of the corresponding types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When we work with states, we try to avoid memory copy (by using np.asarray()
    function), which is important, as Atari observations are large (4 frames with
    84 × 84 bytes each), and we have a batch of 32 such objects. Without this optimization,
    performance drops about 20 times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it is time for the last function in the training module, which calculates
    the loss for the sampled batch. This function is written in a form to maximally
    exploit GPU parallelism by processing all batch samples with vector operations,
    which makes it harder to understand when compared with a naïve loop over the batch.
    Yet this optimization pays off: the parallel version is more than two times faster
    than an explicit loop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reminder, here is the loss expression we need to calculate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![π (a |s) = P[At = a|St = s] ](img/eq24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We use the preceding equation for steps that aren’t at the end of the episode
    and the following for the final steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![π (a |s) = P[At = a|St = s] ](img/eq25.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the arguments, we pass our batch, the network that we are training, and the
    target network, which is periodically synced with the trained one.
  prefs: []
  type: TYPE_NORMAL
- en: The first model (passed as the parameter net) is used to calculate gradients;
    the second model in the tgt_net argument is used to calculate values for the next
    states, and this calculation shouldn’t affect gradients. To achieve this, we use
    the detach() function of the PyTorch tensor to prevent gradients from flowing
    into the target network’s graph. This function was described in Chapter [3](ch007.xhtml#x1-530003).
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the function, we call the function batch_to_tensors to repack
    the batch into individual tensor variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next line is a bit tricky:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Let’s discuss it in detail. Here, we pass observations to the first model and
    extract the specific Q-values for the taken actions, using the gather() tensor
    operation. The first argument to the gather() call is a dimension index that we
    want to perform gathering on (in our case, it is equal to 1, which corresponds
    to actions).
  prefs: []
  type: TYPE_NORMAL
- en: The second argument is a tensor of indices of elements to be chosen. Extra unsqueeze()
    and squeeze() calls are required to compute the index argument for the gather()
    function and to get rid of the extra dimensions that we created, respectively.
    (The index should have the same number of dimensions as the data we are processing.)
    In Figure [6.3](#x1-102122r3), you can see an illustration of what gather() does
    on the example case, with a batch of six entries and four actions.
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/file33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Transformation of tensors during a DQN loss calculation'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the result of gather() applied to tensors is a differentiable
    operation that will keep all gradients with respect to the final loss value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we disable the gradients’ calculations (which ends up in a small speedup),
    apply the target network to our next state observations, and calculate the maximum
    Q-value along the same action dimension, 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The function max() returns both maximum values and indices of those values (so
    it calculates both max and argmax), which is very convenient. However, in this
    case, we are interested only in values, so we take the first entry of the result
    (max values).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we make one simple but very important transformation: if the transition
    in the batch is from the last step in the episode, then our value of the action
    doesn’t have a discounted reward for the next state, as there is no next state
    from which to gather the reward. This may look minor, but it is very important
    in practice; without this, training will not converge (I personally have wasted
    several hours debugging this case).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next line, we detach the value from its computation graph to prevent
    gradients from flowing into the NN used to calculate the Q approximation for the
    next states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is important, as without this, our backpropagation of the loss will start
    to affect both predictions for the current state and the next state. However,
    we don’t want to touch predictions for the next state, as they are used in the
    Bellman equation to calculate the reference Q-values. To block gradients from
    flowing into this branch of the graph, we use the detach() method of the tensor,
    which returns the tensor without connection to its calculation history.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we calculate the Bellman approximation value and the mean squared
    error loss:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the full picture of the loss function calculation code, let’s look at
    this function in full:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This ends our loss function calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the code is our training loop. To begin with, we create a parser
    of command-line arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Our script allows us to specify a device for computation and train on environments
    that are different from the default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we create our environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Our environment has all the required wrappers applied, the NN that we are going
    to train, and our target network with the same architecture. At first, they will
    be initialized with different random weights, but it doesn’t matter much, as we
    will sync them every 1k frames, which roughly corresponds to one episode of Pong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we create our experience replay buffer of the required size and pass
    it to the agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Epsilon is initially initialized to 1.0 but will be decreased every iteration.
    Here are the last things we do before the training loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We create an optimizer, a buffer for full episode rewards, a counter of frames
    and several variables to track our speed, and the best mean reward reached. Every
    time our mean reward beats the record, we will save the model in the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of the training loop, we count the number of iterations completed
    and decrease epsilon according to our schedule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Epsilon will drop linearly during the given number of frames (EPSILON_DECAY_LAST_FRAME=150k)
    and then be kept on the same level as EPSILON_FINAL=0.01.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this block of code, we ask our agent to make a single step in the environment
    (using our current network and value for epsilon):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This function returns a float value only if this step is the final step in
    the episode. In that case, we report our progress. Specifically, we calculate
    and show, both in the console and in TensorBoard, these values:'
  prefs: []
  type: TYPE_NORMAL
- en: Speed as a count of frames processed per second
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Count of episodes played
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean reward for the last 100 episodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current value for epsilon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Every time our mean reward for the last 100 episodes reaches a maximum, we
    report this and save the model parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If our mean reward exceeds the specified boundary, then we stop training. For
    Pong, the boundary is 19.0, which means winning more than 19 from 21 total games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we check whether our buffer is large enough for training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: First, we should wait for enough data to be accumulated, which in our case is
    10k transitions. The next condition syncs parameters from our main network to
    the target network every SYNC_TARGET_FRAMES, which is 1k by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last piece of the training loop is very simple but requires the most time
    to execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Here, we zero gradients, sample data batches from the experience replay buffer,
    calculate loss, and perform the optimization step to minimize the loss.
  prefs: []
  type: TYPE_NORMAL
- en: Running and performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example is demanding on resources. On Pong, it requires about 400k frames
    to reach a mean reward of 17 (which means winning more than 80% of games). A similar
    number of frames will be required to get from 17 to 19, as our learning progress
    will saturate, and it will be hard for the model to “polish the policy” and further
    improve the score. So, on average, a million game frames are needed to train it
    fully. On the GTX 1080Ti, I have a speed of about 250 frames per second, which
    is about an hour of training. On a CPU (i5-7600k), the speed is much slower, about
    40 frames per second, which will take about seven hours. Remember that this is
    for Pong, which is relatively easy to solve. Other games might require hundreds
    of millions of frames and a 100 times larger experience replay buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Chapter [8](ch012.xhtml#x1-1240008), we will look at various approaches
    found by researchers since 2015 that can help to increase both training speed
    and data efficiency. Chapter [9](ch013.xhtml#x1-1600009) will be devoted to engineering
    tricks to speed up RL methods’ performance. Nevertheless, for Atari, you will
    need resources and patience. The following figure shows a chart with reward dynamics
    during the training:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/B22150_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Dynamics of average reward calculated over the last 100 episodes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at the console output from our training process (only the beginning
    of the output is shown):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: During the first 10k steps, our speed is very high, as we don’t do any training,
    which is the most expensive operation in our code. After 10k, we start sampling
    the training batches and the performance drops to more representative numbers.
    During the training, the performance also decreases slightly, just because of
    the epsilon decrease. When 𝜖 is high, the actions are chosen randomly. As 𝜖 approaches
    zero, we need to perform inference to get Q-values for action selection, which
    also costs time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several dozens of games later, our DQN should start to figure out how to win
    1 or 2 games out of 21, and an average reward begins to grow (this normally happens
    around 𝜖 = 0.5):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, after many more games, our DQN can finally dominate and beat the (not
    very sophisticated) built-in Pong AI opponent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Due to randomness in the training process, your actual dynamics might differ
    from what is displayed here. In some rare cases (1 run from 10 according to my
    experiments), the training does not converge at all, which looks like a constant
    stream of rewards −21 for a long time. This is not an uncommon situation in deep
    learning (due to the randomness of the training) and might occur even more often
    in RL (due to the added randomness of environment communication). If your training
    doesn’t show any positive dynamics for the first 100k–200k iterations, you should
    restart it.
  prefs: []
  type: TYPE_NORMAL
- en: Your model in action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The training process is just one part of the picture. Our final goal is not
    only to train the model; we also want our model to play the game with a good outcome.
    During the training, every time we update the maximum of the mean reward for the
    last 100 games, we save the model into the file PongNoFrameskip-v4-best_<score>.dat.
    In the Chapter06/03_dqn_play.py file, we have a program that can load this model
    file and play one episode, displaying the model’s dynamics.
  prefs: []
  type: TYPE_NORMAL
- en: The code is very simple, but it can be like magic seeing how several matrices,
    with just a million parameters, can play Pong with superhuman accuracy by observing
    only the pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the familiar PyTorch and Gym modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The script accepts the filename of the saved model and allows the specification
    of the Gym environment (of course, the model and environment have to match):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, you have to pass option -r with the name of a nonexistent directory,
    which will be used to save a video of your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is also not very complicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We create the environment, wrap it in the RecordVideo wrapper, create the model,
    and then we load weights from the file passed in the arguments. The argument map_location,
    passed to the torch.load() function, is needed to map the loaded tensor location
    from the GPU to the CPU. By default, torch tries to load tensors on the same device
    where they were saved, but if you copy the model from the machine you used for
    training (with a GPU) to a laptop without a GPU, the locations need to be remapped.
    Our example doesn’t use the GPU at all, as inference is fast enough without acceleration.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is almost an exact copy of the Agent class’ method play_step() from the
    training code, without the epsilon-greedy action selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We just pass our observation to the agent and select the action with the maximum
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the code is also simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We pass the action to the environment, count the total reward, and stop our
    loop when the episode ends. After the episode, we show the total reward and the
    number of times that the agent executed the action.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this YouTube playlist, you can find recordings of the gameplay at different
    stages of the training: [https://www.youtube.com/playlist?list=PLMVwuZENsfJklt4vCltrWq0KV9aEZ3ylu](https://www.youtube.com/playlist?list=PLMVwuZENsfJklt4vCltrWq0KV9aEZ3ylu).'
  prefs: []
  type: TYPE_NORMAL
- en: Things to try
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are curious and want to experiment with this chapter’s material on your
    own, then here is a shortlist of directions to explore. Be warned though: they
    can take lots of time and may cause you some moments of frustration during your
    experiments. However, these experiments are a very efficient way to really master
    the material from a practical point of view:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to take some other games from the Atari set, such as Breakout, Atlantis,
    or River Raid (my childhood favorite). This could require the tuning of hyperparameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative to FrozenLake, there is another tabular environment, Taxi,
    which emulates a taxi driver who needs to pick up passengers and take them to
    a destination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play with Pong hyperparameters. Is it possible to train faster? OpenAI claims
    that it can solve Pong in 30 minutes using the asynchronous advantage actor-critic
    method (which is a subject of Part 3 of this book). Maybe it’s possible with a
    DQN.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you make the DQN training code faster? The OpenAI Baselines project has
    shown 350 FPS using TensorFlow on GTX 1080 Ti. So, it looks like it’s possible
    to optimize the PyTorch code. We will discuss this topic in Chapter [9](ch013.xhtml#x1-1600009),
    but meanwhile, you can do your own experiments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the video recording, you might notice that models with a mean score around
    zero play quite well. In fact, I had the impression that those models play better
    than models with mean scores of 10–19\. This might be the case due to overfitting
    to the particular game situations. Could you try to fix this? Maybe it would be
    possible to use a generative adversarial network-style approach to make one model
    play with another?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you get the Ultimate Pong Dominator model with a mean score of 21? It shouldn’t
    be very hard – the learning rate decay is the obvious method to try.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of new and complex material. You became familiar
    with the limitations of value iteration in complex environments with large observation
    spaces, and we discussed how to overcome them with Q-learning. We checked the
    Q-learning algorithm on the FrozenLake environment and discussed the approximation
    of Q-values with NNs, as well as the extra complications that arise from this
    approximation.
  prefs: []
  type: TYPE_NORMAL
- en: We covered several tricks with DQNs to improve their training stability and
    convergence, such as an experience replay buffer, target networks, and frame stacking.
    Finally, we combined those extensions into one single implementation of DQN that
    solves the Pong environment from the Atari games suite.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a quick look at higher-level RL libraries,
    and after that, we will take a look at a set of tricks that researchers have found
    since 2015 to improve DQN convergence and quality, which (combined) can produce
    state-of-the-art results on most of the 54 (newly added) Atari games. This set
    was published in 2017, and we will analyze and reimplement all of the tricks.
  prefs: []
  type: TYPE_NORMAL
