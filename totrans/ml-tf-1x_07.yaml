- en: Making Money with Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve used TensorFlow mostly for image processing, and, to a lesser
    extent, for text sequence processing. In this chapter, we will tackle a specific
    type of tabular data: time-series, data.'
  prefs: []
  type: TYPE_NORMAL
- en: The time series data comes from many domains with usually one commonality—the
    only field changing constantly is a time or sequence field. It is common in a
    variety of fields, but especially common in economics, finance, health, medicine,
    environmental engineering, and control engineering. We'll dive into examples throughout
    the chapter, but the key thing to remember is that order matters. Unlike in previous
    chapters, where we shuffled our data freely, time series data cannot be shuffled
    that way without losing meaning. An added complexity can be the availability of
    data itself; if we have data available up until the current time with no further
    historical data to capture, no amount of data collection will possibly produce
    more—you are bound by time-based availability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, we''re going to dive into an area with copious amounts of data: the
    financial world. We''ll explore some types of things hedge funds and other sophisticated
    investors may do with a time series data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What a time series data is and its special properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of input and approaches investments firms may use in their quantitative
    and ML-driven investment efforts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Financial time series data and how it is obtained; we'll obtain some live financial
    data as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application of modified convolutional neural networks to finance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inputs and approaches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Investment firms' internal proprietary trading groups use a large variety of
    means to invest, trade, and make money. Hedge funds, which are relatively unregulated,
    use an even broader, more interesting, and more sophisticated means for investment.
    Some investments are gut-driven or driven by a great deal of thinking. Others
    are largely filter-driven, algorithmic, or signal-driven. Both approaches are
    fine, but we'll of course focus on the latter category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amongst the quantitative approaches, there are numerous techniques; some of
    them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Valuation based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anomaly and signal based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External signal based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering and segmentation-based cohort analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of these approaches will use traditional machine learning techniques, such
    as K-Nearest Neighbors, Naive Bayes, and Support Vector Machines. Cohort analysis,
    in particular, is almost a perfect fit for KNN-type approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another popular technique is sentiment analysis and crowd-sentiment-based signals.
    We covered this in the previous chapter as we gauged text sentiment and classified
    paragraphs of text into basic categories: positive, negative, happy, angry, and
    so on. Imagine if we sourced more data and filtered out everything except those
    involving particular stocks, we''d be able to get a valence on stocks. Now, imagine
    we had a source of such text that was broad (possibly global), high volume, and
    high velocity—actually, there is no need to imagine, as all of this entered the
    scene in the past decade. Twitter makes their *firehose* available via an API,
    as does Facebook, and a host of other social media platforms. Some hedge funds,
    in fact, consume the entire firehose of Twitter and Facebook data and attempt
    to extract public sentiment on stocks, market sectors, commodities, and the like.
    However, this is an external NLP-driven signal-based investment strategy that
    practitioners use to predict the directionality and/or intensity of a time series.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll use internal measures using the time series itself to
    predict future entries on the time series. Predicting the actual future entry
    is actually a very difficult task, and it turns out, not entirely necessary. Often,
    just a viewpoint in one direction is sufficient. A view on the direction combined
    with the intensity of movement is better.
  prefs: []
  type: TYPE_NORMAL
- en: For many types of investing, even the viewpoint might not give you complete
    assurance, rather something more right than wrong on average can be sufficient.
    Imagine betting a penny per flip of a coin—if you could be right 51% of the time,
    and if you had the ability to play the game thousands of times, it may be enough
    to be profitable, as you would gain more than you lose.
  prefs: []
  type: TYPE_NORMAL
- en: This all bodes well for machine learning based efforts where we may not have
    100% confidence in our answers but may have good predictive ability statistically.
    Net-net we want to be ahead because even a slight leg-up can be multiplied by
    thousands of cycles to produce substantial profits.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by grabbing some data. For the purposes of this chapter, we'll use
    data from Quandl, a longtime favorite of technically adept independent investors.
    Quandl makes data available on many stocks using a number of mechanisms. One easy
    mechanism is via a URL API. To get stock data on, say, Google Stock, we can click
    on [https://www.quandl.com/api/v3/datasets/WIKI/GOOG/data.json](https://www.quandl.com/api/v3/datasets/WIKI/GOOG/data.json).
    Similarly, we can replace `GOOG` with other index codes to grab data on other
    stocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is fairly easy to automate via Python; we will use the following code
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So, here, in the `stock_data` variable, you'll have the stock data variable
    from WIKI/GOOG into the `stock_data` variable, downloaded from the formatted URL
    between the dates `2010-01-01` and `2015-01-01`. The `column_index = 4` variables
    is telling the server to get only the closing values from the history.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can find this chapter's code in your GitHub repository—([https://github.com/saifrahmed/MLwithTF/tree/master/book_code/chapter_07](https://github.com/saifrahmed/MLwithTF/tree/master/book_code/chapter_07)).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what are these closing values? Well, stock prices fluctuate every day.
    They open with a certain value and they reach a certain high value and a certain
    low value within a day, and, at the end of the day, they close with a certain
    value. The following image shows how the stock prices change within each day:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50078c32-8ab0-4418-b652-2f5e7ae968cd.png)'
  prefs: []
  type: TYPE_IMG
- en: So, after the stock opens, you can invest in them and buy shares. At the end
    of the day, you'll have either a profit or a loss, depending on the closing values
    of those shares bought. Investors use different techniques to predict which stocks
    have the potential to rise on a particular day, and, depending on their analysis,
    they invest in shares.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching the problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will find out whether the stock prices will rise or fall
    depending on the rises and falls of markets in other time zones (such that their
    closing time is earlier than the stock in which we want to invest in). We will
    analyze the data from European markets that close about 3 or 4 hours before the
    American stock markets. From Quandl, we will get the data from the following European
    markets:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WSE/OPONEO_PL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WSE/VINDEXUS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WSE/WAWEL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WSE/WIELTON`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And we will predict the closing rise and fall for the following American market:
    WIKI/SNPS.'
  prefs: []
  type: TYPE_NORMAL
- en: We will download all the market data, view the downloaded graphs for the markets'
    closing values, and modify the data so that it can be trained on our networks.
    Then, we'll see how our networks perform on our assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: The code and analysis techniques used in this chapter are inspired by Google's
    Cloud Datalab notebook found at [https://github.com/googledatalab/notebooks/blob/master/samples/TensorFlow/Machine%20Learning%20with%20Financial%20Data.ipynbhere](https://github.com/googledatalab/notebooks/blob/master/samples/TensorFlow/Machine%20Learning%20with%20Financial%20Data.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the required data and modify it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the original and modified data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract features from the modified data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare for training and test out the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Training.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading and modifying data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will download the data from the sources mentioned in the `codes` variable,
    and we will put them into our `closings` data frame. We will store the original
    data, `scaled` data, and the `log_return`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We scaled the data so that the stock values stay between `0` and `1`; this is
    helpful for minimizing compared to other stock values. It will help us see trends
    in the stock compared to other markets and will make it visually easier to analyze.
  prefs: []
  type: TYPE_NORMAL
- en: The log returns help us get a graph of the market rising and falling compared
    to the previous day.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's see how our data looks.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code snippet will plot the data we downloaded and processed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The original market data to close values. As you can see here, the value for **WAWEL** is
    a couple of magnitudes larger than the other markets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a3c3d86-9492-4649-90f1-00f1c0d60d99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The closing values for WAWEL visually reduced the trends in data for the other
    market values. We will scale this data so we can see it better. Take a look at
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e57ad309-ca26-4e67-b7d4-a3e6575dfcca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The scaled market values help us visualize the trends better. Now, let''s see
    how the `log_return` looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fd72903-21e5-4640-a63e-f49a3662fb31.png)'
  prefs: []
  type: TYPE_IMG
- en: The log returns the markets' closing values
  prefs: []
  type: TYPE_NORMAL
- en: Extracting features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will extract the required features to train and test our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We are storing all our features and labels in the `features_and_label` variable.
    The `SNPS_log_return_positive` and `SNPS_log_return_negative` keys store the point
    where the log returns for SNPS are positive and negative, respectively. They are
    `1` if true and `0` if false. These two keys will act as the labels for the network.
  prefs: []
  type: TYPE_NORMAL
- en: The other keys are to store the values of other markets for the last 3 days
    (and for the preceding 3 days for SNPS because today's value won't be available
    to us for this market).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for training and testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we''ll split our features into `train` and `test` subsets. We won''t be
    randomizing our data because, in time series for financial markets, the data comes
    every day in a regular manner and we have to follow it like it is. You can''t
    predict the past behavior if you train for the future data because that would
    be useless. We are always interested in the future behavior of the stock market:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Building the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The network model to train our time series looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is just a simple network with two hidden layers.
  prefs: []
  type: TYPE_NORMAL
- en: Training
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s train our network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The testing of our network looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Taking it further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose you just trained a nifty classifier showing some predictive power over
    the markets, should you start trading? Much like with the other machine learning
    projects we''ve done to date, you will need to test on an independent test set.
    In the past, we''ve often cordoned off our data into the following three sets:'
  prefs: []
  type: TYPE_NORMAL
- en: The training set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development set, aka the validation set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can do something similar to our current work, but the financial markets give
    us an added resource—ongoing data streams!
  prefs: []
  type: TYPE_NORMAL
- en: We can use the same data source we used for our earlier pulls and continue to
    pull more data; essentially, we have an ever-expanding, unseen dataset! Of course,
    some of this depends on the frequency of the data that we use—if we operate on
    daily data, it will take a while to accomplish this. Operating on hourly or per-minute
    data makes this easier as we'll have more data quickly. Operating on tick-level
    data, based on the volume of quotes, is usually even better.
  prefs: []
  type: TYPE_NORMAL
- en: As real money can potentially be at stake here, most people will typically paper
    trade—essentially, run the system almost live, but not actually spend any money
    and instead just keep track of how the system will operate when live. If this
    works, then the next step will be to trade it live, that is, with real money (usually,
    a small amount to test the system).
  prefs: []
  type: TYPE_NORMAL
- en: Practical considerations for the individual
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose you trained a nifty classifier and also showed good results over a
    blind or live set, now should you start trading? While it is possible, it isn''t
    so easy. The following are some reasons why:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Historical analyses versus streaming data**: This historical data is often
    cleansed and near perfect, but streaming data does not offer such benefits. You
    will need code to evaluate the stream of data and throw out potentially unreliable
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bid-ask spread**: This is the biggest surprise novice''s face. There are
    actually two prices in the marketplace: the price at which you can buy and the
    one at which you can sell. You don''t both buy and sell at the typical market
    price you see (that is just the last meeting point on the two, called the last
    price). Buying a holding and immediately selling it loses money because of this
    gap, so net-net, you are already at a loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transaction costs**: This can be as small as a $1/trade, but it is still
    a hurdle and one that needs to be surpassed before a strategy can become profitable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Taxes**: This is often forgotten, but probably because taxes indicate net
    gains, which is usually a good thing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exit ability**: Just because you can sell theoretically does not mean there
    is actually a market available to sell your holding, and, even if there is, possibly
    not for your entire holding. Guess what? Yet more coding is required. This time,
    look at bid prices, volumes on those prices, and the depth of the book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volume and liquidity**: Just because the signal tells you to buy doesn''t
    mean there is sufficient volume in the market to purchase; you may be seeing just
    the top of the book with very little actual volume underneath. More coding is
    required!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrations with trading APIs**: Calling libraries is easy, but not so much
    when money is involved. You''ll need trading agreements, API agreements, and the
    like. However, tens of thousands of individuals have done this and Interactive
    Brokers is the most popular brokerage for those seeking APIs to buy and sell holdings.
    Conveniently, they also have an API to provide market data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skills learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you should have learned the following skills:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the time-series data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a pipeline for the time-series data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating primary data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating training and test sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Machine learning on financial data is no different from the many other data
    we use and, in fact, we used a network just as we did for other datasets. There
    are other options we can use, but the general approach stays the same. Especially
    when transacting money, we will find that the surrounding code becomes larger
    than ever relative to the actual machine learning portion of the code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can use machine learning for medical
    purposes.
  prefs: []
  type: TYPE_NORMAL
