- en: Getting started with TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow is an open source deep learning library by Google. It provides primitives
    for defining functions on tensors and automatically computing their derivatives.
    A tensor can be represented as a multidimensional array of numbers. Scalar, Vector,
    and Matrix are types of tensors. TensorFlow is mainly used to design computational
    graphs, build, and train deep learning models. The TensorFlow library does numerical
    computations using data flow graphs, where the nodes represent mathematical operations
    and the edges represent the data points (usually multidimensional arrays or tensors
    that are transmitted between these edges).
  prefs: []
  type: TYPE_NORMAL
- en: Environment setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is best to use an IDE such as PyCharm to edit Python code; it provides faster
    development tools and coding assistance. Code completion and inspection makes
    coding and debugging faster and simpler, ensuring that you focus on the end goal
    of programming neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'TensorFlow provides APIs for multiple languages: Python, C++, Java, Go, and
    so on. We will download a version of TensorFlow that will enable us to write the
    code for deep learning models in Python. On the TensorFlow installation website,
    we can find the most common ways and latest instructions to install TensorFlow
    using virtualenv, pip, and Docker.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps describe how to set up a local development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Pycharm community edition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the latest Python version on Pycharm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to Preferences, set up the python interpreter, and install the latest version
    of TensorFlow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a0d7a22e-da9c-4477-827f-b3a6dcc80db6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'TensorFlow will now appear in the installed packages list. Click on OK. Now
    test your installation with a program such as hello world:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlow comparison with Numpy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow and Numpy are both N-dimensional array libraries. TensorFlow additionally
    allows us to create tensor functions and compute derivatives. TensorFlow has become
    one of the major libraries used for deep learning as it is incredibly efficient
    and can run on GPUs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following program describes how `TensorFlow` and `numpy` can be used to
    perform similar operations such as creating tensors of a `(3,3)` shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Computational graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow is based on building a computational graph. A computational graph
    is a network of nodes, where each node defines an operation running a function;
    this can be as plain as addition or subtraction, or as complicated as a multivariate
    equation. TensorFlow programs are structured in a construction phase that assembles
    a graph and an execution phase that utilizes a session object to execute operations
    in the graph.
  prefs: []
  type: TYPE_NORMAL
- en: An operation is referred to as the op and can return zero or more tensors, which
    can be used later in the graph. Each op can be given a constant, array, or n-dimensional
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default graph gets instantiated when the TensorFlow library is imported.
    Constructing a graph object instead of using the default graph is useful when
    creating multiple models in one file that do not depend on each other. Constants
    and operations are added to the graph in TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables and operations applied outside of `newGraph.as_default()` will get
    added to the default graph, which is created when the library is imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Session objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A session in TensorFlow encapsulates the environment in which tensor objects
    are evaluated. Sessions can have their private variables, queues, and readers
    that are designated. We should use the close method at the end of the session.
  prefs: []
  type: TYPE_NORMAL
- en: 'The session has three arguments, which are optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Target`: The execution engine to connect to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graph`: The graph object to be started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`: This is a ConfigProto protocol buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To run a single step of the TensorFlow computation, the step function is invoked
    and necessary dependencies of the graph are executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`sess.run(c)` in the currently active session!'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `tf.InteractiveSession()` function is an easy way of keeping a default
    session open in `ipython`. The `sess.run(c)` is an example of a TensorFlow Fetch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When training a model, we use variables to hold and update the parameters. Variables
    are like in-memory buffers containing tensors. All tensors we used previously
    were constant tensors, not variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables are managed or maintained by the session object. Variables persist
    between sessions, which is useful because tensor and operation objects are immutable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'TensorFlow variables must be initialized before they have values, which is
    in contrast with constant tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetching variable states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow models may have hundreds of variables. `tf.variable_scope()` provides
    a simple name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To manage the complexity of models and break down into unique pieces, TensorFlow
    has scopes. Scopes are extremely simple and help when using TensorBoard. Scopes
    can also be nested inside of other scopes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example shows how to use the reuse option to understand the behavior
    of `get_variable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Data input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Input external data to TensorFlow objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Placeholders and feed dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using `tf.convert_to_tensor()` to input data is convenient but it doesn''t
    scale. Use `tf.placeholder` variables (dummy nodes that provide entry points for
    data to a computational graph). A `feed_dict` is a Python dictionary mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Auto differentiation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Auto differentiation is also known as **algorithmic differentiation**, which
    is an automatic way of numerically computing the derivatives of a function. It
    is helpful for computing gradients, Jacobians, and Hessians for use in applications
    such as numerical optimization. Backpropagation algorithm is an implementation
    of the reverse mode of automatic differentiation for calculating the gradient.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, using the `mnist` dataset, we calculate the loss
    using one of the `loss` functions. The question is: how do we fit the model to
    the data?'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use `tf.train.Optimizer` and create an optimizer. `tf.train.Optimizer.minimize(loss,
    var_list)` adds an optimization operation to the computational graph and automatic
    differentiation computes gradients without user input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: TensorBoard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow has a powerful built-in visualization tool called **TensorBoard**. It
    allows developers to interpret, visualize, and debug computational graphs. To
    visualize graph and metrics automatically in TensorBoard, TensorFlow writes events
    related to the execution of a computational graph to a particular folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example shows a computational graph of the analysis done earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45fbcf50-72f4-49f2-b52f-04dee2a903b6.png)'
  prefs: []
  type: TYPE_IMG
- en: To examine the graph, click on the graph tab on the top panel of TensorBoard.
    If the graph has several nodes, visualizing it in a single view can be hard. To
    make our visualization more accessible, we can organize the related operations
    into groups using `tf.name_scope` with specific names.
  prefs: []
  type: TYPE_NORMAL
