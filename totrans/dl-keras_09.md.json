["```py\n\"\"\nUtility functions to avoid warnings while testing both Keras 1 and 2.\n\"\"\"\nimport keras\nkeras_2 = int(keras.__version__.split(\".\")[0]) > 1 # Keras > 1\n\ndef fit_generator(model, generator, epochs, steps_per_epoch):\n    if keras_2:\n        model.fit_generator(generator, epochs=epochs, steps_per_epoch=steps_per_epoch)\n    else:\n        model.fit_generator(generator, nb_epoch=epochs, samples_per_epoch=steps_per_epoch)\n\ndef fit(model, x, y, nb_epoch=10, *args, **kwargs):\n    if keras_2:\n        return model.fit(x, y, *args, epochs=nb_epoch, **kwargs)\n    else:\n        return model.fit(x, y, *args, nb_epoch=nb_epoch, **kwargs)\n\ndef l1l2(l1=0, l2=0):\n    if keras_2:\n        return keras.regularizers.L1L2(l1, l2)\n    else:\n        return keras.regularizers.l1l2(l1, l2)\n\ndef Dense(units, W_regularizer=None, W_initializer='glorot_uniform', **kwargs):\n    if keras_2:\n        return keras.layers.Dense(units, kernel_regularizer=W_regularizer, kernel_initializer=W_initializer, **kwargs)\n    else:\n        return keras.layers.Dense(units, W_regularizer=W_regularizer, \n                                  init=W_initializer, **kwargs)\n\ndef BatchNormalization(mode=0, **kwargs):\n    if keras_2:\n        return keras.layers.BatchNormalization(**kwargs)\n    else:\n        return keras.layers.BatchNormalization(mode=mode, **kwargs)\n\ndef Convolution2D(units, w, h, W_regularizer=None, W_initializer='glorot_uniform', border_mode='same', **kwargs):\n    if keras_2:\n        return keras.layers.Conv2D(units, (w, h), padding=border_mode,\n                                   kernel_regularizer=W_regularizer,\n                                   kernel_initializer=W_initializer,\n                                   **kwargs)\n    else:\n        return keras.layers.Conv2D(units, w, h, border_mode=border_mode, W_regularizer=W_regularizer, init=W_initializer, **kwargs)\n\ndef AveragePooling2D(pool_size, border_mode='valid', **kwargs):\n    if keras_2:\n        return keras.layers.AveragePooling2D(pool_size=pool_size, \n                                             padding=border_mode, **kwargs)\n    else:\n        return keras.layers.AveragePooling2D(pool_size=pool_size, \n                                             border_mode=border_mode, **kwargs)\n\n```"]