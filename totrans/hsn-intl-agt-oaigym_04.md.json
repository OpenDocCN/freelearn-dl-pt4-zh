["```py\nimport gym\n```", "```py\n#!/usr/bin/env python\nfrom gym import envs\nenv_names = [spec.id for spec in envs.registry.all()]\nfor name in sorted(env_names):\n print(name)\n```", "```py\n(rl_gym_book) praveen@ubntu:~/rl_gym_book/ch4$python list_gym_envs.py\n```", "```py\n#!/usr/bin/env python\n\nimport gym\nimport sys\n\ndef run_gym_env(argv):\n    env = gym.make(argv[1]) # Name of the environment supplied as 1st argument\n    env.reset()\n    for _ in range(int(argv[2])):\n        env.render()\n        env.step(env.action_space.sample())\n    env.close()\n\nif __name__ == \"__main__\":\n    run_gym_env(sys.argv)\n```", "```py\n(rl_gym_book) praveen@ubntu:~/rl_gym_book/ch4$python run_gym_env.py Alien-ram-v0 2000\n```", "```py\n env = gym.make(\"ENVIRONMENT_NAME\") \n```", "```py\nobs = env.reset()\n```", "```py\nimport gym\nenv = gym.make(\"ENVIRONMENT_NAME\")\nobs = env.reset() # The first arrow in the picture\n# Inner loop (roll out)\naction = agent.choose_action(obs) # The second arrow in the picture\nnext_state, reward, done, info = env.step(action) # The third arrow (and more)\nobs = next_state\n# Repeat Inner loop (roll out)\n```", "```py\n#!/usr/bin/env python\nimport gym\nenv = gym.make(\"Qbert-v0\")\nMAX_NUM_EPISODES = 10\nMAX_STEPS_PER_EPISODE = 500\nfor episode in range(MAX_NUM_EPISODES):\n    obs = env.reset()\n    for step in range(MAX_STEPS_PER_EPISODE):\n        env.render()\n        action = env.action_space.sample()# Sample random action. This will be replaced by our agent's action when we start developing the agent algorithms\n        next_state, reward, done, info = env.step(action) # Send the action to the environment and receive the next_state, reward and whether done or not\n        obs = next_state\n\n        if done is True:\n            print(\"\\n Episode #{} ended in {} steps.\".format(episode, step+1))\n            break\n```", "```py\n#!/usr/bin/env python\nimport gym\nfrom gym.spaces import *\nimport sys\n\ndef print_spaces(space):\n    print(space)\n    if isinstance(space, Box): # Print lower and upper bound if it's a Box space\n        print(\"\\n space.low: \", space.low)\n        print(\"\\n space.high: \", space.high)\n\nif __name__ == \"__main__\":\n    env = gym.make(sys.argv[1])\n    print(\"Observation Space:\")\n    print_spaces(env.observation_space)\n    print(\"Action Space:\")\n    print_spaces(env.action_space)\n    try:\n        print(\"Action description/meaning:\",env.unwrapped.get_action_meanings())\n    except AttributeError:\n        pass\n```", "```py\n(rl_gym_book) praveen@ubuntu:~/rl_gym_book/ch4$ python get_observation_action_space.py CartPole-v0\n```", "```py\n(rl_gym_book) praveen@ubuntu:~/rl_gym_book/ch4$ python get_observation_action_space.py BipedalWalker-v2\n```"]