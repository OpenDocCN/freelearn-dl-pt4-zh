["```py\n    @classmethod\n def historic(cls, start='2013-04-28', stop=None,\n ticker='bitcoin', return_json=False):\n    start = start.replace('-', '')\n    if not stop:\n        stop = datetime.now().strftime('%Y%m%d')\n    base_url = 'https://coinmarketcap.com/currencies'\n```", "```py\n\n    url = '/{}/historical-10\\. data/?start={}&end={}'.format(ticker, start,\n    stop)\n    r = requests.get(url)\n```", "```py\n def train(self, data=None, epochs=300, verbose=0, batch_size=1):\n        self.train_history = self.model.fit(\n            x=self.X, y=self.Y,\n            batch_size=batch_size, epochs=epochs,\n            verbose=verbose, shuffle=False)\n    self.last_trained = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    return self.train_history\n```", "```py\n    X_train_new, Y_train_new = load_new_data()\n\n    model.fit(x=X_train_new, y=Y_train_new,\n    batch_size=1, epochs=100,\n    verbose=0)\n```", "```py\n    M = Model(data=model_data[0*7:7*40 + 7],\n        variable='close',\n        predicted_period_size=7)\n    M.build()\n    6 M.train()\n    for i in range(1, 10 + 1):\n M.train(model_data[i*7:7*(40 + i) + 7])\n```", "```py\n    old_data = model_data[0*7:7*48 + 7]\n    new_data = model_data[0*7:7*49 + 7]\n\n    M = Model(data=old_data,\n        variable='close',\n        predicted_period_size=7)\n    M.build()\n    M.train()\n\n M = Model(data=new_data,\n variable='close',\n predicted_period_size=7)\n M.build()\n M.train()\n```", "```py\n      $ jupyter notebook \n```", "```py\n      $ historic_data = CoinMarketCap.historic() \n```", "```py\n      $ model_data = # filter the dataset using pandas here \n```", "```py\n      M = Model(data=model_data,\n         variable='close',\n         predicted_period_size=7)\n      M.build()\n      M.train()\n      M.predict(denormalized=True) \n```", "```py\n      results = []\n      for i in range(A, B):\n         M.train(model_data[C:D])\n         results.append(M.evaluate()) \n```", "```py\n      old_data = model_data[0*7:7*48 + 7]\n      new_data = model_data[0*7:7*49 + 7] \n```", "```py\n      M = Model(data=old_data,\n        variable='close',\n        predicted_period_size=7)\n      M.build()\n      M.train()\n```", "```py\n    FROM python:3.6\n    COPY . /cryptonic\n    WORKDIR \"/cryptonic\"\n    RUN pip install -r requirements.txt\n    EXPOSE 5000\n    CMD [\"python\", \"run.py\"]\n\n```", "```py\n     $ docker build --tag cryptonic:latest\n```", "```py\n     $ docker run --publish 5000:5000 \\ \n             --detach cryptonic:latest\n```", "```py\n    version: \"3\"\n    services:\n    cache:\n    image: cryptonic-cache:latest\n    volumes: - $PWD/cache_data:/data\n    networks:- cryptonic\n    ports: - \"6379:6379\"\n        environment:\n            - MODEL_NAME=bitcoin_lstm_v0_trained.h5\n            - BITCOIN_START_DATE=2017-01-01\n            - EPOCH=300\n            - PERIOD_SIZE=7\n```", "```py\n     $ docker-compose up -d \n```", "```py\n    {\n    message: \"API for making predictions.\",\n    period_length: 7,\n    result: [\n        15847.7,\n        15289.36,\n        17879.07,\n    â€¦\n        17877.23,\n        17773.08\n    ],\n        success: true,\n        version: 1\n    } \n```", "```py\n      $ docker build --tag cryptonic:latest .    \n      $ docker build --tag cryptonic-cache:latest ./ cryptonic-cache/ \n```", "```py\n      BITCOIN_START_DATE = # Use other date here \n```", "```py\n      docker-compose up \n```"]