["```py\ntensorboard --logdir=/tmp/tensorlogs\n```", "```py\ntf_install_dir/ tensorflow/tensorboard --\nlogdir=/tmp/tensorlogs\n```", "```py\nnohup tensorboard --logdir=/tmp/tensorlogs &\n```", "```py\n   writer = tf.summary.FileWriter(\"/tmp/tensorlogs\",   \n   sess.graph) \n```", "```py\n    tf.summary.histogram('conv1_weights', conv1_weights) \n    tf.summary.histogram('conv1_biases', conv1_biases) \n    tf.summary.histogram('conv2_weights', conv2_weights) \n    tf.summary.histogram('conv2_biases', conv2_biases) \n    tf.summary.histogram('fc1_weights', fc1_weights) \n    tf.summary.histogram('fc1_biases', fc1_biases) \n    tf.summary.histogram('fc2_weights', fc2_weights) \n    tf.summary.histogram('fc2_biases', fc2_biases) \n```", "```py\n    loss += 5e-4 * regularizers \n```", "```py\n    tf.summary.scalar(\"loss\", loss) \n```", "```py\n     learning_rate = tf.train.exponential_decay( \n        0.01,  # Base learning rate. \n        batch * BATCH_SIZE,  # Current index into the    \n        dataset. \n        train_size,  # Decay step. \n        0.95,  # Decay rate. \n        staircase=True) \n```", "```py\n    tf.summary.scalar(\"learning_rate\", learning_rate) \n```", "```py\n    # Create a local session to run the training. \n    start_time = time.time() \n    with tf.Session() as sess: \n```", "```py\n    writer = tf.summary.FileWriter(\"/tmp/tensorlogs\",  \n    sess.graph) \n    merged = tf.summary.merge_all() \n```", "```py\n    l, lr, predictions = sess.run([loss, learning_rate,  \n    train_prediction], feed_dict=feed_dict) \n```", "```py\n    # Run the graph and fetch some of the nodes.       \n    sum_string, l, lr, predictions = sess.run([merged,  \n    loss,  \n    learning_rate, train_prediction],  \n    feed_dict=feed_dict) \n```", "```py\n    writer.add_summary(sum_string, step) \n```", "```py\n    sess = tf.Session(config=config) \n    sess.run(init) \n```", "```py\n    sess = tf.Session(config=config) \n    writer = tf.summary.FileWriter(\"/tmp/alexnet_logs\",  \n    sess.graph) \n    sess.run(init) \n```", "```py\npython alexnet_benchmark.py\ntensorboard --logdir /tmp/alexnet_logs\n```", "```py\n    with tf.name_scope('conv3') as scope: \n      kernel = tf.Variable(tf.truncated_normal([3, 3, 192, 384], \n                               dtype=tf.float32, \n                               stddev=1e-1), name='weights') \n      conv = tf.nn.conv2d(pool2, kernel, [1, 1, 1, 1], \n       padding='SAME') \n      biases = tf.Variable(tf.constant(0.0, shape=[384], \n       dtype=tf.float32), \n                         trainable=True, name='biases') \n      bias = tf.nn.bias_add(conv, biases) \n      conv3 = tf.nn.relu(bias, name=scope) \n      parameters += [kernel, biases] \n```"]