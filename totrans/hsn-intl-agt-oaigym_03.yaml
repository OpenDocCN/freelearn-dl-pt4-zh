- en: Getting Started with OpenAI Gym and Deep Reinforcement Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The introduction chapters gave you a good insight into the OpenAI Gym toolkit
    and reinforcement learning in general. In this chapter, we will jump right in
    and get you and your computer ready with all the required preparation, installations,
    and configurations to start developing your agents. More importantly, you will
    also find instructions to access the book's code repositories, which contain all
    the code you will need to follow this book in its entirety, along with several
    other code examples, useful instructions, and updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the code repository for this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Anaconda environment for working through this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install and configure OpenAI Gym and dependencies on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing tools, libraries, and dependencies for deep reinforcement learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code repository, setup, and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, let's make sure you have all the information to access the code
    repository for this book. The source code provides you with all the necessary
    code samples that we will discuss in this book and provides additional details
    on how to set up and run the training or testing scripts for each chapter specifically.
    To get started, head to the book's code repository on GitHub at the following
    link: [https://github.com/PacktPublishing/Hands-On-Intelligent-Agents-with-OpenAI-Gym](https://github.com/PacktPublishing/Hands-On-Intelligent-Agents-with-OpenAI-Gym).
  prefs: []
  type: TYPE_NORMAL
- en: Create a GitHub account if you do not already have one and fork the repository
    so that it is added to your own GitHub account. This is recommended as it allows
    you to make any changes to the code you prefer while following along, and also
    allow you to send a pull request when you have something cool to show and be featured
    on the book's blog!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can clone the repository to a folder named `HOIAWOG` in your home directory
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the book assumes that you have set up the code repository at this
    particular location: `~/HOIAWOG`. If you happen to change it for some reason,
    be sure to remember it and change some of the commands in the book accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are wondering why the directory name was chosen to be `HOIAWOG`, do
    not think anymore. It is an acronym for this book''s title: **Hands On Intelligent
    Agents With OpenAI Gym** (**HOIAWOG**)!'
  prefs: []
  type: TYPE_NORMAL
- en: The book's code repository will be kept up to date to take care of any changes
    in the external libraries or other software, so that the intelligent agent implementation
    code and other code samples are functional. Occasionally, new code and updates
    will also be added to help you explore developing intelligent agents further.
    To stay on top of the changes and be notified of updates, it is recommended you
    star the book's code repository from your GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Toward the end of [Chapter 1](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12), *Introduction
    to Intelligent Agents and Learning Environments*, we did a quick install of OpenAI
    Gym to get a sneak peak into the Gym. That was a minimal install, to get us started
    quickly. In the next section, we will go over the installation step by step and
    make sure everything you need to develop agents using the Gym is installed and
    configured properly. We will go over the different levels and methods of installation
    here so that you are aware of the installation process in general. You may end
    up modifying your system, or using another system at home or work, or changing
    your computer altogether. This section will make sure that you can get everything
    set up in the right way. Feel free to pick the installation method that is suitable
    for your use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only main prerequisite for using OpenAI Gym is Python 3.5+. To make further
    development easy and organized, we will use the Anaconda Python distribution.
    For those of you who are not familiar with Anaconda, it is a Python distribution (although
    a distribution for the R language is also available) that includes hundreds of
    popular machine learning and data science packages and comes with an easy-to-use
    package and virtual environment manager called *conda.* The good thing is that
    the Anaconda Python distribution is available for Linux, macOS, and Windows! Another
    main reason to use the Anaconda distribution is that it helps in easily creating,
    installing, managing, and upgrading an isolated Python virtual environment. This
    makes sure the code we learn about and develop in this book produces the same
    results, irrespective of the operating system we use. This will relieve you from
    solving dependency issues or library version mismatch issues that you would have
    had to handle manually if you were not using a Python distribution such as Anaconda.
    You will find that it just works, which is nice and cool. Let's get started and
    install the Anaconda Python distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt or Terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command uses the `wget` tool to fetch/download the installation script
    for Anaconda version 3-4.3 and saves it as `anaconda.sh` in your home directory.
    This command should work on macOS and Linux (Ubuntu, Kubuntu, and so on), which
    come with the `wget` tool pre-installed. Note that we are downloading a specific
    version of Anaconda (3-4.3). This will make sure we have the same configuration
    throughout this book. Do not worry if this is not the latest version available.
    You can always upgrade the distribution later using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`anaconda.sh` is a shell script that has all the things that are needed to
    install Anaconda on your system! If you are interested, you can open it using
    your favorite text editor to see how cleverly the binaries, the installation process
    instructions, and the shell commands have been all lumped together into a single
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now install the Anaconda Python distribution under your home directory.
    The following installation process is carefully laid out to make sure it works
    both on Linux and macOS systems. Before you enter the command, you should be aware
    of one thing. The following command will run the installer in *silent mode*. This
    means that it will use the default installation parameters and go ahead with the
    installation, without asking you yes/no for each and every configuration. This
    also means that you agree to the Anaconda distribution''s licensing terms. In
    case you want to manually go through the installation process step by step, run
    the following command without the arguments `-b` and `-f`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Wait for the installation process to complete and then we are done!
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using *conda* and the other goodness in the Anaconda Python distribution,
    we should make sure that your system knows where to find the Anaconda tools. Let''s
    add the Anaconda binaries directory by appending its path to the `PATH` environment
    variable, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I strongly advise you to add this line to the end of your `~/.bashrc` file so
    that whenever you open a new bash terminal, the Anaconda tools are accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can type the following command to make sure the installation was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command will just print the list of packages available in your default
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the conda environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have set up Anaconda, let's use conda to create a Python virtual
    environment, which we will use throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer a one-click install setup and do not want to go through the installation
    step by step, a greatly simplified way to create the environment with all the
    necessary packages installed is using the `conda_env.yaml` conda environment configuration
    file available in the book''s code repository. You can simply run the following
    command from the book''s code repository directory (`HOIAWOG`) which we created
    in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`praveen@ubuntu:~/HOIAWOG$ conda create -f conda_env.yaml -n rl_gym_book`'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we will just create a new minimal environment to proceed. Enter
    the following command in a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a conda environment named `rl_gym_book` with a Python3 interpreter.
    It will print some information about what is going to be downloaded and the packages
    that will be installed. You may be prompted with a yes/no question as to whether
    you want to proceed. Type `y` and hit *Enter*. Once the environment creation process
    is complete, you can activate that environment using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now see your command prompt''s prefix changing to look something like
    this, to signify that you are inside the `rl_gym_book` virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use this as an indicator as you progress through the chapters to know
    when commands have to be entered inside this environment and when commands can
    be entered outside the environment. To exit or deactivate the environment, you
    can simply type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Minimal install – the quick and easy way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OpenAI Gym is a Python package and is available in the **Python Package
    Index** (**PyPI**) repository. You can use `easy_install` or `pip` to fetch and
    install packages from the PyPI repository. `Pip` is a package management tool
    for Python, which most of you might be familiar with if you have experience scripting
    in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly check the installation actually went fine by running the following
    code. Create a `gym_install_test.py` file under the `~/rl_gym_book` directory,
    type/copy the following code into it, and save it. You can also download the `gym_quick_install_test.py`
    file from the book''s code repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try running the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This should pop up a new window showing a car/carton and a v-shaped mountain,
    and you should see the car moving left and right randomly. The mountain car window
    should look something like this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also see some values printed out to the console/Terminal that look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you saw this happening, then rejoice! You now have a (minimal) setup of OpenAI
    Gym!
  prefs: []
  type: TYPE_NORMAL
- en: Complete install of OpenAI Gym learning environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all environments are usable with the minimal installation. To be able to
    use most or all the environments available in the Gym, we will go through the
    installation of the dependencies and build OpenAI Gym from the latest source code
    on the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, we will need to install the required system packages first.
    Next, you will find instructions for both Ubuntu and macOS. Choose the set of
    instructions based on your development platform.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions for Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following commands were tested on Ubuntu 14.04 LTS and on Ubuntu 16.04 LTS,
    but should work in other/future Ubuntu releases as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the system packages needed by running the following command
    on the Terminal/console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This command will install the prerequisite system packages. Note that the `-y`
    flag will automatically say yes to confirm the installation of the package, without
    asking you to confirm manually. If you want to review the packages that are going
    to be installed for some reason, you may run the command without the flag.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On macOS, the number of additional system packages that need to be installed
    is less than with Ubuntu systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands from a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These commands will install the prerequisite system packages.
  prefs: []
  type: TYPE_NORMAL
- en: The robotics and control environment in OpenAI Gym make use of **Multi-Joint
    dynamics with Contact** (**MuJoCo**) as the physics engine to simulate the rigid
    body dynamics and other features. We briefly had a look at MuJoCo environments
    in [Chapter 1](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12), *Introduction
    to Intelligent Agents and Learning Environments* and learned that you can develop
    algorithms that can make a 2D robot walk, run, swim, or hop, or a 3D multi-legged
    robot walk or run using the MuJoCo environment. MuJoCo is a proprietary engine
    and therefore needs a license. Fortunately, we can get a free 30-day license!
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you are a student, they offer a 1 year free MuJoCo Pro personal license,
    which is even better! For others, after the 30 days, sadly it costs a hefty sum
    (~$500 USD) for a 1 -year license. We will not be using the MuJoCo environments
    in this book because not everyone may be able to get hold of a license. You can
    always apply what you learn in this book regarding other environments to the MuJoCo
    environments if you have a license. If you plan to use these environments, you
    will have to follow the instructions in the MuJoCo installation section next.
    If not, you can skip it and go to the next section to set up OpenAI Gym.
  prefs: []
  type: TYPE_NORMAL
- en: MuJoCo installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I hope you read the previous information box. MuJoCo is one odd library that
    we will encounter in this book because, unlike other libraries and software we
    use as part of this book, MuJoCo requires a license to use. The Python interface
    for MuJoCo, available in the Gym library, is compatible only with MuJoCo version
    1.31 as of the time this chapter was written, even though the latest available
    MuJoCo version is higher (1.50 at the time of writing this chapter). Follow these
    two steps to set up MuJoCo for use with OpenAI Gym environments:'
  prefs: []
  type: TYPE_NORMAL
- en: Download MuJoCo 1.31 for your platform (Linux/macOS) from this URL: [https://www.roboti.us/index.html](https://www.roboti.us/index.html)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain a MuJoCo Pro license from this URL: [https://www.roboti.us/license.html](https://www.roboti.us/license.html)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Completing the OpenAI Gym setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s update our version of pip first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s download the source code of OpenAI Gym from the GitHub repository
    into our home folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you get an error saying `git command not found` or something similar, you
    might have to install Git. On Ubuntu systems, you can install it by running this
    command, `sudo apt-get install git`. On macOS, if you don't have Git installed
    already, it will prompt you to install it when you run the `git clone` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now in the final stage of a complete Gym installation! If you got a
    MuJoCo license and followed the MuJoCo installation instructions successfully,
    then you can go ahead and complete a full installation by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you did not install MuJoCo, then this command will return errors. We will
    be installing the Gym environments that we will be using, other than MuJoCo (which
    requires a license to use). Make sure that you are still in the `gym`directory
    under your `home` folder, and also make sure that you are still inside the `rl_gym_book`
    conda environment. Your prompt should include the `rl_gym_book`prefix as follows,
    where `~/gym` means that the prompt is at the gym directory under the home folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here is a table summarizing the installation commands for installing the environments
    that have been discussed in [Chapter 1](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12), *Introduction
    to Intelligent Agents and Learning Environments*.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Environment** | **Installation command** |'
  prefs: []
  type: TYPE_TB
- en: '| Atari | `pip install -e ''.[atari]''` |'
  prefs: []
  type: TYPE_TB
- en: '| Box2D | `pip install -e ''.[box2d]''``conda install -c https://conda.anaconda.org/kne
    pybox2d` |'
  prefs: []
  type: TYPE_TB
- en: '| Classic control | `pip install -e ''.[classic_control]''` |'
  prefs: []
  type: TYPE_TB
- en: '| MuJoCo (requires license) | `pip install -e ''.[mujoco]''` |'
  prefs: []
  type: TYPE_TB
- en: '| Robotics (requires license) | `pip install -e ''.[robotics]''` |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s go ahead and install the environments we do not need a license to use.
    Run the following commands to install Atarti, Box2D, and the classic control environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run that code using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a window pop up that shows the BipedalWalker-v2 environment and
    the walker trying to randomly perform some actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, we have the Gym environment set up. What's next, you may ask. In the next
    section, we will set up the tools and libraries we need to develop deep reinforcement
    learning agents to train in these environments!
  prefs: []
  type: TYPE_NORMAL
- en: Installing tools and libraries needed for deep reinforcement learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 2](part0033.html#VF2I0-22c7fc7f93b64d07be225c00ead6ce12), *Reinforcement
    Learning and Deep Reinforcement Learning*, prepped you with the basics of reinforcement
    learning. With that theoretical background, we will be able to implement some
    cool algorithms. Before that, we will make sure we have the required tools and
    libraries at our disposal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can actually write cool reinforcement learning algorithms in Python without
    using any higher-level libraries. However, when we start to use function approximators
    for the value functions or the policy, and especially if we use deep neural networks
    as the function approximators, it is better to use highly optimized deep learning
    libraries instead of writing our own routines. A deep learning library is the
    major tool/library that we will need to install. There are different libraries
    out there today: PyTorch, TensorFlow, Caffe, Chainer, MxNet, and CNTK, to name
    a few. Each library has its own philosophy, merits, and demerits, depending on
    the use cases. We will be using PyTorch for developing the deep reinforcement
    learning algorithms in this book, due to its simplicity of use and dynamic graph
    definition. The algorithms we will discuss and the way we approach the implementation
    in this book will be explained in such a way that you can easily re-implement
    them using the framework of your choice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have a GPU on your machine, or if you do not plan to use your
    GPU for training, you may skip the GPU driver installation steps and can install
    a CPU-only binary version of PyTorch using the following conda command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that you will *not*be able to accelerate the training of some of the agents
    we will develop as part of this book, which can utilize a GPU for faster training.
  prefs: []
  type: TYPE_NORMAL
- en: Installing prerequisite system packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin by making sure we have the latest package versions from the Ubuntu
    upstream repositories. We can do that by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will install the prerequisite packages. Note
  prefs: []
  type: TYPE_NORMAL
- en: 'hat some of these packages may already have been installed on your system,
    but it is good to make sure we have them all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Installing Compute Unified Device Architecture (CUDA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do not have an Nvidia GPU or if you have an older Nvidia GPU that does
    not support CUDA, you can skip this step and move on to the next section, where
    we go over the PyTorch installation:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest CUDA driver for your Nvidia GPU from the official Nvidia
    website here: [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Linux under the operating system and your architecture (mostly x86_64),
    and then choose your Linux OS distribution (Ubuntu) version 14.04, 16.04, or 18.04,
    depending on your version, and select deb(local) as the installer type. That will
    download the cuda local installation file, named something like `cuda-repo-ubuntu1604-8-0-local_8.0.44-1_amd64`.
    Note your cuda version (8.0 in this case). We will use this CUDA version later
    while installing PyTorch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can then follow the instructions or run the following command to install
    CUDA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, you should now have Cuda successfully installed. To quickly
    check to see that everything went fine, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print out the Cuda version information, similar to the output shown
    in the following screenshot. Note that your output may be different, depending
    on the version of Cuda you installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you got an output similar to this, it's good news!
  prefs: []
  type: TYPE_NORMAL
- en: You may go ahead and install the latest **CUDA Deep Neural Network** (**cuDNN**) on
    your system. We will not cover the installation steps in this book, but the installation
    steps are straightforward and listed on the Nvidia official CuDNN download page
    here: [https://developer.nvidia.com/rdp/form/cudnn-download-survey](https://developer.nvidia.com/rdp/form/cudnn-download-survey).
    Note that you need to register for a free Nvidia developer account to download
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PyTorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now ready to install PyTorch! Fortunately, it is as simple as running
    the following command inside our `rl_gym_book`conda environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this command will install PyTorch with CUDA 8.0\. You noted the CUDA
    version that you installed before, and the command may change slightly depending
    on which CUDA version you installed. For example, if you installed CUDA 9.1, the
    command to install will be this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install pytorch torchvision cuda91 -c pytorch`'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the updated command to install at [http://pytorch.org](http://pytorch.org)
    based on your OS, package manager (conda or pip or from source), Python version
    (we use 3.5), and CUDA version.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it! Let''s quickly try importing the PyTorch library and make sure
    it works. Type or copy the following lines of code into a file named `pytorch_test.py`under
    the `~/rl_gym_book` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run this script inside the `rl_gym_book`conda environment. The following screenshot
    is provided as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that you may see different values for the tensor, and you may see different
    values when you run the script another time. It is because of the torch. The `Tensor()`
    function generates a random tensor of the given shape, (3, 3) in our case. PyTorch
    follows similar syntax to NumPy. If you are familiar with NumPy, you can pick
    up PyTorch easily. If you are not familiar with NumPy or PyTorch, it is advised
    that you follow the official PyTorch tutorial to get yourself acquainted with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that the folder name used in some of the sample console screenshots
    is `read rl_gym_book` rather than HOIAWOG. Both these directory names are interchangeable.
    In fact, they are symbolic links pointing to the same directory.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through the step-by-step setup process to install and
    configure our development environment using conda, OpenAI Gym, and Pytorch! This
    chapter helped us make sure that we have all the required tools and libraries
    installed to start developing our agents in Gym environments. In the next chapter,
    we will explore the features of Gym environments to understand how they work,
    and how we can use them to train our agents. In [Chapter 5](part0078.html#2ACBS0-22c7fc7f93b64d07be225c00ead6ce12),
    *Implementing Your First Learning Agent – Solving the Mountain Car Problem*, we
    will jump right into developing our first reinforcement learning agent to solve
    the mountain car problem! We will then gradually move on and implement more sophisticated
    reinforcement learning algorithms in the subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
