- en: Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Installing R with an IDE
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a Jupyter Notebook application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting with the basics of machine learning in R
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up deep learning tools/packages in R
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MXNet in R
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing TensorFlow in R
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing H2O in R
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing all three packages at once using Docker
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will get you started with deep learning and help you set up your
    systems to develop deep learning models. The chapter is more focused on giving
    the audience a heads-up on what is expected from the book and the prerequisites
    required to go through the book. The current book is intended for students or
    professionals who want to quickly build a background in the applications of deep
    learning. The book will be more practical and application-focused using R as a
    tool to build deep learning models.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed theory on deep learning, refer to *Deep Learning* by *Goodfellow
    et al. 2016.* For a machine learning background refer *Python Machine Learning*
    by S. Raschka, 2015.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the R programming language to demonstrate applications of deep
    learning. You are expected to have the following prerequisites throughout the
    book:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Basic R programming knowledge
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic understanding of Linux; we will use the Ubuntu (16.04) operating system
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic understanding of machine learning concepts
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Windows or macOS, a basic understanding of Docker
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing R with an IDE
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, let's install an IDE for R. For R the most popular IDEs are
    Rstudio and Jupyter. Rstudio is dedicated to R whereas Jupyter provide multi-language
    support including R. Jupyter also provides an interactive environment and allow
    you to combine code, text, and graphics into a single notebook.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R supports multiple operating systems such as Windows, macOS X, and Linux. The
    installation files for R can be downloaded from any one of the mirror sites at
    **Comprehensive R Archive Network** (**CRAN**) at [https://cran.r-project.org/](https://cran.r-project.org/).
    The CRAN is also a major repository for packages in R. The programming language
    R is available under both 32-bit and 64-bit architectures.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Of r-base-dev is also highly recommended as it has many inbuilt functions.
    It also enables the `install.packages()` command, which is used to compile and
    install new R packages directly from the CRAN using the **R console**. The default
    **R console** looks as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: Default R console
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'For programming purposes, an **Integrated Development Environment** (**IDE**)
    is recommended as it helps enhance productivity. One of the most popular open
    source IDEs for R is Rstudio. Rstudio also provides you with an Rstudio server,
    which facilitates a web-based environment to program in R. The interface for the
    Rstudio IDE is shown in the following screenshot:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Rstudio Integrated Development Environment for R
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Jupyter Notebook application
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another famous editor these days is the Jupyter Notebook app. This app produces
    notebook documents that integrate documentation, code, and analysis together.
    It supports many computational kernels including R. It is a server, client-side,
    web-based application that can be accessed using a browser.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，另一个著名的编辑器是 Jupyter Notebook 应用程序。该应用程序生成整合了文档、代码和分析的 notebook 文件。它支持多种计算内核，包括
    R。它是一个基于浏览器的客户端服务器应用程序，可以通过浏览器访问。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Jupyter Notebook can be installed using the following steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 可以通过以下步骤进行安装：
- en: 'Jupyter Notebook can be installed using `pip`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用 `pip` 安装 Jupyter Notebook：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you have installed Anaconda, then the default computational kernel installed
    is Python. To install an R computation kernel in Jupyter within the same environment,
    type the following command in a terminal:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已安装 Anaconda，那么默认安装的计算内核是 Python。要在同一环境中为 Jupyter 安装 R 计算内核，请在终端中输入以下命令：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To install the R computational kernel in a new environment named `new-env`
    within conda, type as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 conda 中安装名为 `new-env` 的新环境中的 R 计算内核，请输入以下命令：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another way to include the R computational kernel in Jupyter Notebook uses
    the `IRkernel` package. To install through this process, start the R IDE. The
    first step is to install dependencies required for the `IRkernal` installation:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种将 R 计算内核添加到 Jupyter Notebook 的方式是使用 `IRkernel` 包。通过此方法安装时，请启动 R IDE。第一步是安装
    `IRkernel` 安装所需的依赖项：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once all the dependencies are installed from CRAN, install the `IRkernal` package
    from GitHub:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有依赖项从 CRAN 安装完成，便可以从 GitHub 安装 `IRkernel` 包：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once all the requirements are satisfied, the R computation kernel can be set
    up in Jupyter Notebook using the following script:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦满足所有要求，可以使用以下脚本在 Jupyter Notebook 中设置 R 计算内核：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Jupyter Notebook can be started by opening a shell/terminal. Run the following
    command to start the Jupyter Notebook interface in the browser, as shown in the
    screenshot following this code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过打开 shell/终端启动 Jupyter Notebook。运行以下命令即可在浏览器中启动 Jupyter Notebook 界面，如代码后的截图所示：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/00079.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: Jupyter Notebook with the R computation engine
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 R 计算引擎的 Jupyter Notebook
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: R, as with most of the packages utilized in this book, is supported by most
    operating systems. However, you can make use of Docker or VirtualBox to set up
    a working environment similar to the one used in this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: R 和本书中使用的大多数软件包一样，支持大多数操作系统。然而，您可以使用 Docker 或 VirtualBox 来设置一个与本书中使用的工作环境类似的环境。
- en: For Docker installation and setup information, refer to [https://docs.docker.com/](https://docs.docker.com/)
    and select the Docker image appropriate to your operating system. Similarly, VirtualBox
    binaries can be downloaded and installed at [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Docker 安装和设置的详细信息，请参考 [https://docs.docker.com/](https://docs.docker.com/)，并选择适合您操作系统的
    Docker 镜像。同样，VirtualBox 的二进制文件可以在 [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    下载并安装。
- en: Starting with the basics of machine learning in R
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 R 中学习机器学习基础
- en: Deep learning is a subcategory of machine learning inspired by the structure
    and functioning of a human brain. In recent times, deep learning has gained a
    lot of traction primarily because of higher computational power, bigger datasets,
    and better algorithms with (artificial) intelligent learning abilities and more
    inquisitiveness for data-driven insights. Before we get into the details of deep
    learning, let's understand some basic concepts of machine learning that form the
    basis for most analytical solutions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习是受人类大脑结构和功能启发的机器学习的一个子领域。近年来，深度学习因更强的计算能力、更大的数据集、更好的算法（具有人工智能学习能力）以及对数据驱动见解的更高需求而得到了广泛关注。在我们深入探讨深度学习的细节之前，让我们先了解一些机器学习的基本概念，这些概念构成了大多数分析解决方案的基础。
- en: Machine learning is an arena of developing algorithms with the ability to mine
    natural patterns from the data such that better decisions are made using predictive
    insights. These insights are pertinent across a horizon of real-world applications,
    from medical diagnosis (using computational biology) to real-time stock trading
    (using computational finance), from weather forecasting to natural language processing,
    from predictive maintenance (in automation and manufacturing) to prescriptive
    recommendations (in e-commerce and e-retail), and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure elucidates two primary techniques of machine learning;
    namely, supervised learning and unsupervised learning:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Classification of different techniques in machine learning
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '**Supervised learning**: Supervised learning is a form of evidence-based learning.
    The evidence is the known outcome for a given input and is in turn used to train
    the predictive model. Models are further classified into regression and classification,
    based on the outcome data type. In the former, the outcome is continuous, and
    in the latter the outcome is discrete. Stock trading and weather forecasting are
    some widely used applications of regression models, and span detection, speech
    recognition, and image classification are some widely used applications of classification
    models.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Some algorithms for regression are linear regression, **Generalized Linear Models**
    (**GLM**), **Support Vector Regression** (**SVR**), neural networks, decision
    trees, and so on; in classification, we have logistic regression, **Support Vector
    Machines** (**SVM**), **Linear discriminant analysis** (**LDA**), Naive Bayes,
    nearest neighbors, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '**Semi-supervised learning**: Semi-supervised learning is a class of supervised
    learning using unsupervised techniques. This technique is very useful in scenarios
    where the cost of labeling an entire dataset is highly impractical against the
    cost of acquiring and analyzing unlabeled data.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**Unsupervised learning**: As the name suggests, learning from data with no
    outcome (or supervision) is called unsupervised learning. It is a form of inferential
    learning based on hidden patterns and intrinsic groups in the given data. Its
    applications include market pattern recognition, genetic clustering, and so on.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Some widely used clustering algorithms are *k*-means, hierarchical, *k*-medoids,
    Fuzzy C-means, hidden markov, neural networks, and many more.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at linear regression in supervised learning:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with a simple example of linear regression where we need to determine
    the relationship between men''s height (in cms) and weight (in kgs). The following
    sample data represents the height and weight of 10 random men:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, generate a linear regression model as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following plot shows the relationship between men''s height and weight
    along with the fitted line:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/00091.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Linear relationship between weight and height
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: In semi-supervised models, the learning is primarily initiated using labeled
    data (a smaller quantity in general) and then augmented using unlabeled data (a
    larger quantity in general).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's perform K-means clustering (unsupervised learning) on a widely used dataset,
    iris.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'This dataset consists of three different species of iris (**Setosa**, **Versicolor**,
    and **Virginica**) along with their distinct features such as sepal length, sepal
    width, petal length, and petal width:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following plots show the variation of features across irises. Petal features
    show a distinct variation as against sepal features:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/00080.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Variation of sepal and petal features by length and width
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'As petal features show a good variation across irises, let''s perform K-means
    clustering using the petal length and petal width:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following code snippet shows a cross-tab between clusters and species (irises).
    We can see that cluster 1 is primarily attributed with setosa, cluster 2 with
    versicolor, and cluster 3 with virginica:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following plot shows the distribution of clusters:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Variation of irises across three clusters
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Model evaluation is a key step in any machine learning process. It is different
    for supervised and unsupervised models. In supervised models, predictions play
    a major role; whereas in unsupervised models, homogeneity within clusters and
    heterogeneity across clusters play a major role.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Some widely used model evaluation parameters for regression models (including
    cross validation) are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Coefficient of determination
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Root mean squared error
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean absolute error
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Akaike or Bayesian information criterion
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some widely used model evaluation parameters for classification models (including
    cross validation) are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Confusion matrix (accuracy, precision, recall, and F1-score)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain or lift charts
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Area under ROC (receiver operating characteristic) curve
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concordant and discordant ratio
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the widely used evaluation parameters of unsupervised models (clustering)
    are as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Contingency tables
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sum of squared errors between clustering objects and cluster centers or centroids
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Silhouette value
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rand index
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matching index
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pairwise and adjusted pairwise precision and recall (primarily used in NLP)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bias and variance are two key error components of any supervised model; their
    trade-off plays a vital role in model tuning and selection. Bias is due to incorrect
    assumptions made by a predictive model while learning outcomes, whereas variance
    is due to model rigidity toward the training dataset. In other words, higher bias
    leads to underfitting and higher variance leads to overfitting of models.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: In bias, the assumptions are on target functional forms. Hence, this is dominant
    in parametric models such as linear regression, logistic regression, and linear
    discriminant analysis as their outcomes are a functional form of input variables.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Variance, on the other hand, shows how susceptible models are to change in datasets.
    Generally, target functional forms control variance. Hence, this is dominant in
    non-parametric models such as decision trees, support vector machines, and K-nearest
    neighbors as their outcomes are not directly a functional form of input variables.
    In other words, the hyperparameters of non-parametric models can lead to overfitting
    of predictive models.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Setting up deep learning tools/packages in R
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The major deep learning packages are developed in C/C++ for efficiency purposes
    and wrappers are developed in R to efficiently develop, extend, and execute deep
    learning models.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'A lot of open source deep learning libraries are available. The prominent libraries
    in this area are as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Theano
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Torch
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caffe
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other prominent packages available on the market such as H2O, CNTK
    (Microsoft Cognitive Toolkit), darch, Mocha, and ConvNetJS. There are a lot of
    wrappers that are developed around these packages to support the easy development
    of deep learning models, such as Keras and Lasagne in Python and MXNet, both supporting
    multiple languages.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover the MXNet and TensorFlow packages (developed in C++
    and CUDA for a highly optimized performance in GPU).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additionally, the `h2o` package will be used to develop some deep learning models.
    The `h2o` package in R is implemented as a REST API, which connects to the H2O
    server (it runs as **Java Virtual Machines** (**JVM**)). We will provide quick
    setup instructions for these packages in the following sections
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing MXNet in R
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will cover the installation of MXNet in R.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MXNet package is a lightweight deep learning architecture supporting multiple
    programming languages such as R, Python, and Julia. From a programming perspective,
    it is a combination of symbolic and imperative programming with support for CPU
    and GPU.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The CPU-based MXNet in R can be installed using the prebuilt binary package
    or the source code where the libraries need to be built. In Windows/mac, prebuilt
    binary packages can be download and installed directly from the R console. MXNet
    requires the R version to be 3.2.0 and higher. The installation requires the `drat`
    package from CRAN. The `drat` package helps maintain R repositories and can be
    installed using the `install.packages()` command.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'To install MXNet on Linux (13.10 or later), the following are some dependencies:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Git (to get the code from GitHub)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: libatlas-base-dev (to perform linear algebraic operations)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: libopencv-dev (to perform computer vision operations)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install MXNet with a GPU processor, the following are some dependencies:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Visual Studio 2013
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NVIDIA CUDA Toolkit
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MXNet package
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cuDNN (to provide a deep neural network library)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another quick way to install `mxnet` with all the dependencies is to use the
    prebuilt Docker image from the `chstone` repository. The `chstone`/`mxnet-gpu`
    Docker image will be installed using the following tools:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: MXNet for R and Python
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu 16.04
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUDA (Optional for GPU)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cuDNN (Optional for GPU)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following R command installs MXNet using prebuilt binary packages, and
    is hassle-free. The `drat` package is then used to add the `dlmc` repository from
    git followed by the `mxnet` installation:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '2\. The following code helps install MXNet in Ubuntu (V16.04). The first two
    lines are used to install dependencies and the remaining lines are used to install
    MXNet, subject to the satisfaction of all the dependencies:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '3\. If MXNet is to be built for GPU, the following `config` needs to be updated
    before the `make` command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A detailed installation of MXNet for other operating systems can be found at
    [http://mxnet.io/get_started/setup.html](http://mxnet.io/get_started/setup.html4).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '4\. The following command is used to install MXNet (GPU-based) using Docker
    with all the dependencies:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Installing TensorFlow in R
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will cover another very popular open source machine learning package,
    TensorFlow, which is very effective in building deep learning models.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow is another open source library developed by the Google Brain Team
    to build numerical computation models using data flow graphs. The core of TensorFlow
    was developed in C++ with the wrapper in Python. The `tensorflow` package in R
    gives you access to the TensorFlow API composed of Python modules to execute computation
    models. TensorFlow supports both CPU- and GPU-based computations.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'The `tensorflow` package in R calls the Python tensorflow API for execution,
    which is essential to install the `tensorflow` package in both R and Python to
    make R work. The following are the dependencies for `tensorflow`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Python 2.7 / 3.x
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R (>3.2)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: devtools package in R for installing TensorFlow from GitHub
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow in Python
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pip
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once all the mentioned dependencies are installed, `tensorflow` can be installed
    from `devtools` directly using the `install_github` command as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Before loading `tensorflow` in R, you need to set up the path for Python as
    the system environment variable. This can be done directly from the R environment,
    as shown in the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If the Python `tensorflow` module is not installed, R will give the following
    error:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: Error raised by R if tensorflow in Python is not installed
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '`tensorflow` in Python can be installed using `pip`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow follows directed graph philosophy to set up computational models
    where mathematical operations are represented as nodes with each node supporting
    multiple input and output while the edges represent the communication of data
    between nodes. There are also edges known as **control dependencies** in TensorFlow
    that do not represent the data flow; rather the provide information related to
    control dependence such as node for the control dependence must finish processing
    before the destination node of control dependence starts executing.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'An example TensorFlow graph for logistic regression scoring is shown in the
    following diagram:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: TensorFlow graph for logistic regression
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding figure illustrates the TensorFlow graph to score logistic regression
    with optimized weights:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: The *MatMul* node performs matrix multiplication between input feature matrix
    *X* and optimized weight β. The constant *C* is then added to the output from
    the *MatMul* node. The output from *Add* is then transformed using the *Sigmoid*
    function to output *Pr(y=1|X)*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Get started with TensorFlow in R using resources at [https://rstudio.github.io/tensorflow/](https://rstudio.github.io/tensorflow/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Installing H2O in R
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: H2O is another very popular open source library to build machine learning models.
    It is produced by H2O.ai and supports multiple languages including R and Python.
    The H2O package is a multipurpose machine learning library developed for a distributed
    environment to run algorithms on big data.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up H2O, the following systems are required:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 64-bit Java Runtime Environment (version 1.6 or later)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimum 2 GB RAM
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'H2O from R can be called using the `h2o` package. The `h2o` package has the
    following dependencies:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: RCurl
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rjson
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: statmod
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: survival
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stats
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tools
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: utils
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: methods
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For machines that do not have curl-config installed, the RCurl dependency installation
    will fail in R and curl-config needs to be installed outside R.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'H2O can be installed directly from CRAN with the dependency parameter TRUE
    to install all CRAN-related `h2o` dependencies. This command will install all
    the R dependencies required for the `h2o` package:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following command is used to call the `h2o` package in the current R environment.
    The first-time execution of the `h2o` package will automatically download the
    JAR file before launching H2O, as shown in the following figure:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/00085.jpeg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: Starting H2O cluster
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'The H2O cluster can be accessed using **cluster** **ip** and **port information**.
    The current H2O cluster is running on localhost at port `54321`, as shown in the
    following screenshot:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00004.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: H2O cluster running in the browser
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Models in H2O can be developed interactively using a browser or scripting from
    R. H2O modeling is like creating a Jupyter Notebook but you create a flow with
    different operations such as importing data, splitting data, setting up a model,
    and scoring.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's build a logistic regression interactively using the H2O browser.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a new flow, as shown in the following screenshot:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: Creating a new flow in H2O
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Import a dataset using the Data menu, as shown in the following screenshot:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: Importing files to the H2O environment
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'The imported file in H2O can be parsed into the hex format (the native file
    format for H2O) using the **Parse these files** action, which will appear once
    the file is imported to the H2O environment:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: Parsing the file to the hex format
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'The parsed data frame in H2O can be split into training and validation using
    the *Data |* Split Frame action, as shown in the following screenshot:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: Splitting the dataset into training and validation
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the model from the Model menu and set up the model-related parameters.
    An example for a glm model is seen in the following screenshot:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: Building a model in H2O
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'The Score *|* predict action can be used to score another hex data frame in
    H2O:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: Scoring in H2O
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more complicated scenarios that involve a lot of preprocessing, H2O can
    be called from R directly. This book will focus more on building models using
    H2O from R directly. If H2O is set up at a different location instead of localhost,
    then it can be connected within R by defining the correct `ip` and `port` at which
    the cluster is running:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Another critical parameter is the number of threads to be used to build the
    model; by default, *n* threads are set to -2, which means that two cores will
    be used. The value of -1 for *n* threads will make use of all available cores.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.h2o.ai/h2o/latest-stable/index.html#gettingstarted](http://docs.h2o.ai/h2o/latest-stable/index.html#gettingstarted)
    is very good using H2O in interactive mode.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Installing all three packages at once using Docker
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is a software-contained platform that is used to host multiple software
    or apps side by side in isolated containers to get better computing density. Unlike
    virtual machines, containers are built only using libraries and the settings required
    by any software but do not bundle the entire operating system, thus making it
    lightweight and efficient.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up all three packages could be quite cumbersome depending on the operating
    system utilized. The following dockerfile code can be used to set up an environment
    with `tensorflow`, `mxnet` with GPU, and `h2o` installed with all the dependencies:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The current image is created on top of the `chstone/mxnet-gpu` Docker image.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: The chstone/mxnet-gpu is a docker hub repository at [https://hub.docker.com/r/chstone/mxnet-gpu/](https://hub.docker.com/r/chstone/mxnet-gpu/).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker will all dependencies can be installed using following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Save the preceding code to a location with a name, say, `Dockerfile`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the command line, go to the file location and use the following command
    and it is also shown in the screenshot after the command:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/00149.jpeg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
- en: Building the docker image
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the image using the `docker images` command as follows:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
- en: View docker images
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker images can be executed using the following command:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/00001.jpeg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: Running a Docker image
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Here, the option *-i* is for interactive mode and *-t* is to allocate --*tty*.
    The option *-p* is used to forward the port. As we will be running Jupyter on
    port `8888` and H2O on `54321`, we have forwarded both ports to accessible from
    the local browser.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More options for Docker can be checked out using `docker run --help`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
