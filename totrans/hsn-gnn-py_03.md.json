["```py\n    import numpy as np\n    ```", "```py\n    CONTEXT_SIZE = 2\n    text = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eu sem scelerisque, dictum eros aliquam, accumsan quam. Pellentesque tempus, lorem ut semper fermentum, ante turpis accumsan ex, sit amet ultricies tortor erat quis nulla. Nunc consectetur ligula sit amet purus porttitor, vel tempus tortor scelerisque. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque suscipit ligula nec faucibus accumsan. Duis vulputate massa sit amet viverra hendrerit. Integer maximus quis sapien id convallis. Donec elementum placerat ex laoreet gravida. Praesent quis enim facilisis, bibendum est nec, pharetra ex. Etiam pharetra congue justo, eget imperdiet diam varius non. Mauris dolor lectus, interdum in laoreet quis, faucibus vitae velit. Donec lacinia dui eget maximus cursus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Vivamus tincidunt velit eget nisi ornare convallis. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec tristique ultrices tortor at accumsan.\n    \"\"\".split()\n    ```", "```py\n    skipgrams = []\n    for i in range(CONTEXT_SIZE, len(text) - CONTEXT_SIZE):\n        array = [text[j] for j in np.arange(i - CONTEXT_SIZE, i + CONTEXT_SIZE + 1) if j != i]\n        skipgrams.append((text[i], array))\n    ```", "```py\n    print(skipgrams[0:2])\n    ```", "```py\n    [('dolor', ['Lorem', 'ipsum', 'sit', 'amet,']), ('sit', ['ipsum', 'dolor', 'amet,', 'consectetur'])]\n    ```", "```py\nvocab = set(text)\nVOCAB_SIZE = len(vocab)\nprint(f\"Length of vocabulary = {VOCAB_SIZE}\")\n```", "```py\nLength of vocabulary = 121\n```", "```py\n    !pip install -qU gensim\n    from gensim.models.word2vec import Word2Vec\n    ```", "```py\n    model = Word2Vec([text],\n                     sg=1,   # Skip-gram\n                     vector_size=10,\n                     min_count=0,\n                     window=2,\n                     workers=2,\n                     seed=0)\n    ```", "```py\n    print(f'Shape of W_embed: {model.wv.vectors.shape}')\n    ```", "```py\n    Shape of W_embed = (121, 10)\n    ```", "```py\n    model.train([text], total_examples=model.corpus_count, epochs=10)\n    ```", "```py\n    print('Word embedding =')\n    print(model.wv[0])\n    ```", "```py\n    Word embedding =\n    [ 0.06947816 -0.06254371 -0.08287395  0.07274164 -0.09449387  0.01215031  -0.08728203 -0.04045384 -0.00368091 -0.0141237 ]\n    ```", "```py\n    import networkx as nx\n    import matplotlib.pyplot as plt\n    import numpy as np\n    import random\n    random.seed(0)\n    ```", "```py\n    G = nx.erdos_renyi_graph(10, 0.3, seed=1, directed=False)\n    ```", "```py\n    plt.figure(dpi=300)\n    plt.axis('off')\n    nx.draw_networkx(G,\n                     pos=nx.spring_layout(G, seed=0),\n                     node_size=600,\n                     cmap='coolwarm',\n                     font_size=14,\n                     font_color='white'\n                     )\n    ```", "```py\n    def random_walk(start, length):\n        walk = [str(start)]  # starting node\n        for i in range(length):\n            neighbors = [node for node in G.neighbors(start)]\n            next_node = np.random.choice(neighbors, 1)[0]\n            walk.append(str(next_node))\n            start = next_node\n        return walk\n    ```", "```py\n    print(random_walk(0, 10))\n    ```", "```py\n    ['0', '4', '3', '6', '3', '4', '7', '8', '7', '4', '9']\n    ```", "```py\n    G = nx.karate_club_graph()\n    ```", "```py\n    labels = []\n    for node in G.nodes:\n        label = G.nodes[node]['club']\n        labels.append(1 if label == 'Officer' else 0)\n    ```", "```py\n    plt.figure(figsize=(12,12), dpi=300)\n    plt.axis('off')\n    nx.draw_networkx(G,\n                     pos=nx.spring_layout(G, seed=0),\n                     node_color=labels,\n                     node_size=800,\n                     cmap='coolwarm',\n                     font_size=14,\n                     font_color='white'\n                     )\n    ```", "```py\n    walks = []\n    for node in G.nodes:\n        for _ in range(80):\n            walks.append(random_walk(node, 10))\n    ```", "```py\n    print(walks[0])\n    ```", "```py\n    ['0', '19', '1', '2', '0', '3', '2', '8', '33', '14', '33']\n    ```", "```py\n    model = Word2Vec(walks,\n                     hs=1,   # Hierarchical softmax\n                     sg=1,   # Skip-gram\n                     vector_size=100,\n                     window=10,\n                     workers=2,\n                     seed=0)\n    ```", "```py\n    model.train(walks, total_examples=model.corpus_count, epochs=30, report_delay=1)\n    ```", "```py\n    print('Nodes that are the most similar to node 0:')\n    for similarity in model.wv.most_similar(positive=['0']):\n        print(f'   {similarity}')\n    ```", "```py\n   ('4', 0.6825815439224243)\n   ('11', 0.6330500245094299)\n   ('5', 0.6324777603149414)\n   ('10', 0.6097837090492249)\n   ('6', 0.6096848249435425)\n   ('21', 0.5936519503593445)\n   ('12', 0.5906376242637634)\n   ('3', 0.5797219276428223)\n   ('16', 0.5388344526290894)\n   ('13', 0.534131646156311)\n```", "```py\n# Similarity between two nodes\nprint(f\"Similarity between node 0 and 4: {model.wv.similarity('0', '4')}\")\n```", "```py\nSimilarity between node 0 and 4: 0.6825816631317139\n```", "```py\n    from sklearn.manifold import TSNE\n    ```", "```py\n    nodes_wv = np.array([model.wv.get_vector(str(i)) for i in range(len(model.wv))])\n    labels = np.array(labels)\n    ```", "```py\n    tsne = TSNE(n_components=2,\n                learning_rate='auto',\n                init='pca',\n                random_state=0).fit_transform(nodes_wv)\n    ```", "```py\n    plt.figure(figsize=(6, 6), dpi=300)\n    plt.scatter(tsne[:, 0], tsne[:, 1], s=100, c=labels, cmap=\"coolwarm\")\n    plt.show()\n    ```", "```py\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.metrics import accuracy_score\n    ```", "```py\n    train_mask = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n    test_mask = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 31, 32, 33]\n    ```", "```py\n    clf = RandomForestClassifier(random_state=0)\n    clf.fit(nodes_wv[train_mask], labels[train_mask])\n    ```", "```py\n    y_pred = clf.predict(nodes_wv[test_mask])\n    accuracy_score(y_pred, labels[test_mask])\n    ```", "```py\n    0.9545454545454546\n    ```"]