- en: Introducing FastText
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *fastText Quick Start Guide*. In this first chapter, you will find
    out how to install fastText and create a stable environment in which to learn
    how to use fastText applications as part of your Natural Language Processing applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'fastText is a library that helps you to generate efficient word representations
    and gives you support for text classification out of the box. In this book, we
    will take a look at a specific use case, namely machine translation, and use fastText
    for that. We have chosen machine translation because fastText claims that it is
    superior in terms of yet unknown words, and can handle different languages for
    which sufficiently large data sources and corpora may not be available. In different
    chapters, we will see how fastText fares in such cases. General techniques will
    also be discussed so that you will be able to extend those techniques to your
    specific use case. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing fastText
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing fastText in Windows, Linux, and macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a Docker image for fastText
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies on Mac systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies on RHEL machines using the `yum` package manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies on Debian-based machines such as Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies on Arch Linux using pacman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing fastText
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In today''s interconnected world, a lot of text data gets generated around
    the world. This text information includes descriptions of things. Take, for example,
    people writing about products in Amazon reviews, or people writing about their
    thoughts through their Facebook posts. **Natural Language Processing** (**NLP**)
    is the application of machine learning and other computational techniques to understanding
    and representating spoken and written text. The following are the major challenges
    that NLP seeks to solve:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Topic modeling**: In general, texts deal with a topic. Topic modeling is
    frequently used to determine hidden structures or "abstract topics" that may be
    present in a collection of documents. An effective application of topic modeling
    would be summarization. For example, legal documents are quite complex and verbose,
    and hence systems such as these would help the reader to get the gist of the document
    and a high-level description of what is happening.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sentence classification**: Text classification is a important challenge,
    where we are able to take in blobs of text and classify them into different labels.
    For example, a system should be able to correctly classify something like "Shahrukh
    Khan was on fire at Dubai event" as belonging to the label "Entertainment" and
    another sentence, "Fire breaks out in store opposite Breach Candy Hospital," to
    be categorized as "News."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine translation**: The total number of languages in the world is at least
    3,000\. About half of these languages have fewer than 10,000 speakers and about
    25 percent have less than 1,000 speakers. Hence, we can imagine that a lot of
    languages are dying and when a language dies, collectively we lose a lot of our
    cultural heritage. The best translation system right now is made by Google, but
    it covers only 103 languages at the time of writing, so it is very important that
    we develop machine learning translation models that are able to train from few
    sources with a high degree of predictive power.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Question and answer (QA) systems**: The focus here is to build a system that
    automatically answers questions based on the questions that people ask in natural
    language. QA systems that can be built around closed domain systems can be highly
    accurate as they can retrieve documents and text that are relevant to the search
    item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sentiment analysis**: Sentiment analysis is about understanding the needs
    and intents that the users share when talking about something. People make choices
    based on emotions. The needs of many people are largely emotional and, generally,
    people are very forthcoming about how they feel. Creating a system that takes
    this into account will always add a lot of value to the business.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event extraction**: Use cases involve where a lot of data is stored in the
    form of text. For example, some legal text may be describing a "crime" event,
    which is followed by an "investigation" event, which is followed by multiple "hearing"
    events. The events themselves may be nested such that the "hearing" events may
    consist of a "presenting arguments" events and a "presenting evidence" events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Named entity detection**: The focus of building this system is to extract
    and classify entities or specific information as per some predefined categories,
    such as people, organization, geography, and so on. For example, if we take the
    following text: "We''re used to spicy foods down here in South Texas," we can
    understand that the "buyer" likes "spicy foods" and his "geography" is South Texas.
    If there is sufficient evidence received from the data that buyers in South Texas
    like spicy foods, more such foods can be marketed to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relation detection**: A relation detection system parses text and identifies
    focal points and agents, then tries to find the relationship between them. For
    example, the sentence "Mike has the flu" can be converted to `Person-[RELATION:HAS]->Disease`.
    These relations can then be explored in a business context to build intelligent
    apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous list has many of the problems that NLP practitioners are targeting.
    Depending on the use case, you can pick up any of these challenges and try to
    solve them in your domain. The challenge with many previous approaches and modeling
    techniques is that NLP requires a lot of textual data and there is a lot of contextual
    information in the data. It is quite hard for a computational model to get a sense
    of all the data in an efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: NLP models up to now have only targeted English as textual data is available in
    English. But only 20 percent of the population of the world speak English and
    even among them, the majority are non-native speakers. The biggest deterrent to
    building non-English NLP models is the lack of data. Hence, we desperately need
    libraries that can build models even when the data is limited. fastText has the
    potential to change all that. The fastText team has published pretrained word
    vectors for 294 languages. By the time the book is published, more languages will
    have been added to it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to install fastText so that you can start tinkering
    with this amazing software.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the descriptions provided may not be applicable to you; for example,
    instructions for Mac users may not be directly relevant to Linux users and vice
    versa. Still, I would suggest that you read through the whole description for
    each of the dependencies for a better understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Installing fastText
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on your operating system, you will need to make sure that you have
    some dependencies installed in your machine. In this section, you will get to
    know how to install fastText based on whether you are using a Linux, Windows,
    or macOS operating system. Additionally, you will get to know what additional
    dependencies you should install depending on your usage. My recommendation is
    to install all the software packages, as we will be exploring all the various
    ways we can use fastText in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FastText works on Windows, Linux, and macOS. FastText is built using the C++
    language, so you will first need a good C++ compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Official binaries for Windows are not available, but you can download the latest
    Windows binaries compiled by Meng Xuan Xia at the following link: [https://github.com/xiamx/fastText/releases](https://github.com/xiamx/fastText/releases).
    To run these binaries, you will need to install Visual C++ 2017\. You can download
    the 64-bit versions of Visual C++ from this link: [https://support.microsoft.com/en-in/help/2977003/the-latest-supported-visual-c-downloads](https://support.microsoft.com/en-in/help/2977003/the-latest-supported-visual-c-downloads).
    Next, the usual way of installing, by double-clicking on the installer file for
    Visual C++, should install it on your Windows machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The list of prerequisite software that you need to install is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: GCC-C++; if you are using Clang, you will need 3.3 or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cmake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.5 (you can work with Python 2.7, but we are going to focus on Python
    3 in this book)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy and SciPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pybind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Optional requirements, depending on your system, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Zip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies on RHEL machines supporting the yum package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Linux machines, you will need to have `g++` installed. On Fedora/CentOS,
    which supports the `yum` package manager, you can install `g++` using the following
    command. Open the Terminal or connect to the server where you are installing this
    using your favorite SSH tool and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'CMake should be installed by default. The official docs have the installation
    instructions in `make` and `cmake`. I would recommend installing `cmake` on your
    machine and using it to build fastText. You can directly install `cmake` using
    the `yum` generic command like before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a full list of `cmake` commands, take a look at the following link:
    [https://cmake.org/cmake/help/v3.2/manual/cmake.1.html](https://cmake.org/cmake/help/v3.2/manual/cmake.1.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the optional software, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are starting on a new server and running `yum` commands there, then
    you may encounter the following warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, install the `glibc` language pack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can jump to the installation instructions for Anaconda to install the
    Python dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies on Debian-based machines such as Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Ubuntu and Debian machines, `apt-get` or `apt` is your package manager. `apt`
    is basically a wrapper around `apt-get` and other similar tools, and hence you
    should be able to use them interchangeably. I will be showing `apt` commands here
    but if you are using older versions of Ubuntu and Debian, and see that apt is
    not working on your machines, then you can replace `apt` with `apt-get` and it
    should work. Also, consider upgrading your machine if possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to Fedora, to install C++, open a Terminal or SSH into the server where
    you are going to install fastText and run the following command. This will also
    install the `cmake` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now install `cmake`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the optional requirements, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, check the Anaconda section to see how to install Anaconda for the Python
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The `apt` command only works from Ubuntu-16 onwards. If you are using an older
    Ubuntu version, you should use the `apt-get` command.
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies on Arch Linux using pacman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The package manager of choice on Arch Linux is `pacman` and you can run the
    following command to install the essential build tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This should install the `make`, `cmake`, and `g++` compiler that you need to
    build fastText. Although Arch distributions already have Python 3.x installed,
    I would recommend installing Anaconda as described later in this chapter so that
    you don't miss out on any of the Python dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the optional requirements, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Installing dependencies on Mac systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On macOS, you should have Clang installed by default, which is designed to
    be a drop-in replacement for the normal compilers for C, C++, and other similar
    languages. Check whether the version is 3.3 or later using `clang --version` in
    a Terminal. If you do not have Clang or something from the older versions, then
    you can install using the `xcode` command-line tools using a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A dialog should appear next that asks if you want to install the developer tools.
    Click on the Install button.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I recommend that you install Anaconda so that there are no issues with installing
    Python and using it for fastText. Detailed instructions for installing Anaconda
    are given on the official documentation page, which can be accessed at[ https://conda.io/docs/user-guide/install/linux.html](https://conda.io/docs/user-guide/install/linux.html).
    Simply stated, if you are on Windows, then download the Windows installer, double-click
    on it, and then follow the instructions on the screen. Installing it using a GUI
    is also possible for macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of Linux and macOS, download the corresponding bash file and then
    run the following command in a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Please take care to download and install it using installers that are tagged
    for Python 3.x. The Python code snippets that will be shown in this book will
    be shown for Python 3.x.
  prefs: []
  type: TYPE_NORMAL
- en: Installing fastText on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, official binaries are not provided for fastText on Windows, and
    hence there is no GUI to install fastText on your machine. To use fastText, you
    will need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest binary named [**fasttext-win64-latest-Release.zip**](https://github.com/xiamx/fastText/releases/download/fastText-latest-build40/fasttext-win64-latest-Release.zip)
    from the release page provided by Xua ([https://github.com/xiamx/fastText/releases](https://github.com/xiamx/fastText/releases)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a ZIP file and hence you will need to extract the contents. You will
    find the `fasttext_pic.lib`, `fasttext.lib`, `fasttext.exe`, and `fasttext.dll` files in
    the extracted folder. This folder will be your working directory for fastText:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Create a folder, `data` where you will keep all your data files. Now, open PowerShell
    and change directory to the folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `.\fasttext.exe` in Powershell and you should be able to see the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't see any output at the end, then you probably don't have Visual
    C++ Redistributable in your machine and will need to install that.
  prefs: []
  type: TYPE_NORMAL
- en: Installing fastText in Linux and macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install fastText, run the following commands to clone the image and build
    it in a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this book, a lot of focus will be on building systems for Python. So, run
    the following commands as well in the same directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`pip` is the package manager for Python. fastText assumes UTF-8 encoded text,
    which is the default in Python 3.x. The Python code examples in this book will
    be shown using Python 3.x. One of the advantages of fastText is that you can build
    fastText models for multiple languages and if you are not using Python 3.x, then
    you will not be able to take advantage of this. If that is not a concern and you
    are trying to use fastText using Python 2.7, then take a look at the *Appendix*
    at the end, which will give you guidelines on how to develop, keeping in mind
    UTF-8 in Python 2.7.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a Docker image for fastText
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also use Docker to run fastText on your machine and not worry about
    building it. This can be done to maintain version control between specific versions
    and thus gives us predictability and consistency. You can get information on how
    to install Docker from the following link:[ https://docs.docker.com/install/#cloud](https://docs.docker.com/install/#cloud).
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing, start the Docker service before running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now be able to run fastText:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You may need to provide permissions and create the specific directories to run
    the `docker run` command.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have taken a look at how to install and start using fastText
    in the environment of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be taking a look at how to train fastText models
    using the command line and how to use them.
  prefs: []
  type: TYPE_NORMAL
