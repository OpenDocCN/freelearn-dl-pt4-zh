["```py\nprint('loading the model')\nFT_MODEL = os.environ.get('FT_MODEL')\nif not FT_MODEL:\n    raise ValueError('No fasttext model has been linked.')\nFT_MODEL = fastText.load_model(FT_MODEL)\nprint('model is loaded')\n```", "```py\n# Gets words with associated frequency sorted by default by descending order\nwords, freq = FT_MODEL.get_words(include_freq=True)\nwords = words[:threshold]\nvectors = np.zeros((len(words), FT_MODEL.get_dimension()), dtype=float)\nfor i in range(len(words)):\n    wv = FT_MODEL.get_word_vector(words[i])\n    wv = wv / np.linalg.norm(wv)\n    vectors[i] = wv\n\n# For efficiency preallocate the memory to calculate cosine similarities\ncossims = np.zeros(len(words), dtype=float)\n```", "```py\n@app.route('/nn/<question_word>')\ndef nearest_neighbours(question_word):\n    answers = [a for a in nn(FT_MODEL, question_word, k=5)]\n    return jsonify(dict(question=question_word, answers=answers))\n```", "```py\n$ export FLASK_APP=ft_server.py\n$ export FLASK_ENV=development\n$ export FT_MODEL=wiki.simple.bin\n$ flask run\n```", "```py\n$ time curl http://127.0.0.1:5000/nn/dog\n {\n \"answers\": [\n \"dogs\",\n \"catdog\",\n \"sheepdog\",\n \"sheepdogs\",\n \"breed\"\n ],\n \"question\": \"dog\"\n }\n$ curl http://127.0.0.1:5000/nn/dog 0.01s user 0.00s system 9% cpu 0.105 total\n```", "```py\n$ ./fasttext quantize -output <model prefix> -input <training file> -qnorm -retrain -epoch <number of epochs> -cutoff <number of words to consider>\n```", "```py\ngit fetch\ngit checkout android_starting\n```", "```py\n$ du -sh app-debug.apk\n1.6M app-debug.apk\n```", "```py\npublic class DisplayMessageActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_display_message);\n\n        // Get the Intent that started this activity and extract the string\n        Intent intent = getIntent();\n        String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);\n\n        // Get the assets from the asset manager.\n        AssetManager assetManager = getAssets();\n        InputStream inputStream = null;\n        try {\n            inputStream = assetManager.open(\"dbpedia.ftz\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Capture the layout's TextView and set the string as its text\n        TextView textView = findViewById(R.id.textView);\n        textView.setText(message);\n\n    }\n```", "```py\nimport android.content.Intent;\nimport android.content.res.AssetManager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.widget.TextView;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n```", "```py\n$ git clone https://github.com/infinite-Joy/fastText4j.git\n$ cd fastText4j\n$ mvn clean\n```", "```py\n$ mvn install -Papp\n$ unzip app/fasttext4j-app.zip\n$ cp target/fasttext4j-0.2.1-SNAPSHOT.jar lib/fasttext4j-0.2.1-SNAPSHOT.jar\n```", "```py\n  public static void main(String[] args) throws Exception {\n\n    Options options = new Options();\n\n    Option input = new Option(\"i\", \"input\", true, \"input model path\");\n    input.setRequired(true);\n    options.addOption(input);\n\n    CommandLineParser parser = new DefaultParser();\n    HelpFormatter formatter = new HelpFormatter();\n    CommandLine cmd;\n\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getMessage());\n      formatter.printHelp(\"fasttext.FastText\", options);\n\n      System.exit(1);\n      return;\n    }\n\n    String inputModelPath = cmd.getOptionValue(\"input\");\n\n    logger.info(\"Loading fastText model to convert...\");\n    FastText model = FastText.loadModel(inputModelPath);\n    FastTextPrediction label = model.predict(\"Good restaurant\");\n    System.out.println(label.label());\n  }\n```", "```py\n$ mvn clean package\n$ cp target/fasttext4j-0.2.1-SNAPSHOT.jar lib/fasttext4j-0.2.1-SNAPSHOT.jar\n$ time bash fasttext-mmap.sh -i <path to>/dbpedia.ftz\n__label__7\nbash fasttext-mmap.sh -i 0.64s user 0.11s system 168% cpu 0.444 total\n```", "```py\n$ mvn clean package\n$ mvn install -Papp\n$ unzip app/fasttext4j-app.zip\n$ cp target/fasttext4j-0.2.1-SNAPSHOT.jar lib/fasttext4j-0.2.1-SNAPSHOT.jar\n```", "```py\ncompile 'com.google.guava:guava:21.0'\n```", "```py\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 28\n    defaultConfig {\n        ...\n    }\n    buildTypes {\n        ...\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n\ndependencies {\n    ...\n    compile 'com.google.guava:guava:21.0'\n}\n```", "```py\n$du -sh app-debug.apk\n4.6M app-debug.apk\n```"]