["```py\nimport networkx as nx\nG = nx.Graph()\nG.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'),  \n('B', 'E'), ('C', 'F'), ('C', 'G')])\n```", "```py\nDG = nx.DiGraph()\nDG.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'),  \n('B', 'E'), ('C', 'F'), ('C', 'G')])\n```", "```py\nWG = nx.Graph()\nWG.add_edges_from([('A', 'B', {\"weight\": 10}), ('A', 'C', {\"weight\": 20}), ('B', 'D', {\"weight\": 30}), ('B', 'E', {\"weight\": 40}), ('C', 'F', {\"weight\": 50}), ('C', 'G', {\"weight\": 60})])\nlabels = nx.get_edge_attributes(WG, \"weight\")\n```", "```py\nG1 = nx.Graph()\nG1.add_edges_from([(1, 2), (2, 3), (3, 1), (4, 5)])\nprint(f\"Is graph 1 connected? {nx.is_connected(G1)}\")\nG2 = nx.Graph()\nG2.add_edges_from([(1, 2), (2, 3), (3, 1), (1, 4)])\nprint(f\"Is graph 2 connected? {nx.is_connected(G2)}\")\n```", "```py\nIs graph 1 connected? False\nIs graph 2 connected? True\n```", "```py\nG = nx.Graph()\nG.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('B', 'E'), ('C', 'F'), ('C', 'G')])\nprint(f\"deg(A) = {G.degree['A']}\")\nDG = nx.DiGraph()\nDG.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('B', 'E'), ('C', 'F'), ('C', 'G')])\nprint(f\"deg^-(A) = {DG.in_degree['A']}\")\nprint(f\"deg^+(A) = {DG.out_degree['A']}\")\n```", "```py\ndeg(A) = 2\ndeg^-(A) = 0\ndeg^+(A) = 2\n```", "```py\nprint(f\"Degree centrality      = {nx.degree_centrality(G)}\")\nprint(f\"Closeness centrality   = {nx.closeness_centrality(G)}\")\nprint(f\"Betweenness centrality = {nx.betweenness_centrality(G)}\")\n```", "```py\nDegree centrality      = {'A': 0.333, 'B': 0.5, 'C': 0.5, 'D': 0.167, 'E': 0.167, 'F': 0.167, 'G': 0.167}\nCloseness centrality   = {'A': 0.6, 'B': 0.545, 'C': 0.545, 'D': 0.375, 'E': 0.375, 'F': 0.375, 'G': 0.375}\nBetweenness centrality = {'A': 0.6, 'B': 0.6, 'C': 0.6, 'D': 0.0, 'E': 0.0, 'F': 0.0, 'G': 0.0}\n```", "```py\nadj = [[0,1,1,0,0,0,0],\n       [1,0,0,1,1,0,0],\n       [1,0,0,0,0,1,1],\n       [0,1,0,0,0,0,0],\n       [0,1,0,0,0,0,0],\n       [0,0,1,0,0,0,0],\n       [0,0,1,0,0,0,0]]\n```", "```py\nedge_list = [(0, 1), (0, 2), (1, 3), (1, 4), (2, 5), (2, 6)]\n```", "```py\nadj_list = {\n    0: [1, 2],\n    1: [0, 3, 4],\n    2: [0, 5, 6],\n    3: [1],\n    4: [1],\n    5: [2],\n    6: [2]\n}\n```", "```py\n    G = nx.Graph()\n    G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('B', 'E'), ('C', 'F'), ('C', 'G')])\n    ```", "```py\n    def bfs(graph, node):\n    ```", "```py\n        visited, queue = [node], [node]\n    ```", "```py\n        while queue:\n            node = queue.pop(0)\n    ```", "```py\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    visited.append(neighbor)\n                    queue.append(neighbor)\n        return visited\n    ```", "```py\n    bfs(G, 'A')\n    ```", "```py\n    ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    ```", "```py\n    visited = []\n    ```", "```py\n    def dfs(visited, graph, node):\n    ```", "```py\n        if node not in visited:\n            visited.append(node)\n    ```", "```py\n            for neighbor in graph[node]:\n                visited = dfs(visited, graph, neighbor)\n    ```", "```py\n        return visited\n    ```", "```py\n    dfs(visited, G, 'A')\n    ```", "```py\n    ['A', 'B', 'D', 'E', 'C', 'F', 'G']\n    ```"]