["```py\n     $ jupyter notebook \n```", "```py\n     bitcoin_recent = bitcoin[bitcoin['date'] >= '2016-01-01']\n```", "```py\n     bitcoin_recent['close_point_relative_normalization'] =\n     bitcoin_recent.groupby('iso_week')['close'].apply(\n     lambda x: normalizations.point_relative_normalization(x))\n```", "```py\n     test_dataset.to_csv('data/test_dataset.csv', index=False)\n     train_dataset.to_csv('data/train_dataset.csv', index=False)\n     bitcoin_recent.to_csv('data/bitcoin_recent.csv', index=False)\n```", "```py\n     from keras.models import Sequential\n     from keras.layers.recurrent import LSTM\n     from keras.layers.core import Dense, Activation\n\n     model = Sequential()\n\n     model.add(LSTM(\n     units=number_of_periods,\n     input_shape=(period_length, number_of_periods)\n     return_sequences=False), stateful=True)\n     model.add(Dense(units=period_length))\n     model.add(Activation(\"linear\"))\n     model.compile(loss=\"mse\", optimizer=\"rmsprop\")\n\n```", "```py\n     model.fit(\n     X_train, Y_train,\n     batch_size=32, epochs=epochs)\n\n```", "```py\n      model.predict(x=X_train)\n```", "```py\n     model.save('bitcoin_lstm_v0.h5')\n```", "```py\n     1 model = keras.models.load_model('bitcoin_lstm_v0.h5')\n```", "```py\n    import pandas as pd\n    train = pd.read_csv('data/train_dataset.csv')\n```", "```py\n     group_size = 7\n     samples = list()\n     for i in range(0, len(data), group_size):\n     sample = list(data[i:i + group_size])\n     if len(sample) == group_size:\n     samples.append(np.array(sample).reshape(group_size, 1).tolist())\n\n     data = np.array(samples) \n```", "```py\n     X_train = data[:-1,:].reshape(1, 76, 7)\n     Y_validation = data[-1].reshape(1, 7)\n```", "```py\n      model.fit(x=X_train, y=Y_validation, epochs=100) \n```", "```py\n     model.predict(x=X_train)\n```", "```py\n      train = pd.read_csv('data/train_dataset.csv')\n```", "```py\n      train.head()\n```", "```py\n       create_groups(data=train, group_size=7)\n```", "```py\n       X_train = data[:-1,:].reshape(1, 76, 7)\n       Y_validation = data[-1].reshape(1, 7)\n```", "```py\n      model = load_model('bitcoin_lstm_v0.h5')\n```", "```py\n      history = model.fit(\n      x=X_train, y=Y_validation,\n      batch_size=32, epochs=100)\n```", "```py\n      model.predict(x=X_train)\n```", "```py\n       denormalized_prediction = denormalize(predictions, last_weeks_value)\n```", "```py\n      model.save('bitcoin_lstm_v0_trained.h5')\n```"]