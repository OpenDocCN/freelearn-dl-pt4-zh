- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cultivating Collaboration in LLM-Enhanced Coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter aims to cultivate a collaborative, open source, transparent, and
    shared learning environment in LLM-enhanced coding. It makes suggestions for establishing
    best practices for sharing code generated by LLMs and the associated knowledge.
    You will find strategies for working together, helping to ensure the expertise
    embedded in LLM-generated code is shared effectively within development teams.
    By encouraging a culture of collaboration, this chapter outlines how to harness
    the full potential of LLMs to that end, creating a rich ecosystem of shared knowledge
    and sound coding practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why share LLM-generated code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for code sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Knowledge management: capturing and sharing expertise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making the best use of collaborative platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you’ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the code in this book here: [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main)
    . You’ll need a GitHub account to work with this properly, as explained later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might want to sign up for Kaggle, Codefile, GitLab, Stack Overflow, and/or
    Dabblet, Trello, Jira, Monday.com, or Miro.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need access to an LLM/chatbot such as GPT-4, Copilot, or Gemini, each requiring
    logins. For GPT-4, you’ll need an OpenAI account. For Gemini, you’ll need a Google
    account, which is also helpful for Colab. Copilot requires a Microsoft account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get into the chapter, starting with some motivation for sharing code,
    including LLM-generated code, rather than keeping it all to yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Why share LLM-generated code?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, LLMs have revolutionized the way developers approach coding. However,
    the potential of these tools extends far beyond individual productivity. Sharing
    LLM-generated code creates a collaborative environment that enhances collective
    learning, accelerates problem-solving, and promotes innovation.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing code is helpful for all coders, including pupils, students, hobbyists,
    software engineers and developers, data scientists, and other scientists who create
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of sharing code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sharing code comes with several benefits that can really enhance your development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing code with your team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sharing your code with your team promotes greater transparency. When you share
    your code, everyone can see the processes, which helps build trust and accountability
    within the team.
  prefs: []
  type: TYPE_NORMAL
- en: It also improves debugging. With multiple perspectives looking at the code,
    identifying and fixing bugs becomes a lot faster and more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code should be shared within companies to make sure the development process
    is done well. For students and individual researchers in universities, it is less
    obvious that they should share code; however, it really helps to get more eyes
    and brains working on the code: reviewing it, making it more user-friendly, and
    improving it.'
  prefs: []
  type: TYPE_NORMAL
- en: Academic code is less production-ready and can be hard for others to understand,
    run, or develop further in later research projects.
  prefs: []
  type: TYPE_NORMAL
- en: Pair programming is very helpful for speed and good code, too.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing code with the world – open source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sharing code more broadly with the world helps build a stronger community. Sharing
    knowledge promotes a sense of community and encourages collaboration among developers.
    This can ultimately lead to a stronger and more vibrant developer ecosystem and
    also code and software that is more stable, user-friendly, and has all the features
    users want without bloatware (software that users don’t want but is put into the
    applications by the producers of the software anyway).
  prefs: []
  type: TYPE_NORMAL
- en: 'These benefits aren’t just theoretical. Numerous case studies show that teams
    embracing code-sharing see improved performance and morale. For instance, a study
    by GitHub Octoverse revealed that open source projects often advance more quickly
    due to the diversity of contributions. Here is a link to their report: [https://octoverse.github.com/](https://octoverse.github.com/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: It’s not always possible to share code, as companies may want to develop new
    technology without giving it to the competition, and those in academic research
    will want to publish the final research in research journals and also can’t share
    due to competition.
  prefs: []
  type: TYPE_NORMAL
- en: So, I advise you to share code where you can, such as when the code is free,
    which a lot of code is.
  prefs: []
  type: TYPE_NORMAL
- en: Real-world examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux is one of the most well-known open source operating systems. Created by
    Linus Torvalds in 1991, Linux has grown into a robust and versatile platform used
    in everything from personal computers to servers and even smartphones. Its open
    source nature means that anyone can view, modify, and distribute the source code,
    which has led to a vast community of developers contributing to its improvement.
  prefs: []
  type: TYPE_NORMAL
- en: There are an estimated 13,500 Linux developers.
  prefs: []
  type: TYPE_NORMAL
- en: This collaborative approach has resulted in a highly secure and stable operating
    system that powers a significant portion of the internet’s infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, Linux can have a steep learning curve for some new users. There
    can be driver compatibility issues with some hardware, and enterprise-grade support
    requires payment.
  prefs: []
  type: TYPE_NORMAL
- en: However, bugs in the Linux OS are being constantly discovered and fixed by the
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Linux has a large and active community of security researchers and developers.
    This community quickly identifies and corrects security gaps, which has enabled
    Linux to have robust security features such as group permissions, firewalls, and
    encryption.
  prefs: []
  type: TYPE_NORMAL
- en: There are other good qualities of Linux, such as good performance, customization,
    cost-effectiveness, and rapid patching. Of course, being open source, the development
    is transparent [ *Linux_Foundation* , *CBT_Nuggets* ].
  prefs: []
  type: TYPE_NORMAL
- en: Another excellent example of why open source development is so effective is
    the **Apache Software Foundation** ( **ASF** ). The ASF oversees a wide range
    of open source projects, with the Apache HTTP Server, often simply called Apache,
    being one of its most notable successes. Launched in 1995, Apache quickly became
    the most popular web server software due to its reliability and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Apache’s open source model allows developers from all over the world to contribute
    to its code base. This collaborative approach ensures that the software stays
    up to date with the latest web standards and security practices. Just like Linux,
    Apache benefits from the diverse perspectives and expertise of its contributors,
    which leads to continuous improvement and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: The ASF also supports a vast array of other open source projects, building a
    culture of collaboration and innovation within the community. Projects such as
    Hadoop, Cassandra, and Spark are just a few examples of the impactful software
    that has emerged under the ASF’s umbrella. This wide-ranging support helps build
    a robust ecosystem where developers can share knowledge, tools, and best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the ASF’s commitment to open source principles means that anyone can
    get involved. Whether you’re a seasoned developer or just starting out, you can
    contribute to these projects, learn from others, and help drive the technology
    forward. This inclusivity not only accelerates the development process but also
    builds a strong, supportive community.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of this approach are well-documented. For instance, a study by
    GitHub revealed that open source projects often advance more quickly due to the
    diversity of contributions. This is because open source projects can leverage
    a global pool of talent, leading to faster bug fixes, more innovative features,
    and overall better software.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the ASF exemplifies the power of open source development. By fostering
    a collaborative environment and supporting a wide range of projects, the ASF helps
    drive technological innovation and build strong, vibrant communities.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, you can visit the following sources: *Apache_SF* , *GitHub_Octoverse*
    , *Apache_Projects* , *Wiki_Ken_Coar* , *SpringerLink* , and *Wikiwand* .'
  prefs: []
  type: TYPE_NORMAL
- en: Linux and Apache show what can be done with open source development. They display
    how community-driven projects can lead to highly effective and widely adopted
    software solutions. By allowing anyone to contribute, these projects benefit from
    a diversity of ideas and expertise, leading to continuous improvement and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: A Techjury post from 2023 said that there are 32.8 million Linux users in the
    world, “ *96.3% of the top one million web servers globally use Linux* ,” and
    33.9% of the market share for servers is Red Hat ( Linux) [ *Techjury* ].
  prefs: []
  type: TYPE_NORMAL
- en: W 3 Techs says Apache is used by Adobe.com, Netflix.com, Spotify.com, Samsung.com,
    Theguardian.com, Mit.edu and eBay.com [ *W3Techs* ]. The Wikipedia page for Apache
    HTTP Server, which is open source and managed under the ASF, says that in March
    2022, Apache served 23.04% of the million busiest websites [ *Wiki_Apache* ].
    This is more than NGINX, Cloudflare, and Microsoft Internet Information Services.
  prefs: []
  type: TYPE_NORMAL
- en: By understanding these real-world applications, developers can appreciate the
    value of sharing LLM-generated code and the collective benefits it brings.
  prefs: []
  type: TYPE_NORMAL
- en: It’s always good to know the best practices and to follow them, for your own
    good and that of others, too. So, the next section is on best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for code sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a culture that prioritizes code sharing within your organization requires
    implementing best practices that ensure the shared code is useful, understandable,
    and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Best practices include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Documenting well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using version control well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following security best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving proper attribution or credit to the relevant creators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the code thoroughly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping to coding standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abiding by continuous improvement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here’s some more detail on each of those.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clear documentation is 100% needed for everyone else to understand the purpose
    and functionality of your code. Otherwise, it’s extremely difficult for them to
    use or maintain your code. Documentation can include inline comments, README files,
    and usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: There are tools for documentation, including Sphinx ( [https://www.sphinx-doc.org/en/master/](https://www.sphinx-doc.org/en/master/)
    ) and MkDocs ( [https://www.mkdocs.org/](https://www.mkdocs.org/) ), which can
    help automate the generation of documentation from your code base, making it easier
    to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Consistent coding standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use widely used coding conventions (or establish your own). Uniform coding styles
    enhance readability and reduce friction when multiple developers work on the same
    codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Tools such as ESLint ( [https://eslint.org/](https://eslint.org/) ) for JavaScript
    or Pylint ( [https://pylint.pycqa.org/en/latest/](https://pylint.pycqa.org/en/latest/)
    ) for Python can help enforce coding standards automatically.
  prefs: []
  type: TYPE_NORMAL
- en: ESLint allows you to share configurations, create custom rules, and keep up
    to date with current best practices, so makes your life as a coder or developer
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: Pylint has similar features to ESLint. It performs static code analysis, has
    rules based on PEP 8 ( [https://peps.python.org/pep-0008/](https://peps.python.org/pep-0008/)
    ), and provides scores and reports for your code. Pylint also stays up to date
    with best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Linting tools help to make your code consistent. They check for errors, allow
    customization, and can be used to learn by giving automatic feedback.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve written a lot more about making code readable, including documentation
    and coding standards, in [*Chapter 4*](B21009_04.xhtml#_idTextAnchor100) .
  prefs: []
  type: TYPE_NORMAL
- en: Version control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Version control systems** ( **VCSs** ) such as Git, Apache **Subversion**
    ( **SVN** ), Mercurial, and **Concurrent Versions System** ( **CVS** ) are crucial
    for tracking changes in the code. They allow developers to collaborate without
    the fear of overwriting each other’s work.'
  prefs: []
  type: TYPE_NORMAL
- en: They allow different versions, both over time and in parallel for diverse uses
    (branching and merging). VCSs allow developers to go back to earlier versions
    of software (revert) if the latest update isn’t working as desired. They allow
    reliable backups of your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can differentiate your work: check the differences between this version
    and that version, line by line.'
  prefs: []
  type: TYPE_NORMAL
- en: LaTeX uses diff. LaTeX is good for writing scientific papers and books and is
    usually used by computer scientists, physicists, mathematicians, engineers, and
    similar. It’s not usually used by non-numerate people. It’s pronounced “layteck”
    because the X is actually the hard “ch” sound from the Greek letter Chi ( pronounced
    “Kai”).
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not already backing up your code and using version control, please
    start doing so today! You really don’t want to lose your whole project (even a
    PhD project) and have to redo everything! This is important!
  prefs: []
  type: TYPE_NORMAL
- en: 'I mentioned that you can use a VCS for writing in LaTeX; you can use one for
    other writing, and any file type too: books, paintings, sounds, and videos. You
    can’t diff a painting or a video to my knowledge, but you can back up work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing branching strategies (such as Gitflow) and writing clear commit
    messages can enhance collaboration. See here for more: [https://en.wikipedia.org/wiki/List_of_version-control_software](https://en.wikipedia.org/wiki/List_of_version-control_software)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out GitLab’s guide on Git best practices here: [https://about.gitlab.com/topics/version-control/version-control-best-practices/](https://about.gitlab.com/topics/version-control/version-control-best-practices/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'See here for the SVN best practices: [https://svn.apache.org/repos/asf/subversion/trunk/doc/user/svn-best-practices.html](https://svn.apache.org/repos/asf/subversion/trunk/doc/user/svn-best-practices.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Code security best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure the code adheres to security best practices. Check for vulnerabilities
    (injection attacks, buffer overflows, authentication flaws, and cryptographic
    weaknesses), ensure code quality, ensure compliance with regulations and standards
    (such as **common weakness enumeration** , or **CWE** ), identify performance
    bottlenecks, and optimize.
  prefs: []
  type: TYPE_NORMAL
- en: You can use tools to scan for common security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Tools include **static application security testing** ( **SAST** ) such as SonarQube
    or Fortify Static Code Analyzer; **dynamic application security testing** ( **DAST**
    ) such as (OWASP) ZAP or Burp Suite; **software composition analysis** ( **SCA**
    ) such as Snyk or Mend.io (formerly WhiteSource); **interactive application security
    testing** ( **IAST** ) such as Contrast Security or Seeker by Synopsys; and **runtime
    application self-protection** ( **RASP** ) by Imperva RASP or Signal Sciences
    (owned by Fastly). Also, use code review tools such as GitHub Code Scanning or
    Phabricator (by Phacility) and linting tools for linting, mentioned in the *Consistent
    coding* *standards* section.
  prefs: []
  type: TYPE_NORMAL
- en: Proper attribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Give credit where it’s due. Just like you should credit developers and authors
    for their contributions to the work you’ve done, you should give attribution to
    the LLMs you use [ *Copilot* , *Gemini* ].
  prefs: []
  type: TYPE_NORMAL
- en: Providing correct and complete attributions for code is crucial for transparency,
    intellectual property respect, and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how you can do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For code from an LLM, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, you could write comments like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can provide the prompt used to generate it, too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For code written by people, e.g. Python **# Author: Jane Smith** to note the
    authors, including you. You could do this: **# Additional optimizations by** **Joel
    Evans.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can provide contact information, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#** **GitHub:** [https://github.com/janedoe](https://github.com/janedoe)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even link to the source:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#** **Source:** [https://github.com/janedoe/project](https://github.com/janedoe/project)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can link to documentation like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#** **Documentation:** [https://www.microsoft.com/en-us/edge/learning-center/how-to-create-citations](https://www.microsoft.com/en-us/edge/learning-center/how-to-create-citations)'
  prefs: []
  type: TYPE_NORMAL
- en: You should also specify a license, such as **# License:** **MIT License** .
  prefs: []
  type: TYPE_NORMAL
- en: You could also specify GNU AGPLv3, Apache license 2.0, Boost Software License
    1.0, or even “The Unlicense” [ *Choose_License* ].
  prefs: []
  type: TYPE_NORMAL
- en: Test the code thoroughly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do unit testing for individual components, integration testing to make sure
    it all works together well, system testing in a production-like environment, and
    acceptance testing to see whether the software meets business needs and is ready
    for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tests can be automated as much as possible to make sure you have consistency
    and are efficient with time usage. However, do make your tests cover a lot of
    scenarios: edge cases, corner cases, and potential failure points.'
  prefs: []
  type: TYPE_NORMAL
- en: Perform UX/usability testing. Test whether the users can easily use your software
    and that it meets the needs of the intended users (or those who actually use it).
    The software should be accessible to as many people as possible, not being biased
    on ability, but you might need to bias based on security.
  prefs: []
  type: TYPE_NORMAL
- en: Test the security aspects of the code, as mentioned before.
  prefs: []
  type: TYPE_NORMAL
- en: Document all tests well (test plans, test cases, and test results) so that the
    relevant people can understand and reproduce the needed tests.
  prefs: []
  type: TYPE_NORMAL
- en: Perform regression testing. Test the software again after updates so you can
    see that everything still works as needed.
  prefs: []
  type: TYPE_NORMAL
- en: See [*Chapter 3*](B21009_03.xhtml#_idTextAnchor073) for more on testing code.
  prefs: []
  type: TYPE_NORMAL
- en: This leads us to the next subsection on continuous improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous improvement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LLMs need continuous improvement from the start, as your first prompt probably
    won’t give you the desired, perfectly working code. You’ll almost always have
    to iterate between trying the code and asking the LLM for something a bit better.
  prefs: []
  type: TYPE_NORMAL
- en: After you have working code, you’ll still need to keep developing your code
    or someone else’s code.
  prefs: []
  type: TYPE_NORMAL
- en: Conduct regular peer reviews of LLM-generated code to look for issues. Continue
    to do unit and integration tests. In fact, you or your organization can construct
    **continuous integration/continuous deployment** ( **CI/CD** ) pipelines to do
    code quality checks and automated testing, among other things. This way, every
    change is tested before being merged into the code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Helpfully, the tech entrepreneur Gregory Zem has also provided some LLM-generated
    code best practices here: [https://medium.com/@mne/improving-llm-code-generation-my-best-practices-eb88b128303](mailto:https://medium.com/@mne/improving-llm-code-generation-my-best-practices-eb88b128303)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Following these best practices, teams can create a shared code base that is
    easy to read, maintain, and contribute to.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re an individual with no work development team, try to find friends in
    real life or online (LinkedIn, Discord, etc.) to bounce ideas off, pair programming
    with, share code, conduct code reviews, and test with.
  prefs: []
  type: TYPE_NORMAL
- en: Although the idea of a lone coder, hacker, or scientist being able to go off
    to a quiet room by themselves for a short time and quickly produce world-changing
    work is a popular image in some spheres, working by yourself and not asking anyone
    else for advice, feedback, or testing is not likely to help you produce the best
    code. This is because you cannot get fast feedback and extremely helpful opinions
    from others, either customers/end users or code development and critiquing types
    of friends, even book recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: You also can’t hear as quickly about new developments in the field, such as
    software or your chosen application.
  prefs: []
  type: TYPE_NORMAL
- en: For open source code, sharing it in the right way is much more important. Your
    project could lead to something used globally by millions or even billions of
    people. You can make your contribution and have an impact and take pride in your
    achievements.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge management – capturing and sharing expertise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Effective knowledge management is crucial for maximizing the value of LLM-generated
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating knowledge repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You could have a repository that overflows with tutorials, code snippets, and
    design patterns – that’s what a centralized repository can be. Platforms such
    as Confluence ( [https://www.atlassian.com/software/confluence](https://www.atlassian.com/software/confluence)
    ) or Notion ( [https://www.notion.so/](https://www.notion.so/) ) are perfect for
    storing code and documents, making them easily accessible for the whole team or
    group of friends [ *Atlassian_Confluence* , *Notion* ].
  prefs: []
  type: TYPE_NORMAL
- en: Code evolves, and so should our knowledge, so regularly updating and versioning
    these repositories ensures everyone’s working with the latest and best information.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting regular knowledge-sharing sessions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you’re in a development team, research group with individual projects,
    or just by yourself for now, share ideas and code with others to get amazing feedback
    and speed up your work.
  prefs: []
  type: TYPE_NORMAL
- en: Providing a basic bit of code that barely meets the requirements of your use
    or business case is the best place to start. Don’t ever do huge amounts of work
    without getting feedback on your code or its features. Never be a perfectionist,
    unless the customers require specific bits of perfect functionality and they’ve
    given you clear feedback. University work doesn’t require perfection, only good
    grades and speedy work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Time to brainstorm: if you have regular meetups where the team discusses new
    findings, insights, and best practices, these will be an excellent way to build
    team cohesion and learn from each other.'
  prefs: []
  type: TYPE_NORMAL
- en: Casual sessions where team members share interesting ideas and code they’ve
    discovered can help to encourage a culture of knowledge exchange and keep everyone
    learning and motivated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Humans work best when we are playing around with some cool toy or experimenting.
    So, having fun with new ideas and code and chatting about how they could be used
    is really valuable. Don’t just sit at your desk and eat your lunch, never talking.
    See what your colleagues and friends are saying when there’s no pressure on you
    to perform: breaks/lunch, drinks, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Peer mentorship – sharing the wisdom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mentorship programs can be a valuable tool for freeing knowledge transfer and
    collaboration within teams. By pairing seasoned developers with newcomer mentees,
    organizations can create a supportive environment where experienced professionals
    can share their expertise and guide others.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is clearly valuable for the mentee: they get the low-down on how things
    work and how people think about it. However, the mentor will also get to organize
    their thoughts and test and improve their knowledge as they have to educate the
    more junior people and answer questions from these juniors.'
  prefs: []
  type: TYPE_NORMAL
- en: A junior developer could always be older than a more experienced professional
    in that field of work.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, implementing a buddy system can facilitate a smooth onboarding
    process for new team members can be very helpful. By assigning a mentor to each
    new hire, organizations can ensure that knowledge is shared from day one, helping
    new employees become productive members of the team.
  prefs: []
  type: TYPE_NORMAL
- en: If implementing work shadowing, this should be done in a way that isn’t too
    mundane and enough knowledge is imparted. If you’re the junior member, to do work
    shadowing well, it’s important to be prepared, engaged, and proactive. Research
    the role you’re shadowing and come prepared with questions. Be an active observer,
    taking notes and asking questions throughout the experience. Show initiative and
    offer to assist whenever possible. Finally, follow up with the mentor after the
    shadowing experience to thank them and discuss the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re the mentor in the work shadowing process, provide clear guidance,
    share your expertise, encourage questions, and offer opportunities for the shadowing
    individual to participate in tasks. People mostly learn by doing. Evaluate their
    performance and provide feedback to help them develop their skills.
  prefs: []
  type: TYPE_NORMAL
- en: By prioritizing knowledge management, we can tap into the full potential of
    LLM-generated code. Imagine a team where expertise is readily available, and everyone’s
    constantly learning and growing. Now that’s a recipe for a skilled and successful
    team! [ *You.com* , *Gemini* ]
  prefs: []
  type: TYPE_NORMAL
- en: Making the best use of collaborative platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern software development thrives on collaborative platforms and tools that
    streamline communication and coordination among team members, as implied previously.
    These platforms are indispensable for ensuring that everyone is on the same page,
    from initial planning to final deployment. Let’s go through some good ways to
    get the most out of them and use them well.
  prefs: []
  type: TYPE_NORMAL
- en: Code review tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We mentioned code reviews, security, testing, and iteration earlier, but now
    we can focus more on some of those tools for reviewing code.
  prefs: []
  type: TYPE_NORMAL
- en: Code reviews are a critical component of the development process. They provide
    an opportunity for team members to offer constructive feedback and ensure the
    quality of the code. They help you when you’ve written code to avoid the embarrassment
    of putting code into production that doesn’t work. That’s embarrassing for the
    coder but also rather dangerous for the organization they work for. University
    work is more individual but it’s bad for the research group.
  prefs: []
  type: TYPE_NORMAL
- en: Platforms such as GitHub and GitLab come equipped with built-in code review
    features that make collaboration seamless. These tools allow developers to comment
    on specific lines of code, suggest changes, and approve modifications, all within
    the same interface. This not only improves code quality but also fosters a culture
    of continuous learning and improvement within the team.
  prefs: []
  type: TYPE_NORMAL
- en: Project management software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tracking progress and managing workflows are essential for any development team.
    Tools such as Jira and Trello are designed to help teams stay organized and on
    track. These platforms offer features such as task assignment, progress tracking,
    and deadline management, ensuring that everyone knows what needs to be done and
    when.
  prefs: []
  type: TYPE_NORMAL
- en: By implementing Agile methodologies through these tools, teams can be more dynamic
    and adaptable. They can respond quickly to changes and deliver high-quality software
    on time. Agile practices, supported by these project management tools, encourage
    regular check-ins, iterative development, and continuous feedback, all of which
    contribute to a more efficient and effective development process than other approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Jira
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jira (by Atlassian) is used a lot more in environments that follow Agile methodologies,
    especially Scrum and Kanban. It offers robust features for tracking issues, bugs,
    and tasks, making it good for larger teams and more complex projects. Jira’s customizable
    workflows and detailed reporting capabilities allow teams to tailor the tool to
    their specific processes. It also integrates well with other development tools,
    so it provides a lot of ways to manage the full software development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Trello
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Trello, on the other hand, is known for its simplicity and visual approach to
    project management. It uses a card-and-board system that is intuitive and easy
    to use, making it a great choice for smaller teams or projects that don’t need
    the extensive features of Jira. Trello’s flexibility allows teams to organize
    tasks in a way that suits their workflow, whether it’s for software development
    in teams or personal projects. It’s easy to use with a drag-and-drop interface
    and straightforward design for all technical levels.
  prefs: []
  type: TYPE_NORMAL
- en: Trello was developed by Fog Creek Software and is now developed by Atlassian,
    who bought it.
  prefs: []
  type: TYPE_NORMAL
- en: Miro
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Miro (by ServiceRocket Inc.) is an online whiteboard platform that can significantly
    enhance the productivity and collaboration of software development teams. By providing
    a centralized space for brainstorming, planning, and project management, Miro
    helps teams visualize ideas, track progress, and identify potential bottlenecks.
    Its intuitive interface and all its features make it an effective tool for developers,
    designers, and project managers to work together well.
  prefs: []
  type: TYPE_NORMAL
- en: Monday.com
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Monday.com is a rather versatile work management platform that offers a customizable
    interface, intuitive visual boards, and powerful automation features. By providing
    a centralized location for teams to manage tasks, track deadlines, and collaborate
    effectively, Monday.com can streamline workflows and improve overall efficiency.
    Its user-friendly interface and drag-and-drop functionality make it accessible
    to teams of all technical backgrounds, allowing them to quickly adapt the platform
    to their specific needs. Whether you’re managing marketing campaigns, software
    development sprints, or creative brainstorming sessions, Monday.com can provide
    a valuable tool for keeping your team organized and on track. Most of these platforms
    are used more broadly than software development.
  prefs: []
  type: TYPE_NORMAL
- en: Monday.com Dev is specifically built for software development teams. It has
    Git integration, bug tracking, code integration, Agile insights, and Kanban boards
    for software development.
  prefs: []
  type: TYPE_NORMAL
- en: Monday.com is the company name, too.
  prefs: []
  type: TYPE_NORMAL
- en: See also Confluence and Notion, as mentioned previously in the *Knowledge management*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: All of these platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These platforms also have large libraries of templates and pre-built frameworks
    provide a solid foundation for various software development activities, saving
    teams time and effort. From agile planning to user story mapping, these platforms
    offer all sorts of tools to support the entire software development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: These project management platforms offer integrations with a variety of other
    applications, enhancing their functionality and allowing teams to create a seamless
    workflow. Whether you need the detailed tracking and reporting of Jira, the visual
    brainstorming power of Miro, or the intuitive organization of Monday.com, a variety
    of project management platforms can significantly improve team collaboration and
    project management.
  prefs: []
  type: TYPE_NORMAL
- en: 'Integrations mean you can have seamless workflow management and real-time updates.
    Integrations stop you from having to switch between multiple tools, streamlining
    the development process and improving your efficiency:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira integrations** : Google, GitHub, Confluence, Bitbucket, CircleCI, Figma,
    Zoom, Slack, and a lot more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trello integrations** : Google Drive, MS Teams, Miro, Zapier, Jira Cloud,
    Slack, and a lot more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Miro integrations** : Google Workspace, GitHub, MS Teams, Figma, Zoom, Slack,
    Jira, Trello, and Monday.com'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monday.com integrations** : GitHub, GitLab, Bitbucket, Figma, Jira, Trello,
    Asana, Google Drive, OneDrive, MS Teams, Slack, and others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sources: [ *Gemini* , *Jira* , *Miro* , *Atlassian* , *Monday.com* ]'
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to communication channels, which is the topic of the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Communication channels – keeping the conversation flowing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Effective communication is the lifeblood of any successful team. The software
    world develops extremely quickly, so choosing the best communication channels
    can make a significant difference to your project outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Tools such as Slack ( [https://slack.com/](https://slack.com/) ), Microsoft
    Teams ( [https://www.microsoft.com/en-us/microsoft-teams/group-chat-software](https://www.microsoft.com/en-us/microsoft-teams/group-chat-software)
    ), Discord ( [https://discord.com/](https://discord.com/) ), and Simpplr ( [https://www.simpplr.com/](https://www.simpplr.com/)
    ) offer real-time communications. Quick questions, project updates, and brainstorming
    sessions can all happen instantly, fostering a sense of collaboration and helping
    teams resolve issues promptly.
  prefs: []
  type: TYPE_NORMAL
- en: Integrations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Collaboration platforms often integrate with communication tools, blurring the
    lines and creating a seamless workflow. Imagine discussing a task on your project
    management board and seamlessly jumping into a chat with your teammate to clarify
    details. Integrations like these can be a game-changer, boosting team productivity.
  prefs: []
  type: TYPE_NORMAL
- en: By choosing the right communication channels and utilizing their integrations
    effectively, teams can foster a collaborative environment that encourages information
    sharing, problem-solving, and ultimately, project success.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sofia de Mattia from crowd.dev also wrote an article about the best communication
    tools for developers: [https://www.crowd.dev/post/6-best-communication-tools-for-developer-communities](https://www.crowd.dev/post/6-best-communication-tools-for-developer-communities)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, you’ll see that enabling and helping to build a culture of collaboration
    in LLM-enhanced coding, like any coding, is essential for maximizing the potential
    of these amazing tools. These tools are being adapted very quickly, thus becoming
    more powerful and useful. Sharing code, implementing best practices, managing
    knowledge effectively, and utilizing collaborative platforms are all critical
    components of this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key takeaways from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Encourage teams to share code and learn from one another, enhancing the overall
    development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish guidelines for documentation, version control, testing, and coding
    standards to promote more effective code-sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and maintain repositories and conduct sharing sessions to ensure that
    expertise is captured and disseminated to improve your results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use project management tools to communicate goals and milestones, store files,
    and show progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the landscape of software development continues to evolve, the ability to
    collaborate effectively will be a defining factor in achieving success and driving
    progress in the field. The integration of LLMs into development processes presents
    an opportunity for teams to harness these tools collaboratively, creating a dynamic
    environment that builds innovation and continuous learning.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 10*](B21009_10.xhtml#_idTextAnchor249) , we’ll be focusing on non-LLM
    tools, code completion and generation tools, static code analysis and code review
    tools, and testing and debugging tools.
  prefs: []
  type: TYPE_NORMAL
- en: Bibliography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Apache_Projects* : *Apache Projects Directory* , Apache Software Foundation
    Team, [https://projects.apache.org/](https://projects.apache.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Apache_SF* : *Apache HTTP Server Project* , Brian Behlendorf, Ken Coar, Mark
    Cox, Lars Eilebrecht, Ralf S. Engelschall, Roy T. Fielding, Dean Gaudet, Ben Hyde,
    Jim Jagielski, Alexei Kosut, Martin Kraemer, Ben Laurie, Doug MacEachern, Aram
    M. Mirzadeh, Sameer Parekh, Cliff Skolnick, Marc Slemko, William (Bill) Stoddard,
    Paul Sutton, Randy Terbush, Dirk-Willem van Gulik, [https://httpd.apache.org](https://httpd.apache.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Atlassian_Confluence* : *Confluence* , Atlassian Team, [https://www.atlassian.com/software/confluence](https://www.atlassian.com/software/confluence)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CBT_Nuggets* : *Linux Kernel Development: A Worldwide Effort* , Graeme Messina,
    [https://www.cbtnuggets.com/blog/technology/programming/linux-kernel-development](https://www.cbtnuggets.com/blog/technology/programming/linux-kernel-development)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Choose_License* : *Licenses* , GitHib Inc., [https://choosealicense.com/licenses/](https://choosealicense.com/licenses/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ESLint* : *The pluggable linting utility for JavaScript and JSX* , Nicholas
    C. Zakas and the ESLint Team, [https://eslint.org/](https://eslint.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub_Octoverse* : *Octoverse: The state of open source and rise of AI in
    2023* , Kyle Daigle and GitHub Staff, [https://github.blog/news-insights/research/the-state-of-open-source-and-ai/](https://github.blog/news-insights/research/the-state-of-open-source-and-ai/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Jira* : “Project Management Software”, Atlassian Team, [https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Linux_Foundation* : *Open Source Guides: Participating in Open Source Communities*
    , The Linux Foundation, [https://www.linuxfoundation.org/resources/open-source-guides/participating-in-open-source-communities](https://www.linuxfoundation.org/resources/open-source-guides/participating-in-open-source-communities)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Microsoft Teams* : *Microsoft Teams* , Microsoft Corporation, [https://www.microsoft.com/en-us/microsoft-teams/group-chat-software](https://www.microsoft.com/en-us/microsoft-teams/group-chat-software)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Miro* : *Innovate faster with Miro, the AI-powered visual workspace* , Miro,
    [https://miro.com/](https://miro.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*MkDocs* : *MkDocs Documentation* , Tom Christie and the MkDocs Team, [https://www.mkdocs.org/](https://www.mkdocs.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Monday.com* : *Your go-to work platform* , Monday.com, [https://monday.com/](https://monday.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Notion* : *All-in-one workspace* , Notion Labs Inc., [https://www.notion.so/](https://www.notion.so/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Pylint* : *Pylint - Python Code Static Checker* , Sylvain Thénault and the
    Pylint Team, [https://pylint.pycqa.org/en/latest/](https://pylint.pycqa.org/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Slack* : *Slack: Where Work Happens* , Slack Technologies., [https://slack.com](https://slack.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Sphinx* : *Sphinx Documentation Generator* , Georg Brandl and the Sphinx Team.,
    [https://www.sphinx-doc.org/en/master/](https://www.sphinx-doc.org/en/master/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*SpringerLink* : *Apache Web Server* , SpringerLink Team, [https://link.springer.com/](https://link.springer.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Techjury* : *19 Surprising Linux Statistics Not Everyone Knew* , Muninder
    Adavelli, [https://techjury.net/blog/linux-statistics](https://techjury.net/blog/linux-statistics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Trello* : *Trello - Organize Anything* , Trello Team, [https://trello.com](https://trello.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*W3Techs* : *Usage statistics of Apache* , W3Techs, [https://w3techs.com/technologies/details/ws-apache](https://w3techs.com/technologies/details/ws-apache)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wiki_Apache* : *Apache HTTP Server* , various editors and authors, [https://en.wikipedia.org/wiki/Apache_HTTP_Server](https://en.wikipedia.org/wiki/Apache_HTTP_Server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wiki_Ken_Coar* : *Ken Coar -* *Wikipedia* , [https://en.wikipedia.org/wiki/Ken_Coar](https://en.wikipedia.org/wiki/Ken_Coar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wikiwand* : *Apache HTTP Server -* *Wikipedia* , [https://www.wikiwand.com/en/Apache_HTTP_Server](https://www.wikiwand.com/en/Apache_HTTP_Server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*You.com* : [https://you.com/](https://you.com/) , also the Android app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
