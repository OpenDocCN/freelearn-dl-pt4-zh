["```py\nFeature_1 (F1): The last word of the unfinished sentence.\nFeature_2 (F2): The 2nd last word of the unfinished sentence.\nFeature_3 (F3): The 3rd last word of the unfinished sentence.\n… and so on.\n```", "```py\nCase 1: All features with a lookback window of 10.\n{F1, F2, F3, …, F8, F9, F10}\nCase 2: The 10th last word to the 5th last word\n{F5, F6, F7, F8, F9, F10}\nCase 3: All even positioned last words till the 10th position\n{F2, F4, F6, F8, F10}\n```", "```py\nR1: As the sun set over the horizon, the sky turned a fiery (orange).\nR2: As the sun set over the horizon, the clouds glowed with a golden (hue).\nR3: As the sun set over the horizon, the ocean shimmered with reflected (light).\nR4: As the sun set over the horizon, the landscape transformed into a (silhouette).\n```", "```py\nfunction DeepWalk(Graph G, walk_length L, num_walks R, dimensions d):\n    Initialize walks = []\n    for each node v in G:\n        for i = 1 to R:\n            walk = RandomWalk(G, v, L)\n            append walk to walks\n    model = Word2Vec(walks, dimensions=d)\n    return model\nfunction RandomWalk(Graph G, start_node v, length L):\n    walk = [v]\n    for i = 1 to L:\n        neighbors = GetNeighbors(G, v)\n        next_node = RandomChoice(neighbors)\n        append next_node to walk\n        v = next_node\n    return walk\n```", "```py\nfunction Node2Vec(Graph G, walk_length L, num_walks R, dimensions d, p, q):\n    Initialize walks = []\n    for each node v in G:\n        for i = 1 to R:\n            walk = BiasedRandomWalk(G, v, L, p, q)\n            append walk to walks\n    model = Word2Vec(walks, dimensions=d)\n    return model\nfunction BiasedRandomWalk(Graph G, start_node v, length L, p, q):\n    walk = [v]\n    for i = 1 to L:\n        current = walk[-1]\n        previous = walk[-2] if len(walk) > 1 else None\n        next_node = SampleNextNode(G, current, previous, p, q)\n        append next_node to walk\n    return walk\n```"]