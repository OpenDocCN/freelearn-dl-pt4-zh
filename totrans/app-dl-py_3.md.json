["```py\n  url = 'https://jupyter.org/'\n  req = requests.Request('GET', url)\n  req.headers['User-Agent'] = 'Mozilla/5.0'\n  req = req.prepare() \n```", "```py\n  with requests.Session() as sess:\n  page = sess.send(req)\n```", "```py\n  from bs4 import BeautifulSoup\n  print(BeautifulSoup(page_html, 'html.parser').prettify()[:1000])\n\n```", "```py\n  from IPython.display import HTML\n  HTML(page_html) \n```", "```py\n  from IPython.display import IFrame\n  IFrame(src=url, height=800, width=800) \n```", "```py\n  url = 'http://www.python.org/'\n  page = requests.get(url)\n  page\n  <Response [200]> \n```", "```py\n  from bs4 import BeautifulSoup\n  soup = BeautifulSoup(page.content, 'html.parser') \n```", "```py\n try:\n import pdir\n dir = pdir\n except:\n print('You can install pdir with:\\npip install pdir2')\n dir(soup) \n```", "```py\n      h1 = soup.find_all('h1')\n      h1\n      >> [<h1 class=\"firstHeading\" id=\"firstHeading\" lang=\"en\">\n      List of countries by central bank interest rates</h1>] \n```", "```py\n       >> {'class': ['firstHeading'], 'id': 'firstHeading', 'lang': 'en'} \n```", "```py\n      imgs = soup.find_all('img')\n      len(imgs)\n      >> 91 \n```", "```py\n      [element.attrs['src'] for element in imgs\n        if 'src' in element.attrs.keys()] \n```", "```py\n     body_content = soup.find('div', {'id': 'bodyContent'}) \n```", "```py\n table_headers = body_content.find_all('th')[:3]\n table_headers\n >>> [<th>Country or<br/>\n currency union</th>, <th>Central bank<br/>\n interest rate (%)</th>, <th>Date of last<br/>\n change</th>] \n```", "```py\n      table_headers = [element.get_text().replace('\\n', ' ')\n      for element in table_headers]\n      table_headers\n      >> ['Country or currency union',\n      'Central bank interest rate (%)',\n      'Date of last change']\n```", "```py\n      row_number = 2\n      d1, d2, d3 = body_content.find_all('tr')[row_number]\\.find_all('td')\n```", "```py\n       d3.find_all('span')[0].text\n       >> '30 June 2016' \n```", "```py\n       data = []\n       for i, row in enumerate(body_content.find_all('tr')):\n       ...\n       ...\n       >> Ignoring row 101 because len(data) != 3\n       >> Ignoring row 102 because len(data) != 3 \n```", "```py\n      >> [['Albania', 1.25, '4 May 2016'],\n      ['Angola', 16.0, '30 June 2016'],\n      ['Argentina', 26.25, '11 April 2017'],\n      ['Armenia', 6.0, '14 February 2017'],\n      ['Australia', 1.5, '2 August 2016'],\n      ['Azerbaijan', 15.0, '9 September 2016'],\n      ['Bahamas', 4.0, '22 December 2016'],    \n      ['Bahrain', 1.5, '14 June 2017'],\n      ['Bangladesh', 6.75, '14 January 2016'],\n      ['Belarus', 12.0, '28 June 2017']] \n```", "```py\n       f_path = '../data/countries/interest-rates.csv'\n       with open(f_path, 'w') as f:\n         f.write('{};{};{}\\n'.format(*table_headers))\n         for d in data:\n           f.write('{};{};{}\\n'.format(*d))\n```", "```py\n      data = []\n      for i, row in enumerate(soup.find_all('tr')):\n          row_data = row.find_all('td')\n              try:\n                  d1, d2, d3 = row_data[1], row_data[5], row_data[6]\n                  d1 = d1.find('a').text\n                  d2 = float(d2.text)\n                  d3 = d3.find_all('span')[1].text.replace('+', '')\n              data.append([d1, d2, d3])\n          except:\n      print('Ignoring row {}'.format(i)) \n```", "```py\n      url ='http://www.worldometers.info/world-population/\n                population-bycountry/'\n      IFrame(url, height=300, width=800)\n```", "```py\n       page = requests.get(url)\n       soup = BeautifulSoup(page.content,'html.parser') \n```", "```py\n      soup.find_all('h1')\n      >> [<h1>Countries in the world by population (2017)</h1>] \n```", "```py\n        table_headers = soup.find_all('th')\n        table_headers\n        >> [<th>#</th>,\n            <th>Country (or dependency)</th>,\n            <th>Population<br/> (2017)</th>,\n           <th>Yearly<br/> Change</th>,\n            <th>Net<br/> Change</th>,\n            <th>Density<br/> (P/Km²)</th>,\n            <th>Land Area<br/> (Km²)</th>,\n           <th>Migrants<br/> (net)</th>,\n            <th>Fert.<br/> Rate</th>,\n            <th>Med.<br/> Age</th>,\n            <th>Urban<br/> Pop %</th>,\n           <th>World<br/> Share</th>] \n```", "```py\n      table_headers = table_headers[1:4]\n      table_headers = [t.text.replace('\\n', '') for t in table_headers]\n```", "```py\n     row_number = 2\n     row_data = soup.find_all('tr')[row_number]\\.find_all('td') \n```", "```py\n      >> [<td>2</td>,\n      <td style=\"font-weight: bold; font-size:15px; text-align:left\"><a\n      href=\"/world-population/india-population/\">India</a></td>,\n      <td style=\"font-weight: bold;\">1,339,180,127</td>,\n      <td>1.13 %</td>]\n```", "```py\n      d1, d2, d3 = row_data[1:4] \n\n```", "```py\n       print(d1.find('a').text)\n       print(d2.text)\n       print(d3.text)\n       >> India\n       >> 1,339,180,127\n       >> 1.13 % \n```", "```py\n      ata = []\n      for i, row in enumerate(soup.find_all('tr')):\n         try:\n             d1, d2, d3 = row.fid_all('td')[1:4]\n             d1 = d1.fid('a').text\n             d2 = d2.text\n             d3 = d3.text\n             data.append([d1, d2, d3])\n         except:\n             print('Error parsing row {}'.format(i))\n\n         >> Error parsing row 0 \n```", "```py\n      >> [['China', '1,409,517,397', '0.43 %'],\n      ['India', '1,339,180,127', '1.13 %'],\n      ['U.S.', '324,459,463', '0.71 %'],\n      ['Indonesia', '263,991,379', '1.10 %'],    \n      ['Brazil', '209,288,278', '0.79 %'],\n      ['Pakistan', '197,015,955', '1.97 %'],\n      ['Nigeria', '190,886,311', '2.63 %'],\n      ['Bangladesh', '164,669,751', '1.05 %'],\n      ['Russia', '143,989,754', '0.02 %'],\n      ['Mexico', '129,163,276', '1.27 %']] \n```", "```py\n      f_path = '../data/countries/populations.csv'\n      with open(f_path, 'w') as f:\n        f.write('{};{};{}\\n'.format(*table_headers))\n        for d in data:\n          f.write('{};{};{}\\n'.format(*d)) \n```", "```py\n        with open('../data/countries/interest-rates.csv', 'r') as f:\n          int_rates_col_names = next(f).split(',')\n          int_rates = [line.split(',') for line in f.read().splitlines()]\n        with open('../data/countries/populations.csv', 'r') as f:\n          populations_col_names = next(f).split(',')\n          populations = [line.split(',') for line in f.read().splitlines()] \n```", "```py\n      print(int_rates_col_names)\n      int_rates[:5]\n      >> ['Country or currency union', 'Central bank interest ...    \n      ...\n      ['Indonesia', '263', '991', '379', '1.10 %'],    \n      ['Brazil', '209', '288', '278', '0.79 %']] \n```", "```py\n      df_int_rates = pd.DataFrame(int_rates,columns=int_rates_col_names)\n      df_populations = pd.DataFrame(populations,\n                      columns=populations_col_names) \n\n```", "```py\n      pd.options.display.max_rows = 10 \n```", "```py\n      df_int_rates \n```", "```py\n      df_int_rates.dtypes\n      >> Country or currency union object\n      >> Central bank interest rate (%) object\n      >> Date of last change object\n      >> dtype: object \n```", "```py\n        df_int_rates['Central bank interest rate (%)'] = \\\n        df_int_rates['Central bank interest rate (%)']\\\n        .astype(float,copy=False)\n        df_int_rates['Date of last change'] = \\\n        pd.to_datetime(df_int_rates['Date of last change']) \n```", "```py\n      df_int_rates.dtypes\n        >> Country or currency union             object\n        >> Central bank interest rate (%)        float64\n        >> Date of last change             datetime64[ns]\n        >> dtype: object\n```", "```py\n df_populations \n```", "```py\n      df_populations['Population (2017)'] = df_populations['Population\n      (2017)']\\.str.replace(',', '')\\\n      .astype(float, copy=False)\n      df_populations['Yearly Change'] = df_populations['Yearly Change']\\\n      .str.rstrip('%')\\\n      .astype(float, copy=False) \n```", "```py\n       df_merge = pd.merge(df_populations,\n         df_int_rates,\n         left_on='Country (or dependency)',\n         right_on='Country or currency union',\n         how='outer'\n       df_merge\n\n```", "```py\n      df_merge.sort_values('Population (2017)', ascending=False)\\ .head(10)\n```", "```py\n      col = 'Country (or dependency)'    \n      df_populations.loc[df_populations[col] == 'U.S.'] = 'United States'\n```", "```py\n      df_merge = pd.merge(df_populations,\n                    df_int_rates,\n                    left_on='Country (or dependency)',\n                    right_on='Country or currency union',\n                    how='inner') \n```", "```py\n      del df_merge['Country or currency union'] \n```", "```py\n      name_map = {'Country (or dependency)': 'Country',\n          'Population (2017)': 'Population',\n          'Central bank interest rate (%)': 'Interest rate'}\n\n      df_merge = df_merge.rename(columns=name_map)     \n```", "```py\n      df_merge.to_csv('../data/countries/merged.csv', index=False)\n```", "```py\n      from bokeh.plotting \n      import figure, show, output_notebook output_notebook()\n```", "```py\n      np.random.seed(30)\n      data = pd.Series(np.random.randn(200),\n      index=list(range(200)))\\\n      .cumsum()\n      x = data.index\n      y = data.values\n```", "```py\n      p = figure(title='Example plot', x_axis_label='x', y_axis_label='y') \n      p.line(x, y, legend='Random trend') show(p)\n```", "```py\n      size = np.random.rand(200) * 5\n      p = figure(title='Example plot', x_axis_label='x', y_axis_label='y')\n      p.circle(x, y, radius=size, alpha=0.5, legend='Random dots')\n      show(p) \n```", "```py\n      p.circle(x, y, radius=size, alpha=0.5, legend='Random dots') show(p)\n```", "```py\n      source = ColumnDataSource(data=dict(\n      x=x,\n      y=y,\n      ...\n      ...\n      source=source,\n        legend='Random dots')\n      show(p) \n```", "```py\n     from bokeh.models \n     import PanTool, BoxZoomTool, WheelZoomTool, ResetTool\n     ...\n     ...\n        legend='Random dots')\n        show(p)\n```", "```py\n      df = pd.read_csv('../data/countries/merged.csv')\n      df['Date of last change'] = pd.to_datetime(df['Date of last change']) \n```", "```py\n      source = ColumnDataSource(data=dict(\n          x=df['Interest rate'],\n          y=df['Population'],\n          desc=df['Country'],\n       ))\n       hover = HoverTool(tooltips=[\n          ('Country', '@desc'),\n          ('Interest Rate (%)', '@x'),\n          ('Population', '@y')    \n       ])\n       tools = [hover, PanTool(), BoxZoomTool(), \n       WheelZoomTool(), ResetTool()]\n          p = figure(tools=tools,\n          x_axis_label='Interest Rate (%)',\n          y_axis_label='Population')\n       p.circle('x', 'y', size=10, alpha=0.5, source=source)\n       show(p) \n```", "```py\n      def get_year(x):\n        year = x.strftime('%Y')\n        if year in ['2018', '2017', '2016']:\n            return year\n      else:         \n            return 'Other'\n      df['Year of last change'] = df['Date of last change'].apply(get_year)\n```", "```py\n      year_to_color = {\n      '2018': 'black',\n      '2017': 'blue',\n      '2016': 'orange',\n      'Other':'red'\n      } \n```", "```py\n      source = ColumnDataSource(data=dict(\n      x=df['Interest rate'],\n      ...\n      ...\n          fill_color='colors', line_color='black',\n          legend='label')\n      show(p) \n```", "```py\n      source = ColumnDataSource(data=dict(\n          x=df['Yearly Change'],\n      ...\n      ...\n      p.circle('x', 'y', size=10, alpha=0.5, source=source,    \n      radius='radii')\n      show(p) \n```", "```py\n        from sklearn.linear_model import LinearRegression\n        X = df['Yearly Change'].values.reshape(-1, 1)\n        y = df['Interest rate'].values\n        weights = np.sqrt(df['Population'])/1e5\n        lm = LinearRegression()\n        lm.fit(X, y, sample_weight=weights)\n        lm_x = np.linspace(X.flatten().min(), X.flatten().max(), 50)\n        lm_y = lm.predict(lm_x.reshape(-1, 1)) \n```", "```py\n      source = ColumnDataSource(data=dict(\n          x=df['Yearly Change'],\n          y=df['Interest rate'],\n       ...\n       ...\n       p.line('x', 'y', line_width=2, line_color='red',\n          source=lm_source)\n          show(p)\n```"]