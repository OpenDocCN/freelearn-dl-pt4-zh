["```py\n    import networkx as nx\n    import random\n    random.seed(0)\n    import numpy as np\n    np.random.seed(0)\n    G = nx.erdos_renyi_graph(10, 0.3, seed=1, directed=False)\n    ```", "```py\n    def next_node(previous, current, p, q):\n    ```", "```py\n            neighbors = list(G.neighbors(current))\n            alphas = []\n    ```", "```py\n        for neighbor in neighbors:\n            if neighbor == previous:\n                alpha = 1/p\n            elif G.has_edge(neighbor, previous):\n                alpha = 1\n            else:\n                alpha = 1/q\n            alphas.append(alpha)\n    ```", "```py\n    probs = [alpha / sum(alphas) for alpha in alphas]\n    ```", "```py\n        next = np.random.choice(neighbors, size=1, p=probs)[0]\n        return next\n    ```", "```py\ndef random_walk(start, length, p, q):\n    walk = [start]\n    for i in range(length):\n        current = walk[-1]\n        previous = walk[-2] if len(walk) > 1 else None\n        next = next_node(previous, current, p, q)\n        walk.append(next)\n    return [str(x) for x in walk]\n```", "```py\nrandom_walk(0, 8, p=1, q=1)\n```", "```py\n[0, 4, 7, 6, 4, 5, 4, 5, 6]\n```", "```py\nrandom_walk(0, 8, p=1, q=10)\n```", "```py\n[0, 9, 1, 9, 1, 9, 1, 0, 1]\n```", "```py\nrandom_walk(0, 8, p=10, q=1)\n```", "```py\n[0, 1, 9, 4, 7, 8, 7, 4, 6]\n```", "```py\n    !pip install -qI gensim==3.8.0\n    ```", "```py\n    from gensim.models.word2vec import Word2Vec\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.metrics import accuracy_score\n    ```", "```py\n    G = nx.karate_club_graph()\n    ```", "```py\n    labels = []\n    for node in G.nodes:\n        label = G.nodes[node]['club']\n        labels.append(1 if label == 'Officer' else 0)\n    ```", "```py\n    walks = []\n    for node in G.nodes:\n        for _ in range(80):\n            walks.append(random_walk(node, 10, 3, 2))\n    ```", "```py\n    node2vec = Word2Vec(walks,\n                    hs=1,   # Hierarchical softmax\n                    sg=1,   # Skip-gram\n                    vector_size=100,\n                    window=10,\n                    workers=2,\n                    min_count=1,\n                    seed=0)\n    ```", "```py\n    node2vec.train(walks, total_examples=node2vec.corpus_count, epochs=30, report_delay=1)\n    ```", "```py\n    train_mask = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n    train_mask_str = [str(x) for x in train_mask]\n    test_mask = [0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]\n    test_mask_str = [str(x) for x in test_mask]\n    labels = np.array(labels)\n    ```", "```py\n    clf = RandomForestClassifier(random_state=0)\n    clf.fit(node2vec.wv[train_mask_str], labels[train_mask])\n    ```", "```py\n    y_pred = clf.predict(node2vec.wv[test_mask_str])\n    acc = accuracy_score(y_pred, labels[test_mask])\n    print(f'Node2Vec accuracy = {acc*100:.2f}%')\n    ```", "```py\n    from io import BytesIO\n    from urllib.request import urlopen\n    from zipfile import ZipFile\n    url = 'https://files.grouplens.org/datasets/movielens/ml-100k.zip'\n    with urlopen(url) as zurl:\n        with ZipFile(BytesIO(zurl.read())) as zfile:\n            zfile.extractall('.')\n    ```", "```py\n    import pandas as pd\n    ratings = pd.read_csv('ml-100k/u.data', sep='\\t', names=['user_id', 'movie_id', 'rating', 'unix_timestamp'])\n    ratings\n    ```", "```py\n         user_id movie_id rating unix_timestamp\n    0     196      242      3      881250949\n    1     186      302      3      891717742\n    2      22      377      1      878887116\n    ...    ...     ...     ...      ...\n    99998  13      225      2      882399156\n    99999  12      203      3      879959583\n    100000 rows × 4 columns\n    ```", "```py\n    movies = pd.read_csv('ml-100k/u.item', sep='|', usecols=range(2), names=['movie_id', 'title'], encoding='latin-1')\n    ```", "```py\n    movies\n         movie_id      title\n    0      1      Toy Story (1995)\n    1      2      GoldenEye (1995)\n    2      3      Four Rooms (1995)\n    ...      ...      ...\n    1680      1681      You So Crazy (1994)\n    1681      1682      Scream of Stone (Schrei aus Stein) (1991)\n    1682 rows × 2 columns\n    ```", "```py\n    ratings = ratings[ratings.rating >= 4]\n    ratings\n    ```", "```py\n         user_id   movie_id    rating      unix_timestamp\n    5      298      474      4      884182806\n    7      253      465      5      891628467\n    11     286      1014     5      879781125\n    ...      ...      ...      ...      ...\n    99991      676      538      4      892685437\n    99996      716      204      5      879795543\n    55375 rows × 4 columns\n    ```", "```py\n    from collections import defaultdict\n    pairs = defaultdict(int)\n    ```", "```py\n    for group in ratings.groupby(\"userId\"):\n    ```", "```py\n    user_movies = list(group[1][\"movieId\"])\n    ```", "```py\n    for i in range(len(user_movies)):\n                for j in range(i+1, len(user_movies)):\n                    pairs[(user_movies[i], user_movies[j])] += 1\n    ```", "```py\n    G = nx.Graph()\n    ```", "```py\n    for pair in pairs:\n        movie1, movie2 = pair\n        score = pairs[pair]\n    ```", "```py\n    if score >= 20:\n        G.add_edge(movie1, movie2, weight=score)\n    ```", "```py\n    !pip install node2vec\n    from node2vec import Node2Vec\n    ```", "```py\n    node2vec = Node2Vec(G, dimensions=64, walk_length=20, num_walks=200, p=2, q=1, workers=1)\n    ```", "```py\n    model = node2vec.fit(window=10, min_count=1, \n    batch_words=4)\n    ```", "```py\n    def recommend(movie):\n        movie_id = str\n            movies.title == movie].movie_ id.values[0])\n    ```", "```py\n        for id in model.wv.most_similar(movie_id)[:5]:\n            title = movies[movies.movie_id == int(id[0])].title.values[0]\n            print(f'{title}: {id[1]:.2f}')\n    ```", "```py\n    recommend('Star Wars (1977)')\n    ```", "```py\n    Return of the Jedi (1983): 0.61\n    Raiders of the Lost Ark (1981): 0.55\n    Godfather, The (1972): 0.49\n    Indiana Jones and the Last Crusade (1989): 0.46\n    White Squall (1996): 0.44\n    ```"]