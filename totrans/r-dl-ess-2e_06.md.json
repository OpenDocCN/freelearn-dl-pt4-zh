["```py\nFor k=10000 to 200000 step 1000\n   For n=1 to 5\n       [sample] = Take k rows from dataset\n       Split [sample] into train (80%) / test (20%)\n       Run ML (DT) algorithm\n       Calculate Accuracy on test\n       Save accuracy value\nPlot k, avg(Accuracy)\n```", "```py\n      Predicted\nActual     0     1\n 0     10714  4756\n 1      3870 19649\n```", "```py\nrotateInstance <-function (df,degrees)\n{\n  mat <- as.matrix(df)\n  mat2 <- rotateImage(mat, degrees, threads = 1)\n  df <- data.frame(mat2)\n  return (df)\n}\n```", "```py\n## pred.label\n## test.y   0   1   2   3   4   5   6   7   8   9\n##      0 412   0   0   1   0   0   3   0   0   0\n##      1   0 447   1   2   0   0   0   5   0   0\n##      2   0   0 437   1   2   0   0   1   0   0\n##      3   0   0   3 432   0   0   0   1   1   0\n##      4   0   0   0   0 396   1   0   0   0   3\n##      5   1   0   0   1   0 378   1   0   0   1\n##      6   1   1   0   0   0   0 434   0   1   0\n##      7   0   1   2   0   1   0   0 398   0   1\n##      8   0   0   2   1   0   0   0   1 419   0\n##      9   0   0   0   0   5   0   0   1   1 399\naccuracy2 <- sum(res$test.y == res$pred.label) / nrow(res)\nThe accuracy of our model with augmented train data is 0.9885714.\n```", "```py\ntest_data <- read.csv(\"../data/test_augment.csv\", header=TRUE)\ntest.y <- test_data[,1]\ntest <- data.matrix(test_data)\ntest <- test[,-1]\ntest <- t(test/255)\ntest.array <- test\ndim(test.array) <- c(28, 28, 1, ncol(test))\n\npreds3 <- predict(model2, test.array)\ndfPreds3 <- as.data.frame(t(preds3))\n# res is a data frame with our predictions after train data augmentation,\n# i.e. 4200 rows\nres$pred.label2 <- 0\nfor (i in 1:nrow(res))\n{\n   sum_r <- dfPreds3[((i-1)*3)+1,] +\n            dfPreds3[((i-1)*3)+2,] + dfPreds3[(i*3),] \n   res[i,\"pred.label2\"] <- max.col(sum_r)-1\n}\naccuracy3 <- sum(res$test.y == res$pred.label2) / nrow(res)\nThe accuracy of our CNN model with augmented train data and Test Time Augmentation (TTA) is 0.9895238.\n```", "```py\ntta_incorrect <- nrow(res[res$test.y != res$pred.label2 & res$test.y == res$pred.label,])\ntta <- res[res$test.y == res$pred.label2 & res$test.y != res$pred.label,c(\"pred.label\",\"pred.label2\")]\n\nNumber of rows where Test Time Augmentation (TTA) changed the prediction to the correct value 9 (nrow(tta)).\nNumber of rows where Test Time Augmentation (TTA) changed the prediction to the incorrect value 5 (tta_incorrect).\n\ntta\n##     pred.label pred.label2\n## 39           9           4\n## 268          9           4\n## 409          9           4\n## 506          8           6\n## 1079         2           3\n## 1146         7           2\n## 3163         4           9\n## 3526         4           2\n## 3965         2           8\n```", "```py\nexpand.grid(\n layers=c(1,4),\n lr=c(0.01,0.1,0.5,1.0),\n l1=c(0.1,0.5))\n   layers    lr   l1\n1       1  0.01  0.1\n2       4  0.01  0.1\n3       1  0.10  0.1\n4       4  0.10  0.1\n5       1  0.50  0.1\n6       4  0.50  0.1\n7       1  1.00  0.1\n8       4  1.00  0.1\n9       1  0.01  0.5\n10      4  0.01  0.5\n11      1  0.10  0.5\n12      4  0.10  0.5\n13      1  0.50  0.5\n14      4  0.50  0.5\n15      1  1.00  0.5\n16      4  1.00  0.5\n```", "```py\npar(mfrow = c(2, 1))\nplot(\n  seq(0, .5, by = .001),\n  dbeta(seq(0, .5, by = .001), 1, 12),\n  type = \"l\", xlab = \"x\", ylab = \"Density\",\n  main = \"Density of a beta(1, 12)\")\n\nplot(\n  seq(0, 1, by = .001)/2,\n  dbeta(seq(0, 1, by = .001), 1.5, 1),\n  type = \"l\", xlab = \"x\", ylab = \"Density\",\n  main = \"Density of a beta(1.5, 1) / 2\")\n```", "```py\n# add feature (bad_var) that is highly correlated to the variable to be predicted\ndfData$bad_var <- 0\ndfData[dfData$Y_categ==1,]$bad_var <- 1\ndfData[sample(nrow(dfData), 0.02*nrow(dfData)),]$bad_var <- 0\ndfData[sample(nrow(dfData), 0.02*nrow(dfData)),]$bad_var <- 1\ntable(dfData$Y_categ,dfData$bad_var)\n       0    1\n  0 1529   33\n  1   46 2325\ncor(dfData$Y_categ,dfData$bad_var)\n[1] 0.9581345\n\nnobs <- nrow(dfData)\ntrain <- sample(nobs, 0.8*nobs)\nvalidate <- sample(setdiff(seq_len(nobs), train), 0.1*nobs)\ntest <- setdiff(setdiff(seq_len(nobs), train),validate)\npredictorCols <- colnames(dfData)[!(colnames(dfData) %in% c(\"CUST_CODE\",\"Y_numeric\",\"Y_categ\"))]\n\n# remove columns with zero variance in train-set\npredictorCols <- predictorCols[apply(dfData[train, predictorCols], 2, var, na.rm=TRUE) != 0]\n\n# for our test data, set the bad_var to zero\n# our test dataset is not from the same distribution\n# as the data used to train and evaluate the model\ndfData[test,]$bad_var <- 0\n\n# look at all our predictor variables and \n# see how they correlate with the y variable\ncorr <- as.data.frame(cor(dfData[,c(predictorCols,\"Y_categ\")]))\ncorr <- corr[order(-corr$Y_categ),]\nold.par <- par(mar=c(7,4,3,1))\n\nbarplot(corr[2:11,]$Y_categ,names.arg=row.names(corr)[2:11],\n        main=\"Feature Correlation to target variable\",cex.names=0.8,las=2)\npar(old.par)\n```", "```py\n#### Verifying the model using LIME\n\n# compare performance on validation and test set \nprint(sprintf(\" Deep Learning Model accuracy on validate (expected in production) = %1.2f%%\",acc_v))\n[1] \" Deep Learning Model accuracy on validate (expected in production) = 90.08%\"\nprint(sprintf(\" Deep Learning Model accuracy in (actual in production) = %1.2f%%\",acc_t))\n[1] \" Deep Learning Model accuracy in (actual in production) = 66.50%\"\n```", "```py\n# apply LIME to MXNet deep learning model\nmodel_type.MXFeedForwardModel <- function(x, ...) {return(\"classification\")}\npredict_model.MXFeedForwardModel <- function(m, newdata, ...)\n{\n  pred <- predict(m, as.matrix(newdata),array.layout=\"rowmajor\")\n  pred <- as.data.frame(t(pred))\n  colnames(pred) <- c(\"No\",\"Yes\")\n  return(pred)\n}\nexplain <- lime(dfData[train, predictorCols], model, bin_continuous = FALSE)\n```", "```py\nval_first_10 <- validate[1:10]\n\nexplaination <- lime::explain(dfData[val_first_10, predictorCols],explainer=explain,\n                              n_labels=1,n_features=3)\nplot_features(explaination) + labs(title=\"Churn Model - variable explanation\")\n```"]