["```py\nnano .bashrc.\n```", "```py\n$SPARK_HOME/bin/pyspark.\n```", "```py\n$SPARK_HOME/bin/pyspark --packages databricks:spark-deep-learning:0.1.0-spark2.1-s_2.11.\n```", "```py\nsource .bashrc.\n```", "```py\npip install tensorflow==1.4.1\npip install keras==2.1.5\npip install sparkdl\npip install tensorframes\npip install kafka\npip install py4j\npip install tensorflowonspark\npip install jieba\n```", "```py\nspark = SparkSession.builder \\\n      .master(\"local\") \\\n      .appName(\"ImageClassification\") \\\n      .config(\"spark.executor.memory\", \"6gb\") \\\n      .getOrCreate()\n```", "```py\nimport pyspark.sql.functions as f\nimport sparkdl as dl\n```", "```py\ndfMessi = dl.readImages('football/messi/').withColumn('label', f.lit(0))\ndfRonaldo = dl.readImages('football/ronaldo/').withColumn('label',             f.lit(1))\n```", "```py\ntrainDFmessi, testDFmessi = dfMessi.randomSplit([66.7, 33.3], seed = 12)\ntrainDFronaldo, testDFronaldo = dfRonaldo.randomSplit([66.7, 33.3], seed =     12)\n```", "```py\ntrainDF = trainDFmessi.unionAll(trainDFronaldo)\ntestDF = testDFmessi.unionAll(testDFronaldo)\n```", "```py\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml import Pipeline\n\nvectorizer = dl.DeepImageFeaturizer(inputCol=\"image\", \n                           outputCol=\"features\", \n                           modelName=\"InceptionV3\")\nlogreg = LogisticRegression(maxIter=30, \n         labelCol=\"label\")\npipeline = Pipeline(stages=[vectorizer, logreg])\npipeline_model = pipeline.fit(trainDF)\n```", "```py\npredictDF = pipeline_model.transform(testDF)\npredictDF.select('prediction', 'label').show(n = testDF.toPandas().shape[0], truncate=False)\n```", "```py\npredictDF.crosstab('prediction', 'label').show().\n```", "```py\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\nscoring = predictDF.select(\"prediction\", \"label\")\naccuracy_score = MulticlassClassificationEvaluator(metricName=\"accuracy\")\nrate = accuracy_score.evaluate(scoring)*100\nprint(\"accuracy: {}%\" .format(round(rate,2))).\n```", "```py\nlogregFT = LogisticRegression(\n regParam=0.05, \n elasticNetParam=0.3,\n maxIter=15,labelCol = \"label\", featuresCol=\"features\")\n```", "```py\npipelineFT = Pipeline(stages=[vectorizer, logregFT])\n```", "```py\npipeline_model_FT = pipelineFT.fit(trainDF)\n```", "```py\npredictDF_FT = pipeline_model_FT.transform(testDF)\npredictDF_FT.crosstab('prediction', 'label').show()\n```", "```py\nbinary_rate_FT = binaryevaluator.evaluate(predictDF_FT)*100\nprint(\"accuracy: {}%\" .format(round(binary_rate_FT,2)))\n```"]